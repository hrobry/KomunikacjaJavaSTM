
KomunikacjaJavaSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800514c  0800514c  0001514c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051a4  080051a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080051a4  080051a4  000151a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051ac  080051ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051b0  080051b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080051b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000070  08005224  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08005224  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef82  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002126  00000000  00000000  0002f022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00031148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  00031de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001fad  00000000  00000000  000329b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f39a  00000000  00000000  0003495d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b98e  00000000  00000000  00043cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf685  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f0  00000000  00000000  000cf6d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005134 	.word	0x08005134

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005134 	.word	0x08005134

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b96e 	b.w	8000e60 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8083 	bne.w	8000cb2 <__udivmoddi4+0x116>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d947      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bb2:	fab2 f282 	clz	r2, r2
 8000bb6:	b142      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	f1c2 0020 	rsb	r0, r2, #32
 8000bbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	4097      	lsls	r7, r2
 8000bc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bd4:	fa1f fe87 	uxth.w	lr, r7
 8000bd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be0:	fb06 f10e 	mul.w	r1, r6, lr
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bee:	f080 8119 	bcs.w	8000e24 <__udivmoddi4+0x288>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8116 	bls.w	8000e24 <__udivmoddi4+0x288>
 8000bf8:	3e02      	subs	r6, #2
 8000bfa:	443b      	add	r3, r7
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1a:	f080 8105 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	f240 8102 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000c24:	3802      	subs	r0, #2
 8000c26:	443c      	add	r4, r7
 8000c28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	2600      	movs	r6, #0
 8000c32:	b11d      	cbz	r5, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c5 4300 	strd	r4, r3, [r5]
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	b902      	cbnz	r2, 8000c46 <__udivmoddi4+0xaa>
 8000c44:	deff      	udf	#255	; 0xff
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d150      	bne.n	8000cf0 <__udivmoddi4+0x154>
 8000c4e:	1bcb      	subs	r3, r1, r7
 8000c50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c54:	fa1f f887 	uxth.w	r8, r7
 8000c58:	2601      	movs	r6, #1
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c21      	lsrs	r1, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c68:	fb08 f30c 	mul.w	r3, r8, ip
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000c70:	1879      	adds	r1, r7, r1
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0xe2>
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	f200 80e9 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1ac9      	subs	r1, r1, r3
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x10c>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x10a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80d9 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e7bf      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x12e>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80b1 	beq.w	8000e1e <__udivmoddi4+0x282>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x1cc>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0x140>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80b8 	bhi.w	8000e4c <__udivmoddi4+0x2b0>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0103 	sbc.w	r1, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0a8      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000cea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cee:	e7a5      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf8:	4097      	lsls	r7, r2
 8000cfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d02:	40d9      	lsrs	r1, r3
 8000d04:	4330      	orrs	r0, r6
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb06 f108 	mul.w	r1, r6, r8
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d2a:	f080 808d 	bcs.w	8000e48 <__udivmoddi4+0x2ac>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 808a 	bls.w	8000e48 <__udivmoddi4+0x2ac>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b281      	uxth	r1, r0
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb00 f308 	mul.w	r3, r0, r8
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x1c4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d56:	d273      	bcs.n	8000e40 <__udivmoddi4+0x2a4>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d971      	bls.n	8000e40 <__udivmoddi4+0x2a4>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	4439      	add	r1, r7
 8000d60:	1acb      	subs	r3, r1, r3
 8000d62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d66:	e778      	b.n	8000c5a <__udivmoddi4+0xbe>
 8000d68:	f1c6 0c20 	rsb	ip, r6, #32
 8000d6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d86:	431f      	orrs	r7, r3
 8000d88:	0c3b      	lsrs	r3, r7, #16
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fa1f f884 	uxth.w	r8, r4
 8000d92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	fa02 f206 	lsl.w	r2, r2, r6
 8000da4:	fa00 f306 	lsl.w	r3, r0, r6
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x220>
 8000daa:	1861      	adds	r1, r4, r1
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db0:	d248      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000db2:	458a      	cmp	sl, r1
 8000db4:	d946      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4421      	add	r1, r4
 8000dbc:	eba1 010a 	sub.w	r1, r1, sl
 8000dc0:	b2bf      	uxth	r7, r7
 8000dc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dce:	fb00 f808 	mul.w	r8, r0, r8
 8000dd2:	45b8      	cmp	r8, r7
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x24a>
 8000dd6:	19e7      	adds	r7, r4, r7
 8000dd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ddc:	d22e      	bcs.n	8000e3c <__udivmoddi4+0x2a0>
 8000dde:	45b8      	cmp	r8, r7
 8000de0:	d92c      	bls.n	8000e3c <__udivmoddi4+0x2a0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4427      	add	r7, r4
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	eba7 0708 	sub.w	r7, r7, r8
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	454f      	cmp	r7, r9
 8000df4:	46c6      	mov	lr, r8
 8000df6:	4649      	mov	r1, r9
 8000df8:	d31a      	bcc.n	8000e30 <__udivmoddi4+0x294>
 8000dfa:	d017      	beq.n	8000e2c <__udivmoddi4+0x290>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x27a>
 8000dfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000e02:	eb67 0701 	sbc.w	r7, r7, r1
 8000e06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e0a:	40f2      	lsrs	r2, r6
 8000e0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e10:	40f7      	lsrs	r7, r6
 8000e12:	e9c5 2700 	strd	r2, r7, [r5]
 8000e16:	2600      	movs	r6, #0
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	462e      	mov	r6, r5
 8000e20:	4628      	mov	r0, r5
 8000e22:	e70b      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e24:	4606      	mov	r6, r0
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6fd      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e2c:	4543      	cmp	r3, r8
 8000e2e:	d2e5      	bcs.n	8000dfc <__udivmoddi4+0x260>
 8000e30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e34:	eb69 0104 	sbc.w	r1, r9, r4
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e7df      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e7d2      	b.n	8000de6 <__udivmoddi4+0x24a>
 8000e40:	4660      	mov	r0, ip
 8000e42:	e78d      	b.n	8000d60 <__udivmoddi4+0x1c4>
 8000e44:	4681      	mov	r9, r0
 8000e46:	e7b9      	b.n	8000dbc <__udivmoddi4+0x220>
 8000e48:	4666      	mov	r6, ip
 8000e4a:	e775      	b.n	8000d38 <__udivmoddi4+0x19c>
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e74a      	b.n	8000ce6 <__udivmoddi4+0x14a>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	4439      	add	r1, r7
 8000e56:	e713      	b.n	8000c80 <__udivmoddi4+0xe4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	443c      	add	r4, r7
 8000e5c:	e724      	b.n	8000ca8 <__udivmoddi4+0x10c>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	4b3e      	ldr	r3, [pc, #248]	; (8000f78 <MX_GPIO_Init+0x114>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a3d      	ldr	r2, [pc, #244]	; (8000f78 <MX_GPIO_Init+0x114>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b3b      	ldr	r3, [pc, #236]	; (8000f78 <MX_GPIO_Init+0x114>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <MX_GPIO_Init+0x114>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a36      	ldr	r2, [pc, #216]	; (8000f78 <MX_GPIO_Init+0x114>)
 8000ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <MX_GPIO_Init+0x114>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	4b30      	ldr	r3, [pc, #192]	; (8000f78 <MX_GPIO_Init+0x114>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a2f      	ldr	r2, [pc, #188]	; (8000f78 <MX_GPIO_Init+0x114>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <MX_GPIO_Init+0x114>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <MX_GPIO_Init+0x114>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a28      	ldr	r2, [pc, #160]	; (8000f78 <MX_GPIO_Init+0x114>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <MX_GPIO_Init+0x114>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2120      	movs	r1, #32
 8000eee:	4823      	ldr	r0, [pc, #140]	; (8000f7c <MX_GPIO_Init+0x118>)
 8000ef0:	f001 fd2a 	bl	8002948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000efa:	4821      	ldr	r0, [pc, #132]	; (8000f80 <MX_GPIO_Init+0x11c>)
 8000efc:	f001 fd24 	bl	8002948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f06:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	481a      	ldr	r0, [pc, #104]	; (8000f80 <MX_GPIO_Init+0x11c>)
 8000f18:	f001 fb92 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f1c:	2320      	movs	r3, #32
 8000f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	4812      	ldr	r0, [pc, #72]	; (8000f7c <MX_GPIO_Init+0x118>)
 8000f34:	f001 fb84 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000f38:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480b      	ldr	r0, [pc, #44]	; (8000f80 <MX_GPIO_Init+0x11c>)
 8000f52:	f001 fb75 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4804      	ldr	r0, [pc, #16]	; (8000f7c <MX_GPIO_Init+0x118>)
 8000f6c:	f001 fb68 	bl	8002640 <HAL_GPIO_Init>

}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	; 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	40020800 	.word	0x40020800

08000f84 <frameToName>:
 uint8_t  encoderUp;
 uint8_t encoderDown;
 uint8_t PWM;

   uint8_t  communicationFrame [13];
   void frameToName(){
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
P = communicationFrame [1];
 8000f88:	4b18      	ldr	r3, [pc, #96]	; (8000fec <frameToName+0x68>)
 8000f8a:	785a      	ldrb	r2, [r3, #1]
 8000f8c:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <frameToName+0x6c>)
 8000f8e:	701a      	strb	r2, [r3, #0]
I=communicationFrame [2];
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <frameToName+0x68>)
 8000f92:	789a      	ldrb	r2, [r3, #2]
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <frameToName+0x70>)
 8000f96:	701a      	strb	r2, [r3, #0]
D=communicationFrame [3];
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <frameToName+0x68>)
 8000f9a:	78da      	ldrb	r2, [r3, #3]
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <frameToName+0x74>)
 8000f9e:	701a      	strb	r2, [r3, #0]
START = communicationFrame [4];
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <frameToName+0x68>)
 8000fa2:	791a      	ldrb	r2, [r3, #4]
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <frameToName+0x78>)
 8000fa6:	701a      	strb	r2, [r3, #0]
STOP= communicationFrame [5];
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <frameToName+0x68>)
 8000faa:	795a      	ldrb	r2, [r3, #5]
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <frameToName+0x7c>)
 8000fae:	701a      	strb	r2, [r3, #0]
leftButton= communicationFrame [6];
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <frameToName+0x68>)
 8000fb2:	799a      	ldrb	r2, [r3, #6]
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <frameToName+0x80>)
 8000fb6:	701a      	strb	r2, [r3, #0]
rightButton= communicationFrame [7];
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <frameToName+0x68>)
 8000fba:	79da      	ldrb	r2, [r3, #7]
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <frameToName+0x84>)
 8000fbe:	701a      	strb	r2, [r3, #0]
manual= communicationFrame [8];
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <frameToName+0x68>)
 8000fc2:	7a1a      	ldrb	r2, [r3, #8]
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <frameToName+0x88>)
 8000fc6:	701a      	strb	r2, [r3, #0]
        communicationFrame [9]=encoderUp;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <frameToName+0x8c>)
 8000fca:	781a      	ldrb	r2, [r3, #0]
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <frameToName+0x68>)
 8000fce:	725a      	strb	r2, [r3, #9]
		communicationFrame [10]=encoderDown;
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <frameToName+0x90>)
 8000fd2:	781a      	ldrb	r2, [r3, #0]
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <frameToName+0x68>)
 8000fd6:	729a      	strb	r2, [r3, #10]
		communicationFrame [11]=PWM;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <frameToName+0x94>)
 8000fda:	781a      	ldrb	r2, [r3, #0]
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <frameToName+0x68>)
 8000fde:	72da      	strb	r2, [r3, #11]
   }
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	200000ac 	.word	0x200000ac
 8000ff0:	200000c1 	.word	0x200000c1
 8000ff4:	200000be 	.word	0x200000be
 8000ff8:	200000a8 	.word	0x200000a8
 8000ffc:	200000c2 	.word	0x200000c2
 8001000:	200000bc 	.word	0x200000bc
 8001004:	200000bd 	.word	0x200000bd
 8001008:	200000b9 	.word	0x200000b9
 800100c:	200000bf 	.word	0x200000bf
 8001010:	200000c0 	.word	0x200000c0
 8001014:	200000ba 	.word	0x200000ba
 8001018:	200000bb 	.word	0x200000bb
 800101c:	00000000 	.word	0x00000000

08001020 <calculatePID>:

double calculatePID(double setpoint, double pv) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b09c      	sub	sp, #112	; 0x70
 8001024:	af00      	add	r7, sp, #0
 8001026:	ed87 0b02 	vstr	d0, [r7, #8]
 800102a:	ed87 1b00 	vstr	d1, [r7]

				double dt = 0.5;
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	4b45      	ldr	r3, [pc, #276]	; (8001148 <calculatePID+0x128>)
 8001034:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

							double Kp = 0.1;
 8001038:	a341      	add	r3, pc, #260	; (adr r3, 8001140 <calculatePID+0x120>)
 800103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
							 double Ki = 0.1;
 8001042:	a33f      	add	r3, pc, #252	; (adr r3, 8001140 <calculatePID+0x120>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
							double Kd = 0.1;
 800104c:	a33c      	add	r3, pc, #240	; (adr r3, 8001140 <calculatePID+0x120>)
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

							double pre_error = 0;
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	f04f 0300 	mov.w	r3, #0
 800105e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

							double integral = 0;
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			    double error = setpoint - pv;
 800106e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001072:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001076:	f7ff f907 	bl	8000288 <__aeabi_dsub>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

			    //P
			    double Pout = Kp * error;
 8001082:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001086:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800108a:	f7ff fab5 	bl	80005f8 <__aeabi_dmul>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

			    //I
			    integral = integral + (error * dt);
 8001096:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800109a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800109e:	f7ff faab 	bl	80005f8 <__aeabi_dmul>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80010aa:	f7ff f8ef 	bl	800028c <__adddf3>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			    double Iout = Ki * integral;
 80010b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80010ba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80010be:	f7ff fa9b 	bl	80005f8 <__aeabi_dmul>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

			    //D
			    double derivative = (error - pre_error) / dt;
 80010ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80010ce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80010d2:	f7ff f8d9 	bl	8000288 <__aeabi_dsub>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80010e2:	f7ff fbb3 	bl	800084c <__aeabi_ddiv>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	e9c7 2308 	strd	r2, r3, [r7, #32]
			    double Dout = Kd * derivative;
 80010ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80010f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80010f6:	f7ff fa7f 	bl	80005f8 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	e9c7 2306 	strd	r2, r3, [r7, #24]

			    //PID
			    double out = Pout + Iout + Dout;
 8001102:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001106:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800110a:	f7ff f8bf 	bl	800028c <__adddf3>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001116:	f7ff f8b9 	bl	800028c <__adddf3>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	e9c7 2304 	strd	r2, r3, [r7, #16]

			    pre_error = error;
 8001122:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001126:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			    return out;
 800112a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800112e:	ec43 2b17 	vmov	d7, r2, r3
			}
 8001132:	eeb0 0a47 	vmov.f32	s0, s14
 8001136:	eef0 0a67 	vmov.f32	s1, s15
 800113a:	3770      	adds	r7, #112	; 0x70
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	9999999a 	.word	0x9999999a
 8001144:	3fb99999 	.word	0x3fb99999
 8001148:	3fe00000 	.word	0x3fe00000

0800114c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

	static uint8_t Data[13]; // Tablica przechowujaca wysylana wiadomosc.

	////
	//HAL_UART_Transmit_DMA(&huart1, Data, 40); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
	HAL_UART_Receive_DMA(&huart2, communicationFrame, 13); // Ponowne włączenie nasłuchiwania
 8001154:	220d      	movs	r2, #13
 8001156:	490a      	ldr	r1, [pc, #40]	; (8001180 <HAL_UART_RxCpltCallback+0x34>)
 8001158:	480a      	ldr	r0, [pc, #40]	; (8001184 <HAL_UART_RxCpltCallback+0x38>)
 800115a:	f002 fee5 	bl	8003f28 <HAL_UART_Receive_DMA>
	//HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);


	frameToName();
 800115e:	f7ff ff11 	bl	8000f84 <frameToName>
	sprintf(Data, "%s", communicationFrame);
 8001162:	4a07      	ldr	r2, [pc, #28]	; (8001180 <HAL_UART_RxCpltCallback+0x34>)
 8001164:	4908      	ldr	r1, [pc, #32]	; (8001188 <HAL_UART_RxCpltCallback+0x3c>)
 8001166:	4809      	ldr	r0, [pc, #36]	; (800118c <HAL_UART_RxCpltCallback+0x40>)
 8001168:	f003 fbb6 	bl	80048d8 <siprintf>
	HAL_UART_Transmit_DMA(&huart2, Data, 13);
 800116c:	220d      	movs	r2, #13
 800116e:	4907      	ldr	r1, [pc, #28]	; (800118c <HAL_UART_RxCpltCallback+0x40>)
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <HAL_UART_RxCpltCallback+0x38>)
 8001172:	f002 fe5b 	bl	8003e2c <HAL_UART_Transmit_DMA>

}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200000ac 	.word	0x200000ac
 8001184:	2000025c 	.word	0x2000025c
 8001188:	0800514c 	.word	0x0800514c
 800118c:	2000008c 	.word	0x2000008c

08001190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b0ab      	sub	sp, #172	; 0xac
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001196:	f000 fd67 	bl	8001c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119a:	f000 f939 	bl	8001410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119e:	f7ff fe61 	bl	8000e64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011a2:	f000 fc61 	bl	8001a68 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80011a6:	f000 fa53 	bl	8001650 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011aa:	f000 fabf 	bl	800172c <MX_TIM3_Init>
  MX_TIM4_Init();
 80011ae:	f000 fb11 	bl	80017d4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  uint16_t encoderCounterUp=0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
  uint16_t  encoderCounterDown=0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
  bool stateFirst=false;
 80011be:	2300      	movs	r3, #0
 80011c0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  bool stateSecond=false;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
  bool stateThird=false;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
  bool stateFourth=false;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
  bool stateFifth =false;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  char messageSend[64];
  char messageGet[64];
  char* mesage = 'recieved_message';
 80011dc:	4b80      	ldr	r3, [pc, #512]	; (80013e0 <main+0x250>)
 80011de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  double punktZero=0.0 ,PWM;
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	f04f 0300 	mov.w	r3, #0
 80011ea:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  bool left = false;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  bool right = false;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 int way;
  bool RecievedMSG = false;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d



  HAL_UART_Receive_DMA(&huart2, communicationFrame, 13);
 8001200:	220d      	movs	r2, #13
 8001202:	4978      	ldr	r1, [pc, #480]	; (80013e4 <main+0x254>)
 8001204:	4878      	ldr	r0, [pc, #480]	; (80013e8 <main+0x258>)
 8001206:	f002 fe8f 	bl	8003f28 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // enkoder dol
 800120a:	213c      	movs	r1, #60	; 0x3c
 800120c:	4877      	ldr	r0, [pc, #476]	; (80013ec <main+0x25c>)
 800120e:	f002 f9cf 	bl	80035b0 <HAL_TIM_Encoder_Start>
  	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // enkoder gora
 8001212:	213c      	movs	r1, #60	; 0x3c
 8001214:	4876      	ldr	r0, [pc, #472]	; (80013f0 <main+0x260>)
 8001216:	f002 f9cb 	bl	80035b0 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // wysterowanie silnika
 800121a:	2100      	movs	r1, #0
 800121c:	4875      	ldr	r0, [pc, #468]	; (80013f4 <main+0x264>)
 800121e:	f002 f871 	bl	8003304 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001222:	2104      	movs	r1, #4
 8001224:	4873      	ldr	r0, [pc, #460]	; (80013f4 <main+0x264>)
 8001226:	f002 f86d 	bl	8003304 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800122a:	2108      	movs	r1, #8
 800122c:	4871      	ldr	r0, [pc, #452]	; (80013f4 <main+0x264>)
 800122e:	f002 f869 	bl	8003304 <HAL_TIM_PWM_Start>

  while (1)
  {
	encoderCounterUp = __HAL_TIM_GET_COUNTER(&htim4);
 8001232:	4b6f      	ldr	r3, [pc, #444]	; (80013f0 <main+0x260>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
		encoderCounterDown = __HAL_TIM_GET_COUNTER(&htim3);
 800123c:	4b6b      	ldr	r3, [pc, #428]	; (80013ec <main+0x25c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
		if (START == 1&& STOP == 0 && manual == 0)
 8001246:	4b6c      	ldr	r3, [pc, #432]	; (80013f8 <main+0x268>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d164      	bne.n	8001318 <main+0x188>
 800124e:	4b6b      	ldr	r3, [pc, #428]	; (80013fc <main+0x26c>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d160      	bne.n	8001318 <main+0x188>
 8001256:	4b6a      	ldr	r3, [pc, #424]	; (8001400 <main+0x270>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d15c      	bne.n	8001318 <main+0x188>
		{


			PWM =calculatePID(0,encoderCounterUp);
 800125e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f94e 	bl	8000504 <__aeabi_ui2d>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	ec43 2b11 	vmov	d1, r2, r3
 8001270:	ed9f 0b59 	vldr	d0, [pc, #356]	; 80013d8 <main+0x248>
 8001274:	f7ff fed4 	bl	8001020 <calculatePID>
 8001278:	ed87 0b20 	vstr	d0, [r7, #128]	; 0x80
			 if(PWM>0)
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	f04f 0300 	mov.w	r3, #0
 8001284:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001288:	f7ff fc46 	bl	8000b18 <__aeabi_dcmpgt>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d021      	beq.n	80012d6 <main+0x146>
						            {

						             HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,  GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	2140      	movs	r1, #64	; 0x40
 8001296:	485b      	ldr	r0, [pc, #364]	; (8001404 <main+0x274>)
 8001298:	f001 fb56 	bl	8002948 <HAL_GPIO_WritePin>
						             HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,  GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2180      	movs	r1, #128	; 0x80
 80012a0:	4858      	ldr	r0, [pc, #352]	; (8001404 <main+0x274>)
 80012a2:	f001 fb51 	bl	8002948 <HAL_GPIO_WritePin>
						             HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  GPIO_PIN_SET);
 80012a6:	2201      	movs	r2, #1
 80012a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ac:	4855      	ldr	r0, [pc, #340]	; (8001404 <main+0x274>)
 80012ae:	f001 fb4b 	bl	8002948 <HAL_GPIO_WritePin>
						             HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,  GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b8:	4852      	ldr	r0, [pc, #328]	; (8001404 <main+0x274>)
 80012ba:	f001 fb45 	bl	8002948 <HAL_GPIO_WritePin>
						             HAL_Delay(10);
 80012be:	200a      	movs	r0, #10
 80012c0:	f000 fd44 	bl	8001d4c <HAL_Delay>
						             __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 80012c4:	4b4b      	ldr	r3, [pc, #300]	; (80013f4 <main+0x264>)
 80012c6:	681c      	ldr	r4, [r3, #0]
 80012c8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80012cc:	f7ff fc2e 	bl	8000b2c <__aeabi_d2uiz>
 80012d0:	4603      	mov	r3, r0
 80012d2:	6363      	str	r3, [r4, #52]	; 0x34
 80012d4:	e020      	b.n	8001318 <main+0x188>
						            }else{


						            	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,  GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2140      	movs	r1, #64	; 0x40
 80012da:	484a      	ldr	r0, [pc, #296]	; (8001404 <main+0x274>)
 80012dc:	f001 fb34 	bl	8002948 <HAL_GPIO_WritePin>
						            	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,  GPIO_PIN_SET);
 80012e0:	2201      	movs	r2, #1
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	4847      	ldr	r0, [pc, #284]	; (8001404 <main+0x274>)
 80012e6:	f001 fb2f 	bl	8002948 <HAL_GPIO_WritePin>
						            	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012f0:	4844      	ldr	r0, [pc, #272]	; (8001404 <main+0x274>)
 80012f2:	f001 fb29 	bl	8002948 <HAL_GPIO_WritePin>
						            	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,  GPIO_PIN_SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012fc:	4841      	ldr	r0, [pc, #260]	; (8001404 <main+0x274>)
 80012fe:	f001 fb23 	bl	8002948 <HAL_GPIO_WritePin>
						            	HAL_Delay(10);
 8001302:	200a      	movs	r0, #10
 8001304:	f000 fd22 	bl	8001d4c <HAL_Delay>
						            	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 8001308:	4b3a      	ldr	r3, [pc, #232]	; (80013f4 <main+0x264>)
 800130a:	681c      	ldr	r4, [r3, #0]
 800130c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001310:	f7ff fc0c 	bl	8000b2c <__aeabi_d2uiz>
 8001314:	4603      	mov	r3, r0
 8001316:	6363      	str	r3, [r4, #52]	; 0x34
						            }
		}
		if (START == 0 && STOP == 1 && manual == 0)
 8001318:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <main+0x268>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <main+0x196>
 8001320:	4b36      	ldr	r3, [pc, #216]	; (80013fc <main+0x26c>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b01      	cmp	r3, #1
		{

		}
		if (manual == 1 && leftButton==1 && rightButton == 0)
 8001326:	4b36      	ldr	r3, [pc, #216]	; (8001400 <main+0x270>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d124      	bne.n	8001378 <main+0x1e8>
 800132e:	4b36      	ldr	r3, [pc, #216]	; (8001408 <main+0x278>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d120      	bne.n	8001378 <main+0x1e8>
 8001336:	4b35      	ldr	r3, [pc, #212]	; (800140c <main+0x27c>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d11c      	bne.n	8001378 <main+0x1e8>
				{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,  GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2140      	movs	r1, #64	; 0x40
 8001342:	4830      	ldr	r0, [pc, #192]	; (8001404 <main+0x274>)
 8001344:	f001 fb00 	bl	8002948 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,  GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	482d      	ldr	r0, [pc, #180]	; (8001404 <main+0x274>)
 800134e:	f001 fafb 	bl	8002948 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001358:	482a      	ldr	r0, [pc, #168]	; (8001404 <main+0x274>)
 800135a:	f001 faf5 	bl	8002948 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,  GPIO_PIN_SET);
 800135e:	2201      	movs	r2, #1
 8001360:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001364:	4827      	ldr	r0, [pc, #156]	; (8001404 <main+0x274>)
 8001366:	f001 faef 	bl	8002948 <HAL_GPIO_WritePin>
					HAL_Delay(10);
 800136a:	200a      	movs	r0, #10
 800136c:	f000 fcee 	bl	8001d4c <HAL_Delay>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 50);
 8001370:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <main+0x264>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2232      	movs	r2, #50	; 0x32
 8001376:	635a      	str	r2, [r3, #52]	; 0x34
				}
		if (manual == 1 && leftButton==1 && rightButton == 0)
 8001378:	4b21      	ldr	r3, [pc, #132]	; (8001400 <main+0x270>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b01      	cmp	r3, #1
 800137e:	f47f af58 	bne.w	8001232 <main+0xa2>
 8001382:	4b21      	ldr	r3, [pc, #132]	; (8001408 <main+0x278>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b01      	cmp	r3, #1
 8001388:	f47f af53 	bne.w	8001232 <main+0xa2>
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <main+0x27c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	f47f af4e 	bne.w	8001232 <main+0xa2>
						{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,  GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	2140      	movs	r1, #64	; 0x40
 800139a:	481a      	ldr	r0, [pc, #104]	; (8001404 <main+0x274>)
 800139c:	f001 fad4 	bl	8002948 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,  GPIO_PIN_SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	2180      	movs	r1, #128	; 0x80
 80013a4:	4817      	ldr	r0, [pc, #92]	; (8001404 <main+0x274>)
 80013a6:	f001 facf 	bl	8002948 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b0:	4814      	ldr	r0, [pc, #80]	; (8001404 <main+0x274>)
 80013b2:	f001 fac9 	bl	8002948 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,  GPIO_PIN_SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013bc:	4811      	ldr	r0, [pc, #68]	; (8001404 <main+0x274>)
 80013be:	f001 fac3 	bl	8002948 <HAL_GPIO_WritePin>
					HAL_Delay(10);
 80013c2:	200a      	movs	r0, #10
 80013c4:	f000 fcc2 	bl	8001d4c <HAL_Delay>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 50);
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <main+0x264>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2232      	movs	r2, #50	; 0x32
 80013ce:	635a      	str	r2, [r3, #52]	; 0x34
	encoderCounterUp = __HAL_TIM_GET_COUNTER(&htim4);
 80013d0:	e72f      	b.n	8001232 <main+0xa2>
 80013d2:	bf00      	nop
 80013d4:	f3af 8000 	nop.w
	...
 80013e0:	73616765 	.word	0x73616765
 80013e4:	200000ac 	.word	0x200000ac
 80013e8:	2000025c 	.word	0x2000025c
 80013ec:	2000010c 	.word	0x2000010c
 80013f0:	200000c4 	.word	0x200000c4
 80013f4:	20000154 	.word	0x20000154
 80013f8:	200000c2 	.word	0x200000c2
 80013fc:	200000bc 	.word	0x200000bc
 8001400:	200000bf 	.word	0x200000bf
 8001404:	40020800 	.word	0x40020800
 8001408:	200000bd 	.word	0x200000bd
 800140c:	200000b9 	.word	0x200000b9

08001410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b094      	sub	sp, #80	; 0x50
 8001414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001416:	f107 0320 	add.w	r3, r7, #32
 800141a:	2230      	movs	r2, #48	; 0x30
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f003 fa52 	bl	80048c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <SystemClock_Config+0xd0>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	4a28      	ldr	r2, [pc, #160]	; (80014e0 <SystemClock_Config+0xd0>)
 800143e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001442:	6413      	str	r3, [r2, #64]	; 0x40
 8001444:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <SystemClock_Config+0xd0>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <SystemClock_Config+0xd4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800145c:	4a21      	ldr	r2, [pc, #132]	; (80014e4 <SystemClock_Config+0xd4>)
 800145e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <SystemClock_Config+0xd4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001470:	2302      	movs	r3, #2
 8001472:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001474:	2301      	movs	r3, #1
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001478:	2310      	movs	r3, #16
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147c:	2302      	movs	r3, #2
 800147e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001480:	2300      	movs	r3, #0
 8001482:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001484:	2310      	movs	r3, #16
 8001486:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001488:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800148c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800148e:	2304      	movs	r3, #4
 8001490:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001492:	2307      	movs	r3, #7
 8001494:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001496:	f107 0320 	add.w	r3, r7, #32
 800149a:	4618      	mov	r0, r3
 800149c:	f001 fa6e 	bl	800297c <HAL_RCC_OscConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014a6:	f000 f81f 	bl	80014e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014aa:	230f      	movs	r3, #15
 80014ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ae:	2302      	movs	r3, #2
 80014b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80014b2:	23a0      	movs	r3, #160	; 0xa0
 80014b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f001 fcd0 	bl	8002e6c <HAL_RCC_ClockConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80014d2:	f000 f809 	bl	80014e8 <Error_Handler>
  }
}
 80014d6:	bf00      	nop
 80014d8:	3750      	adds	r7, #80	; 0x50
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40007000 	.word	0x40007000

080014e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ec:	b672      	cpsid	i
}
 80014ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <Error_Handler+0x8>
	...

080014f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_MspInit+0x4c>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <HAL_MspInit+0x4c>)
 8001504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001508:	6453      	str	r3, [r2, #68]	; 0x44
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <HAL_MspInit+0x4c>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_MspInit+0x4c>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a08      	ldr	r2, [pc, #32]	; (8001540 <HAL_MspInit+0x4c>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_MspInit+0x4c>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001532:	2007      	movs	r0, #7
 8001534:	f000 fce0 	bl	8001ef8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40023800 	.word	0x40023800

08001544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <NMI_Handler+0x4>

0800154a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <MemManage_Handler+0x4>

08001556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <UsageFault_Handler+0x4>

08001562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001590:	f000 fbbc 	bl	8001d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}

08001598 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <DMA1_Stream5_IRQHandler+0x10>)
 800159e:	f000 fde5 	bl	800216c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2000019c 	.word	0x2000019c

080015ac <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <DMA1_Stream6_IRQHandler+0x10>)
 80015b2:	f000 fddb 	bl	800216c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200001fc 	.word	0x200001fc

080015c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c8:	4a14      	ldr	r2, [pc, #80]	; (800161c <_sbrk+0x5c>)
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <_sbrk+0x60>)
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d4:	4b13      	ldr	r3, [pc, #76]	; (8001624 <_sbrk+0x64>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <_sbrk+0x64>)
 80015de:	4a12      	ldr	r2, [pc, #72]	; (8001628 <_sbrk+0x68>)
 80015e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d207      	bcs.n	8001600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f0:	f003 f940 	bl	8004874 <__errno>
 80015f4:	4603      	mov	r3, r0
 80015f6:	220c      	movs	r2, #12
 80015f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
 80015fe:	e009      	b.n	8001614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001606:	4b07      	ldr	r3, [pc, #28]	; (8001624 <_sbrk+0x64>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	4a05      	ldr	r2, [pc, #20]	; (8001624 <_sbrk+0x64>)
 8001610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001612:	68fb      	ldr	r3, [r7, #12]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20018000 	.word	0x20018000
 8001620:	00000400 	.word	0x00000400
 8001624:	2000009c 	.word	0x2000009c
 8001628:	200002b8 	.word	0x200002b8

0800162c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <SystemInit+0x20>)
 8001632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001636:	4a05      	ldr	r2, [pc, #20]	; (800164c <SystemInit+0x20>)
 8001638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800163c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001656:	f107 0320 	add.w	r3, r7, #32
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]
 800166e:	615a      	str	r2, [r3, #20]
 8001670:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001672:	4b2d      	ldr	r3, [pc, #180]	; (8001728 <MX_TIM2_Init+0xd8>)
 8001674:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001678:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800167a:	4b2b      	ldr	r3, [pc, #172]	; (8001728 <MX_TIM2_Init+0xd8>)
 800167c:	2200      	movs	r2, #0
 800167e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001680:	4b29      	ldr	r3, [pc, #164]	; (8001728 <MX_TIM2_Init+0xd8>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8001686:	4b28      	ldr	r3, [pc, #160]	; (8001728 <MX_TIM2_Init+0xd8>)
 8001688:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800168c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168e:	4b26      	ldr	r3, [pc, #152]	; (8001728 <MX_TIM2_Init+0xd8>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001694:	4b24      	ldr	r3, [pc, #144]	; (8001728 <MX_TIM2_Init+0xd8>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800169a:	4823      	ldr	r0, [pc, #140]	; (8001728 <MX_TIM2_Init+0xd8>)
 800169c:	f001 fde2 	bl	8003264 <HAL_TIM_PWM_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80016a6:	f7ff ff1f 	bl	80014e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016b2:	f107 0320 	add.w	r3, r7, #32
 80016b6:	4619      	mov	r1, r3
 80016b8:	481b      	ldr	r0, [pc, #108]	; (8001728 <MX_TIM2_Init+0xd8>)
 80016ba:	f002 fafb 	bl	8003cb4 <HAL_TIMEx_MasterConfigSynchronization>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80016c4:	f7ff ff10 	bl	80014e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c8:	2360      	movs	r3, #96	; 0x60
 80016ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2200      	movs	r2, #0
 80016dc:	4619      	mov	r1, r3
 80016de:	4812      	ldr	r0, [pc, #72]	; (8001728 <MX_TIM2_Init+0xd8>)
 80016e0:	f001 fff4 	bl	80036cc <HAL_TIM_PWM_ConfigChannel>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80016ea:	f7ff fefd 	bl	80014e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	2204      	movs	r2, #4
 80016f2:	4619      	mov	r1, r3
 80016f4:	480c      	ldr	r0, [pc, #48]	; (8001728 <MX_TIM2_Init+0xd8>)
 80016f6:	f001 ffe9 	bl	80036cc <HAL_TIM_PWM_ConfigChannel>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001700:	f7ff fef2 	bl	80014e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	2208      	movs	r2, #8
 8001708:	4619      	mov	r1, r3
 800170a:	4807      	ldr	r0, [pc, #28]	; (8001728 <MX_TIM2_Init+0xd8>)
 800170c:	f001 ffde 	bl	80036cc <HAL_TIM_PWM_ConfigChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001716:	f7ff fee7 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800171a:	4803      	ldr	r0, [pc, #12]	; (8001728 <MX_TIM2_Init+0xd8>)
 800171c:	f000 f94c 	bl	80019b8 <HAL_TIM_MspPostInit>

}
 8001720:	bf00      	nop
 8001722:	3728      	adds	r7, #40	; 0x28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000154 	.word	0x20000154

0800172c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08c      	sub	sp, #48	; 0x30
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	2224      	movs	r2, #36	; 0x24
 8001738:	2100      	movs	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f003 f8c4 	bl	80048c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001748:	4b20      	ldr	r3, [pc, #128]	; (80017cc <MX_TIM3_Init+0xa0>)
 800174a:	4a21      	ldr	r2, [pc, #132]	; (80017d0 <MX_TIM3_Init+0xa4>)
 800174c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800174e:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <MX_TIM3_Init+0xa0>)
 8001750:	2200      	movs	r2, #0
 8001752:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001754:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <MX_TIM3_Init+0xa0>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 511;
 800175a:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <MX_TIM3_Init+0xa0>)
 800175c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001760:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001762:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <MX_TIM3_Init+0xa0>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <MX_TIM3_Init+0xa0>)
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800176e:	2301      	movs	r3, #1
 8001770:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001776:	2301      	movs	r3, #1
 8001778:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001786:	2301      	movs	r3, #1
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800178a:	2300      	movs	r3, #0
 800178c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001792:	f107 030c 	add.w	r3, r7, #12
 8001796:	4619      	mov	r1, r3
 8001798:	480c      	ldr	r0, [pc, #48]	; (80017cc <MX_TIM3_Init+0xa0>)
 800179a:	f001 fe63 	bl	8003464 <HAL_TIM_Encoder_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80017a4:	f7ff fea0 	bl	80014e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_TIM3_Init+0xa0>)
 80017b6:	f002 fa7d 	bl	8003cb4 <HAL_TIMEx_MasterConfigSynchronization>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80017c0:	f7ff fe92 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	3730      	adds	r7, #48	; 0x30
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	2000010c 	.word	0x2000010c
 80017d0:	40000400 	.word	0x40000400

080017d4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08c      	sub	sp, #48	; 0x30
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	2224      	movs	r2, #36	; 0x24
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 f870 	bl	80048c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017f0:	4b20      	ldr	r3, [pc, #128]	; (8001874 <MX_TIM4_Init+0xa0>)
 80017f2:	4a21      	ldr	r2, [pc, #132]	; (8001878 <MX_TIM4_Init+0xa4>)
 80017f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017f6:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <MX_TIM4_Init+0xa0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fc:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <MX_TIM4_Init+0xa0>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8001802:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <MX_TIM4_Init+0xa0>)
 8001804:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001808:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180a:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <MX_TIM4_Init+0xa0>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001810:	4b18      	ldr	r3, [pc, #96]	; (8001874 <MX_TIM4_Init+0xa0>)
 8001812:	2200      	movs	r2, #0
 8001814:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001816:	2301      	movs	r3, #1
 8001818:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800181e:	2301      	movs	r3, #1
 8001820:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800182e:	2301      	movs	r3, #1
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	4619      	mov	r1, r3
 8001840:	480c      	ldr	r0, [pc, #48]	; (8001874 <MX_TIM4_Init+0xa0>)
 8001842:	f001 fe0f 	bl	8003464 <HAL_TIM_Encoder_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800184c:	f7ff fe4c 	bl	80014e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001850:	2300      	movs	r3, #0
 8001852:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	4619      	mov	r1, r3
 800185c:	4805      	ldr	r0, [pc, #20]	; (8001874 <MX_TIM4_Init+0xa0>)
 800185e:	f002 fa29 	bl	8003cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001868:	f7ff fe3e 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	3730      	adds	r7, #48	; 0x30
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200000c4 	.word	0x200000c4
 8001878:	40000800 	.word	0x40000800

0800187c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800188c:	d10d      	bne.n	80018aa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_TIM_PWM_MspInit+0x3c>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800

080018bc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08c      	sub	sp, #48	; 0x30
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 031c 	add.w	r3, r7, #28
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a32      	ldr	r2, [pc, #200]	; (80019a4 <HAL_TIM_Encoder_MspInit+0xe8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d12c      	bne.n	8001938 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	61bb      	str	r3, [r7, #24]
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	4a30      	ldr	r2, [pc, #192]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	6413      	str	r3, [r2, #64]	; 0x40
 80018ee:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a29      	ldr	r2, [pc, #164]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001916:	23c0      	movs	r3, #192	; 0xc0
 8001918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001926:	2302      	movs	r3, #2
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192a:	f107 031c 	add.w	r3, r7, #28
 800192e:	4619      	mov	r1, r3
 8001930:	481e      	ldr	r0, [pc, #120]	; (80019ac <HAL_TIM_Encoder_MspInit+0xf0>)
 8001932:	f000 fe85 	bl	8002640 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001936:	e030      	b.n	800199a <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a1c      	ldr	r2, [pc, #112]	; (80019b0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d12b      	bne.n	800199a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a17      	ldr	r2, [pc, #92]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a10      	ldr	r2, [pc, #64]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800197a:	23c0      	movs	r3, #192	; 0xc0
 800197c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800198a:	2302      	movs	r3, #2
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	4619      	mov	r1, r3
 8001994:	4807      	ldr	r0, [pc, #28]	; (80019b4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001996:	f000 fe53 	bl	8002640 <HAL_GPIO_Init>
}
 800199a:	bf00      	nop
 800199c:	3730      	adds	r7, #48	; 0x30
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40000400 	.word	0x40000400
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020000 	.word	0x40020000
 80019b0:	40000800 	.word	0x40000800
 80019b4:	40020400 	.word	0x40020400

080019b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d8:	d13c      	bne.n	8001a54 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <HAL_TIM_MspPostInit+0xa4>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a1e      	ldr	r2, [pc, #120]	; (8001a5c <HAL_TIM_MspPostInit+0xa4>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <HAL_TIM_MspPostInit+0xa4>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <HAL_TIM_MspPostInit+0xa4>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <HAL_TIM_MspPostInit+0xa4>)
 8001a00:	f043 0302 	orr.w	r3, r3, #2
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_TIM_MspPostInit+0xa4>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a12:	2303      	movs	r3, #3
 8001a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a22:	2301      	movs	r3, #1
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480c      	ldr	r0, [pc, #48]	; (8001a60 <HAL_TIM_MspPostInit+0xa8>)
 8001a2e:	f000 fe07 	bl	8002640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a44:	2301      	movs	r3, #1
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4805      	ldr	r0, [pc, #20]	; (8001a64 <HAL_TIM_MspPostInit+0xac>)
 8001a50:	f000 fdf6 	bl	8002640 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a54:	bf00      	nop
 8001a56:	3728      	adds	r7, #40	; 0x28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020000 	.word	0x40020000
 8001a64:	40020400 	.word	0x40020400

08001a68 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a6e:	4a12      	ldr	r2, [pc, #72]	; (8001ab8 <MX_USART2_UART_Init+0x50>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a9e:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001aa0:	f002 f976 	bl	8003d90 <HAL_UART_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aaa:	f7ff fd1d 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	2000025c 	.word	0x2000025c
 8001ab8:	40004400 	.word	0x40004400

08001abc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a47      	ldr	r2, [pc, #284]	; (8001bf8 <HAL_UART_MspInit+0x13c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	f040 8088 	bne.w	8001bf0 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	4b45      	ldr	r3, [pc, #276]	; (8001bfc <HAL_UART_MspInit+0x140>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	4a44      	ldr	r2, [pc, #272]	; (8001bfc <HAL_UART_MspInit+0x140>)
 8001aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aee:	6413      	str	r3, [r2, #64]	; 0x40
 8001af0:	4b42      	ldr	r3, [pc, #264]	; (8001bfc <HAL_UART_MspInit+0x140>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	4b3e      	ldr	r3, [pc, #248]	; (8001bfc <HAL_UART_MspInit+0x140>)
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	4a3d      	ldr	r2, [pc, #244]	; (8001bfc <HAL_UART_MspInit+0x140>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0c:	4b3b      	ldr	r3, [pc, #236]	; (8001bfc <HAL_UART_MspInit+0x140>)
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b18:	230c      	movs	r3, #12
 8001b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2300      	movs	r3, #0
 8001b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b28:	2307      	movs	r3, #7
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4619      	mov	r1, r3
 8001b32:	4833      	ldr	r0, [pc, #204]	; (8001c00 <HAL_UART_MspInit+0x144>)
 8001b34:	f000 fd84 	bl	8002640 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001b38:	4b32      	ldr	r3, [pc, #200]	; (8001c04 <HAL_UART_MspInit+0x148>)
 8001b3a:	4a33      	ldr	r2, [pc, #204]	; (8001c08 <HAL_UART_MspInit+0x14c>)
 8001b3c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001b3e:	4b31      	ldr	r3, [pc, #196]	; (8001c04 <HAL_UART_MspInit+0x148>)
 8001b40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b44:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b46:	4b2f      	ldr	r3, [pc, #188]	; (8001c04 <HAL_UART_MspInit+0x148>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b4c:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <HAL_UART_MspInit+0x148>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b52:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <HAL_UART_MspInit+0x148>)
 8001b54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b58:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b5a:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <HAL_UART_MspInit+0x148>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b60:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <HAL_UART_MspInit+0x148>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001b66:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <HAL_UART_MspInit+0x148>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <HAL_UART_MspInit+0x148>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b72:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <HAL_UART_MspInit+0x148>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b78:	4822      	ldr	r0, [pc, #136]	; (8001c04 <HAL_UART_MspInit+0x148>)
 8001b7a:	f000 f9f1 	bl	8001f60 <HAL_DMA_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001b84:	f7ff fcb0 	bl	80014e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a1e      	ldr	r2, [pc, #120]	; (8001c04 <HAL_UART_MspInit+0x148>)
 8001b8c:	639a      	str	r2, [r3, #56]	; 0x38
 8001b8e:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <HAL_UART_MspInit+0x148>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001b94:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_UART_MspInit+0x150>)
 8001b96:	4a1e      	ldr	r2, [pc, #120]	; (8001c10 <HAL_UART_MspInit+0x154>)
 8001b98:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001b9a:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <HAL_UART_MspInit+0x150>)
 8001b9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ba0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <HAL_UART_MspInit+0x150>)
 8001ba4:	2240      	movs	r2, #64	; 0x40
 8001ba6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba8:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <HAL_UART_MspInit+0x150>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bae:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <HAL_UART_MspInit+0x150>)
 8001bb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bb4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <HAL_UART_MspInit+0x150>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <HAL_UART_MspInit+0x150>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_UART_MspInit+0x150>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bc8:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <HAL_UART_MspInit+0x150>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <HAL_UART_MspInit+0x150>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001bd4:	480d      	ldr	r0, [pc, #52]	; (8001c0c <HAL_UART_MspInit+0x150>)
 8001bd6:	f000 f9c3 	bl	8001f60 <HAL_DMA_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001be0:	f7ff fc82 	bl	80014e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a09      	ldr	r2, [pc, #36]	; (8001c0c <HAL_UART_MspInit+0x150>)
 8001be8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bea:	4a08      	ldr	r2, [pc, #32]	; (8001c0c <HAL_UART_MspInit+0x150>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	3728      	adds	r7, #40	; 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40004400 	.word	0x40004400
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020000 	.word	0x40020000
 8001c04:	2000019c 	.word	0x2000019c
 8001c08:	40026088 	.word	0x40026088
 8001c0c:	200001fc 	.word	0x200001fc
 8001c10:	400260a0 	.word	0x400260a0

08001c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c18:	480d      	ldr	r0, [pc, #52]	; (8001c50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c1a:	490e      	ldr	r1, [pc, #56]	; (8001c54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c1c:	4a0e      	ldr	r2, [pc, #56]	; (8001c58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c30:	4c0b      	ldr	r4, [pc, #44]	; (8001c60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c3e:	f7ff fcf5 	bl	800162c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c42:	f002 fe1d 	bl	8004880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c46:	f7ff faa3 	bl	8001190 <main>
  bx  lr    
 8001c4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c58:	080051b4 	.word	0x080051b4
  ldr r2, =_sbss
 8001c5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c60:	200002b4 	.word	0x200002b4

08001c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c64:	e7fe      	b.n	8001c64 <ADC_IRQHandler>
	...

08001c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_Init+0x40>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0d      	ldr	r2, [pc, #52]	; (8001ca8 <HAL_Init+0x40>)
 8001c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_Init+0x40>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <HAL_Init+0x40>)
 8001c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a07      	ldr	r2, [pc, #28]	; (8001ca8 <HAL_Init+0x40>)
 8001c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c90:	2003      	movs	r0, #3
 8001c92:	f000 f931 	bl	8001ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c96:	2000      	movs	r0, #0
 8001c98:	f000 f808 	bl	8001cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c9c:	f7ff fc2a 	bl	80014f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023c00 	.word	0x40023c00

08001cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_InitTick+0x54>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_InitTick+0x58>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 f93b 	bl	8001f46 <HAL_SYSTICK_Config>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e00e      	b.n	8001cf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b0f      	cmp	r3, #15
 8001cde:	d80a      	bhi.n	8001cf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce8:	f000 f911 	bl	8001f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cec:	4a06      	ldr	r2, [pc, #24]	; (8001d08 <HAL_InitTick+0x5c>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e000      	b.n	8001cf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000000 	.word	0x20000000
 8001d04:	20000008 	.word	0x20000008
 8001d08:	20000004 	.word	0x20000004

08001d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_IncTick+0x20>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_IncTick+0x24>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <HAL_IncTick+0x24>)
 8001d1e:	6013      	str	r3, [r2, #0]
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000008 	.word	0x20000008
 8001d30:	200002a0 	.word	0x200002a0

08001d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return uwTick;
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <HAL_GetTick+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	200002a0 	.word	0x200002a0

08001d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d54:	f7ff ffee 	bl	8001d34 <HAL_GetTick>
 8001d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d64:	d005      	beq.n	8001d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_Delay+0x44>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4413      	add	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d72:	bf00      	nop
 8001d74:	f7ff ffde 	bl	8001d34 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d8f7      	bhi.n	8001d74 <HAL_Delay+0x28>
  {
  }
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000008 	.word	0x20000008

08001d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db0:	4013      	ands	r3, r2
 8001db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc6:	4a04      	ldr	r2, [pc, #16]	; (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	60d3      	str	r3, [r2, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <__NVIC_GetPriorityGrouping+0x18>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	f003 0307 	and.w	r3, r3, #7
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	6039      	str	r1, [r7, #0]
 8001e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	db0a      	blt.n	8001e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	490c      	ldr	r1, [pc, #48]	; (8001e44 <__NVIC_SetPriority+0x4c>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	0112      	lsls	r2, r2, #4
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e20:	e00a      	b.n	8001e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4908      	ldr	r1, [pc, #32]	; (8001e48 <__NVIC_SetPriority+0x50>)
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	3b04      	subs	r3, #4
 8001e30:	0112      	lsls	r2, r2, #4
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	440b      	add	r3, r1
 8001e36:	761a      	strb	r2, [r3, #24]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000e100 	.word	0xe000e100
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b089      	sub	sp, #36	; 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f1c3 0307 	rsb	r3, r3, #7
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	bf28      	it	cs
 8001e6a:	2304      	movcs	r3, #4
 8001e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3304      	adds	r3, #4
 8001e72:	2b06      	cmp	r3, #6
 8001e74:	d902      	bls.n	8001e7c <NVIC_EncodePriority+0x30>
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3b03      	subs	r3, #3
 8001e7a:	e000      	b.n	8001e7e <NVIC_EncodePriority+0x32>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	f04f 32ff 	mov.w	r2, #4294967295
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	401a      	ands	r2, r3
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	43d9      	mvns	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	4313      	orrs	r3, r2
         );
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3724      	adds	r7, #36	; 0x24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ec4:	d301      	bcc.n	8001eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00f      	b.n	8001eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eca:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <SysTick_Config+0x40>)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed2:	210f      	movs	r1, #15
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed8:	f7ff ff8e 	bl	8001df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <SysTick_Config+0x40>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee2:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <SysTick_Config+0x40>)
 8001ee4:	2207      	movs	r2, #7
 8001ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	e000e010 	.word	0xe000e010

08001ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff ff47 	bl	8001d94 <__NVIC_SetPriorityGrouping>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f20:	f7ff ff5c 	bl	8001ddc <__NVIC_GetPriorityGrouping>
 8001f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	6978      	ldr	r0, [r7, #20]
 8001f2c:	f7ff ff8e 	bl	8001e4c <NVIC_EncodePriority>
 8001f30:	4602      	mov	r2, r0
 8001f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff5d 	bl	8001df8 <__NVIC_SetPriority>
}
 8001f3e:	bf00      	nop
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ffb0 	bl	8001eb4 <SysTick_Config>
 8001f54:	4603      	mov	r3, r0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f6c:	f7ff fee2 	bl	8001d34 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e099      	b.n	80020b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0201 	bic.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f9c:	e00f      	b.n	8001fbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f9e:	f7ff fec9 	bl	8001d34 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b05      	cmp	r3, #5
 8001faa:	d908      	bls.n	8001fbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e078      	b.n	80020b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1e8      	bne.n	8001f9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	4b38      	ldr	r3, [pc, #224]	; (80020b8 <HAL_DMA_Init+0x158>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002002:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	4313      	orrs	r3, r2
 800200e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	2b04      	cmp	r3, #4
 8002016:	d107      	bne.n	8002028 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	4313      	orrs	r3, r2
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	4313      	orrs	r3, r2
 8002026:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f023 0307 	bic.w	r3, r3, #7
 800203e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	4313      	orrs	r3, r2
 8002048:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	2b04      	cmp	r3, #4
 8002050:	d117      	bne.n	8002082 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4313      	orrs	r3, r2
 800205a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00e      	beq.n	8002082 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 fa6f 	bl	8002548 <DMA_CheckFifoParam>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2240      	movs	r2, #64	; 0x40
 8002074:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800207e:	2301      	movs	r3, #1
 8002080:	e016      	b.n	80020b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 fa26 	bl	80024dc <DMA_CalcBaseAndBitshift>
 8002090:	4603      	mov	r3, r0
 8002092:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002098:	223f      	movs	r2, #63	; 0x3f
 800209a:	409a      	lsls	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	f010803f 	.word	0xf010803f

080020bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_DMA_Start_IT+0x26>
 80020de:	2302      	movs	r3, #2
 80020e0:	e040      	b.n	8002164 <HAL_DMA_Start_IT+0xa8>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d12f      	bne.n	8002156 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2202      	movs	r2, #2
 80020fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68b9      	ldr	r1, [r7, #8]
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 f9b8 	bl	8002480 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002114:	223f      	movs	r2, #63	; 0x3f
 8002116:	409a      	lsls	r2, r3
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0216 	orr.w	r2, r2, #22
 800212a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	2b00      	cmp	r3, #0
 8002132:	d007      	beq.n	8002144 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0208 	orr.w	r2, r2, #8
 8002142:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e005      	b.n	8002162 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800215e:	2302      	movs	r3, #2
 8002160:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002162:	7dfb      	ldrb	r3, [r7, #23]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002178:	4b92      	ldr	r3, [pc, #584]	; (80023c4 <HAL_DMA_IRQHandler+0x258>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a92      	ldr	r2, [pc, #584]	; (80023c8 <HAL_DMA_IRQHandler+0x25c>)
 800217e:	fba2 2303 	umull	r2, r3, r2, r3
 8002182:	0a9b      	lsrs	r3, r3, #10
 8002184:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002196:	2208      	movs	r2, #8
 8002198:	409a      	lsls	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4013      	ands	r3, r2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d01a      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d013      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0204 	bic.w	r2, r2, #4
 80021be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c4:	2208      	movs	r2, #8
 80021c6:	409a      	lsls	r2, r3
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d0:	f043 0201 	orr.w	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021dc:	2201      	movs	r2, #1
 80021de:	409a      	lsls	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d012      	beq.n	800220e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00b      	beq.n	800220e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fa:	2201      	movs	r2, #1
 80021fc:	409a      	lsls	r2, r3
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002206:	f043 0202 	orr.w	r2, r3, #2
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002212:	2204      	movs	r2, #4
 8002214:	409a      	lsls	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4013      	ands	r3, r2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d012      	beq.n	8002244 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00b      	beq.n	8002244 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002230:	2204      	movs	r2, #4
 8002232:	409a      	lsls	r2, r3
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223c:	f043 0204 	orr.w	r2, r3, #4
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002248:	2210      	movs	r2, #16
 800224a:	409a      	lsls	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4013      	ands	r3, r2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d043      	beq.n	80022dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d03c      	beq.n	80022dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002266:	2210      	movs	r2, #16
 8002268:	409a      	lsls	r2, r3
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d018      	beq.n	80022ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d108      	bne.n	800229c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d024      	beq.n	80022dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	4798      	blx	r3
 800229a:	e01f      	b.n	80022dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d01b      	beq.n	80022dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4798      	blx	r3
 80022ac:	e016      	b.n	80022dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d107      	bne.n	80022cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0208 	bic.w	r2, r2, #8
 80022ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e0:	2220      	movs	r2, #32
 80022e2:	409a      	lsls	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 808e 	beq.w	800240a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 8086 	beq.w	800240a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002302:	2220      	movs	r2, #32
 8002304:	409a      	lsls	r2, r3
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b05      	cmp	r3, #5
 8002314:	d136      	bne.n	8002384 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0216 	bic.w	r2, r2, #22
 8002324:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002334:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d103      	bne.n	8002346 <HAL_DMA_IRQHandler+0x1da>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002342:	2b00      	cmp	r3, #0
 8002344:	d007      	beq.n	8002356 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0208 	bic.w	r2, r2, #8
 8002354:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235a:	223f      	movs	r2, #63	; 0x3f
 800235c:	409a      	lsls	r2, r3
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002376:	2b00      	cmp	r3, #0
 8002378:	d07d      	beq.n	8002476 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	4798      	blx	r3
        }
        return;
 8002382:	e078      	b.n	8002476 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d01c      	beq.n	80023cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d108      	bne.n	80023b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d030      	beq.n	800240a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	4798      	blx	r3
 80023b0:	e02b      	b.n	800240a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d027      	beq.n	800240a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	4798      	blx	r3
 80023c2:	e022      	b.n	800240a <HAL_DMA_IRQHandler+0x29e>
 80023c4:	20000000 	.word	0x20000000
 80023c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10f      	bne.n	80023fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0210 	bic.w	r2, r2, #16
 80023e8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240e:	2b00      	cmp	r3, #0
 8002410:	d032      	beq.n	8002478 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d022      	beq.n	8002464 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2205      	movs	r2, #5
 8002422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0201 	bic.w	r2, r2, #1
 8002434:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	3301      	adds	r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	429a      	cmp	r2, r3
 8002440:	d307      	bcc.n	8002452 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f2      	bne.n	8002436 <HAL_DMA_IRQHandler+0x2ca>
 8002450:	e000      	b.n	8002454 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002452:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	4798      	blx	r3
 8002474:	e000      	b.n	8002478 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002476:	bf00      	nop
    }
  }
}
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop

08002480 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800249c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b40      	cmp	r3, #64	; 0x40
 80024ac:	d108      	bne.n	80024c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024be:	e007      	b.n	80024d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	60da      	str	r2, [r3, #12]
}
 80024d0:	bf00      	nop
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	3b10      	subs	r3, #16
 80024ec:	4a14      	ldr	r2, [pc, #80]	; (8002540 <DMA_CalcBaseAndBitshift+0x64>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024f6:	4a13      	ldr	r2, [pc, #76]	; (8002544 <DMA_CalcBaseAndBitshift+0x68>)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4413      	add	r3, r2
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b03      	cmp	r3, #3
 8002508:	d909      	bls.n	800251e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002512:	f023 0303 	bic.w	r3, r3, #3
 8002516:	1d1a      	adds	r2, r3, #4
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	659a      	str	r2, [r3, #88]	; 0x58
 800251c:	e007      	b.n	800252e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002526:	f023 0303 	bic.w	r3, r3, #3
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	aaaaaaab 	.word	0xaaaaaaab
 8002544:	08005168 	.word	0x08005168

08002548 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d11f      	bne.n	80025a2 <DMA_CheckFifoParam+0x5a>
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d856      	bhi.n	8002616 <DMA_CheckFifoParam+0xce>
 8002568:	a201      	add	r2, pc, #4	; (adr r2, 8002570 <DMA_CheckFifoParam+0x28>)
 800256a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256e:	bf00      	nop
 8002570:	08002581 	.word	0x08002581
 8002574:	08002593 	.word	0x08002593
 8002578:	08002581 	.word	0x08002581
 800257c:	08002617 	.word	0x08002617
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d046      	beq.n	800261a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002590:	e043      	b.n	800261a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800259a:	d140      	bne.n	800261e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a0:	e03d      	b.n	800261e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025aa:	d121      	bne.n	80025f0 <DMA_CheckFifoParam+0xa8>
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d837      	bhi.n	8002622 <DMA_CheckFifoParam+0xda>
 80025b2:	a201      	add	r2, pc, #4	; (adr r2, 80025b8 <DMA_CheckFifoParam+0x70>)
 80025b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b8:	080025c9 	.word	0x080025c9
 80025bc:	080025cf 	.word	0x080025cf
 80025c0:	080025c9 	.word	0x080025c9
 80025c4:	080025e1 	.word	0x080025e1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
      break;
 80025cc:	e030      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d025      	beq.n	8002626 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025de:	e022      	b.n	8002626 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025e8:	d11f      	bne.n	800262a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025ee:	e01c      	b.n	800262a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d903      	bls.n	80025fe <DMA_CheckFifoParam+0xb6>
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d003      	beq.n	8002604 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025fc:	e018      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
      break;
 8002602:	e015      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00e      	beq.n	800262e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
      break;
 8002614:	e00b      	b.n	800262e <DMA_CheckFifoParam+0xe6>
      break;
 8002616:	bf00      	nop
 8002618:	e00a      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;
 800261a:	bf00      	nop
 800261c:	e008      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;
 800261e:	bf00      	nop
 8002620:	e006      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;
 8002622:	bf00      	nop
 8002624:	e004      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;
 8002626:	bf00      	nop
 8002628:	e002      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;   
 800262a:	bf00      	nop
 800262c:	e000      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;
 800262e:	bf00      	nop
    }
  } 
  
  return status; 
 8002630:	7bfb      	ldrb	r3, [r7, #15]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop

08002640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002652:	2300      	movs	r3, #0
 8002654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	e159      	b.n	8002910 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800265c:	2201      	movs	r2, #1
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	4013      	ands	r3, r2
 800266e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	429a      	cmp	r2, r3
 8002676:	f040 8148 	bne.w	800290a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	2b01      	cmp	r3, #1
 8002684:	d005      	beq.n	8002692 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800268e:	2b02      	cmp	r3, #2
 8002690:	d130      	bne.n	80026f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	2203      	movs	r2, #3
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026c8:	2201      	movs	r2, #1
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 0201 	and.w	r2, r3, #1
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d017      	beq.n	8002730 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	2203      	movs	r2, #3
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d123      	bne.n	8002784 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	08da      	lsrs	r2, r3, #3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3208      	adds	r2, #8
 8002744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	220f      	movs	r2, #15
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	08da      	lsrs	r2, r3, #3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3208      	adds	r2, #8
 800277e:	69b9      	ldr	r1, [r7, #24]
 8002780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	2203      	movs	r2, #3
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0203 	and.w	r2, r3, #3
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80a2 	beq.w	800290a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	4b57      	ldr	r3, [pc, #348]	; (8002928 <HAL_GPIO_Init+0x2e8>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	4a56      	ldr	r2, [pc, #344]	; (8002928 <HAL_GPIO_Init+0x2e8>)
 80027d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d4:	6453      	str	r3, [r2, #68]	; 0x44
 80027d6:	4b54      	ldr	r3, [pc, #336]	; (8002928 <HAL_GPIO_Init+0x2e8>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027e2:	4a52      	ldr	r2, [pc, #328]	; (800292c <HAL_GPIO_Init+0x2ec>)
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	089b      	lsrs	r3, r3, #2
 80027e8:	3302      	adds	r3, #2
 80027ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	220f      	movs	r2, #15
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4013      	ands	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a49      	ldr	r2, [pc, #292]	; (8002930 <HAL_GPIO_Init+0x2f0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d019      	beq.n	8002842 <HAL_GPIO_Init+0x202>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a48      	ldr	r2, [pc, #288]	; (8002934 <HAL_GPIO_Init+0x2f4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d013      	beq.n	800283e <HAL_GPIO_Init+0x1fe>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a47      	ldr	r2, [pc, #284]	; (8002938 <HAL_GPIO_Init+0x2f8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00d      	beq.n	800283a <HAL_GPIO_Init+0x1fa>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a46      	ldr	r2, [pc, #280]	; (800293c <HAL_GPIO_Init+0x2fc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d007      	beq.n	8002836 <HAL_GPIO_Init+0x1f6>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a45      	ldr	r2, [pc, #276]	; (8002940 <HAL_GPIO_Init+0x300>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d101      	bne.n	8002832 <HAL_GPIO_Init+0x1f2>
 800282e:	2304      	movs	r3, #4
 8002830:	e008      	b.n	8002844 <HAL_GPIO_Init+0x204>
 8002832:	2307      	movs	r3, #7
 8002834:	e006      	b.n	8002844 <HAL_GPIO_Init+0x204>
 8002836:	2303      	movs	r3, #3
 8002838:	e004      	b.n	8002844 <HAL_GPIO_Init+0x204>
 800283a:	2302      	movs	r3, #2
 800283c:	e002      	b.n	8002844 <HAL_GPIO_Init+0x204>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <HAL_GPIO_Init+0x204>
 8002842:	2300      	movs	r3, #0
 8002844:	69fa      	ldr	r2, [r7, #28]
 8002846:	f002 0203 	and.w	r2, r2, #3
 800284a:	0092      	lsls	r2, r2, #2
 800284c:	4093      	lsls	r3, r2
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002854:	4935      	ldr	r1, [pc, #212]	; (800292c <HAL_GPIO_Init+0x2ec>)
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	089b      	lsrs	r3, r3, #2
 800285a:	3302      	adds	r3, #2
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002862:	4b38      	ldr	r3, [pc, #224]	; (8002944 <HAL_GPIO_Init+0x304>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002886:	4a2f      	ldr	r2, [pc, #188]	; (8002944 <HAL_GPIO_Init+0x304>)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800288c:	4b2d      	ldr	r3, [pc, #180]	; (8002944 <HAL_GPIO_Init+0x304>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028b0:	4a24      	ldr	r2, [pc, #144]	; (8002944 <HAL_GPIO_Init+0x304>)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028b6:	4b23      	ldr	r3, [pc, #140]	; (8002944 <HAL_GPIO_Init+0x304>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028da:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <HAL_GPIO_Init+0x304>)
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028e0:	4b18      	ldr	r3, [pc, #96]	; (8002944 <HAL_GPIO_Init+0x304>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002904:	4a0f      	ldr	r2, [pc, #60]	; (8002944 <HAL_GPIO_Init+0x304>)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3301      	adds	r3, #1
 800290e:	61fb      	str	r3, [r7, #28]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	2b0f      	cmp	r3, #15
 8002914:	f67f aea2 	bls.w	800265c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	3724      	adds	r7, #36	; 0x24
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40023800 	.word	0x40023800
 800292c:	40013800 	.word	0x40013800
 8002930:	40020000 	.word	0x40020000
 8002934:	40020400 	.word	0x40020400
 8002938:	40020800 	.word	0x40020800
 800293c:	40020c00 	.word	0x40020c00
 8002940:	40021000 	.word	0x40021000
 8002944:	40013c00 	.word	0x40013c00

08002948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	807b      	strh	r3, [r7, #2]
 8002954:	4613      	mov	r3, r2
 8002956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002958:	787b      	ldrb	r3, [r7, #1]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800295e:	887a      	ldrh	r2, [r7, #2]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002964:	e003      	b.n	800296e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002966:	887b      	ldrh	r3, [r7, #2]
 8002968:	041a      	lsls	r2, r3, #16
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	619a      	str	r2, [r3, #24]
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e264      	b.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d075      	beq.n	8002a86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800299a:	4ba3      	ldr	r3, [pc, #652]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 030c 	and.w	r3, r3, #12
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d00c      	beq.n	80029c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029a6:	4ba0      	ldr	r3, [pc, #640]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d112      	bne.n	80029d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029b2:	4b9d      	ldr	r3, [pc, #628]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029be:	d10b      	bne.n	80029d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	4b99      	ldr	r3, [pc, #612]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d05b      	beq.n	8002a84 <HAL_RCC_OscConfig+0x108>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d157      	bne.n	8002a84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e23f      	b.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e0:	d106      	bne.n	80029f0 <HAL_RCC_OscConfig+0x74>
 80029e2:	4b91      	ldr	r3, [pc, #580]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a90      	ldr	r2, [pc, #576]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e01d      	b.n	8002a2c <HAL_RCC_OscConfig+0xb0>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x98>
 80029fa:	4b8b      	ldr	r3, [pc, #556]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a8a      	ldr	r2, [pc, #552]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b88      	ldr	r3, [pc, #544]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a87      	ldr	r2, [pc, #540]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e00b      	b.n	8002a2c <HAL_RCC_OscConfig+0xb0>
 8002a14:	4b84      	ldr	r3, [pc, #528]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a83      	ldr	r2, [pc, #524]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b81      	ldr	r3, [pc, #516]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a80      	ldr	r2, [pc, #512]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d013      	beq.n	8002a5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7ff f97e 	bl	8001d34 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7ff f97a 	bl	8001d34 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	; 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e204      	b.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4e:	4b76      	ldr	r3, [pc, #472]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0xc0>
 8002a5a:	e014      	b.n	8002a86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7ff f96a 	bl	8001d34 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a64:	f7ff f966 	bl	8001d34 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	; 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e1f0      	b.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a76:	4b6c      	ldr	r3, [pc, #432]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0xe8>
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d063      	beq.n	8002b5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a92:	4b65      	ldr	r3, [pc, #404]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00b      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a9e:	4b62      	ldr	r3, [pc, #392]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d11c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aaa:	4b5f      	ldr	r3, [pc, #380]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d116      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab6:	4b5c      	ldr	r3, [pc, #368]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <HAL_RCC_OscConfig+0x152>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d001      	beq.n	8002ace <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e1c4      	b.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ace:	4b56      	ldr	r3, [pc, #344]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4952      	ldr	r1, [pc, #328]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae2:	e03a      	b.n	8002b5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d020      	beq.n	8002b2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aec:	4b4f      	ldr	r3, [pc, #316]	; (8002c2c <HAL_RCC_OscConfig+0x2b0>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af2:	f7ff f91f 	bl	8001d34 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002afa:	f7ff f91b 	bl	8001d34 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e1a5      	b.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0c:	4b46      	ldr	r3, [pc, #280]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b18:	4b43      	ldr	r3, [pc, #268]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4940      	ldr	r1, [pc, #256]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	600b      	str	r3, [r1, #0]
 8002b2c:	e015      	b.n	8002b5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b2e:	4b3f      	ldr	r3, [pc, #252]	; (8002c2c <HAL_RCC_OscConfig+0x2b0>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7ff f8fe 	bl	8001d34 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b3c:	f7ff f8fa 	bl	8001d34 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e184      	b.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4e:	4b36      	ldr	r3, [pc, #216]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d030      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d016      	beq.n	8002b9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b6e:	4b30      	ldr	r3, [pc, #192]	; (8002c30 <HAL_RCC_OscConfig+0x2b4>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b74:	f7ff f8de 	bl	8001d34 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b7c:	f7ff f8da 	bl	8001d34 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e164      	b.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8e:	4b26      	ldr	r3, [pc, #152]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x200>
 8002b9a:	e015      	b.n	8002bc8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b9c:	4b24      	ldr	r3, [pc, #144]	; (8002c30 <HAL_RCC_OscConfig+0x2b4>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba2:	f7ff f8c7 	bl	8001d34 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002baa:	f7ff f8c3 	bl	8001d34 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e14d      	b.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bbc:	4b1a      	ldr	r3, [pc, #104]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f0      	bne.n	8002baa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80a0 	beq.w	8002d16 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bda:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10f      	bne.n	8002c06 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf6:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c02:	2301      	movs	r3, #1
 8002c04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c06:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_RCC_OscConfig+0x2b8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d121      	bne.n	8002c56 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <HAL_RCC_OscConfig+0x2b8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a07      	ldr	r2, [pc, #28]	; (8002c34 <HAL_RCC_OscConfig+0x2b8>)
 8002c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c1e:	f7ff f889 	bl	8001d34 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c24:	e011      	b.n	8002c4a <HAL_RCC_OscConfig+0x2ce>
 8002c26:	bf00      	nop
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	42470000 	.word	0x42470000
 8002c30:	42470e80 	.word	0x42470e80
 8002c34:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c38:	f7ff f87c 	bl	8001d34 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e106      	b.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4a:	4b85      	ldr	r3, [pc, #532]	; (8002e60 <HAL_RCC_OscConfig+0x4e4>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d106      	bne.n	8002c6c <HAL_RCC_OscConfig+0x2f0>
 8002c5e:	4b81      	ldr	r3, [pc, #516]	; (8002e64 <HAL_RCC_OscConfig+0x4e8>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	4a80      	ldr	r2, [pc, #512]	; (8002e64 <HAL_RCC_OscConfig+0x4e8>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6a:	e01c      	b.n	8002ca6 <HAL_RCC_OscConfig+0x32a>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b05      	cmp	r3, #5
 8002c72:	d10c      	bne.n	8002c8e <HAL_RCC_OscConfig+0x312>
 8002c74:	4b7b      	ldr	r3, [pc, #492]	; (8002e64 <HAL_RCC_OscConfig+0x4e8>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c78:	4a7a      	ldr	r2, [pc, #488]	; (8002e64 <HAL_RCC_OscConfig+0x4e8>)
 8002c7a:	f043 0304 	orr.w	r3, r3, #4
 8002c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c80:	4b78      	ldr	r3, [pc, #480]	; (8002e64 <HAL_RCC_OscConfig+0x4e8>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c84:	4a77      	ldr	r2, [pc, #476]	; (8002e64 <HAL_RCC_OscConfig+0x4e8>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8c:	e00b      	b.n	8002ca6 <HAL_RCC_OscConfig+0x32a>
 8002c8e:	4b75      	ldr	r3, [pc, #468]	; (8002e64 <HAL_RCC_OscConfig+0x4e8>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c92:	4a74      	ldr	r2, [pc, #464]	; (8002e64 <HAL_RCC_OscConfig+0x4e8>)
 8002c94:	f023 0301 	bic.w	r3, r3, #1
 8002c98:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9a:	4b72      	ldr	r3, [pc, #456]	; (8002e64 <HAL_RCC_OscConfig+0x4e8>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	4a71      	ldr	r2, [pc, #452]	; (8002e64 <HAL_RCC_OscConfig+0x4e8>)
 8002ca0:	f023 0304 	bic.w	r3, r3, #4
 8002ca4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d015      	beq.n	8002cda <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cae:	f7ff f841 	bl	8001d34 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb6:	f7ff f83d 	bl	8001d34 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e0c5      	b.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ccc:	4b65      	ldr	r3, [pc, #404]	; (8002e64 <HAL_RCC_OscConfig+0x4e8>)
 8002cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0ee      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x33a>
 8002cd8:	e014      	b.n	8002d04 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cda:	f7ff f82b 	bl	8001d34 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce2:	f7ff f827 	bl	8001d34 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e0af      	b.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf8:	4b5a      	ldr	r3, [pc, #360]	; (8002e64 <HAL_RCC_OscConfig+0x4e8>)
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1ee      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d105      	bne.n	8002d16 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0a:	4b56      	ldr	r3, [pc, #344]	; (8002e64 <HAL_RCC_OscConfig+0x4e8>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	4a55      	ldr	r2, [pc, #340]	; (8002e64 <HAL_RCC_OscConfig+0x4e8>)
 8002d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 809b 	beq.w	8002e56 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d20:	4b50      	ldr	r3, [pc, #320]	; (8002e64 <HAL_RCC_OscConfig+0x4e8>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 030c 	and.w	r3, r3, #12
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d05c      	beq.n	8002de6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d141      	bne.n	8002db8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d34:	4b4c      	ldr	r3, [pc, #304]	; (8002e68 <HAL_RCC_OscConfig+0x4ec>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3a:	f7fe fffb 	bl	8001d34 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d42:	f7fe fff7 	bl	8001d34 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e081      	b.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d54:	4b43      	ldr	r3, [pc, #268]	; (8002e64 <HAL_RCC_OscConfig+0x4e8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1f0      	bne.n	8002d42 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69da      	ldr	r2, [r3, #28]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	019b      	lsls	r3, r3, #6
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d76:	085b      	lsrs	r3, r3, #1
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	041b      	lsls	r3, r3, #16
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	061b      	lsls	r3, r3, #24
 8002d84:	4937      	ldr	r1, [pc, #220]	; (8002e64 <HAL_RCC_OscConfig+0x4e8>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d8a:	4b37      	ldr	r3, [pc, #220]	; (8002e68 <HAL_RCC_OscConfig+0x4ec>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7fe ffd0 	bl	8001d34 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d98:	f7fe ffcc 	bl	8001d34 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e056      	b.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002daa:	4b2e      	ldr	r3, [pc, #184]	; (8002e64 <HAL_RCC_OscConfig+0x4e8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x41c>
 8002db6:	e04e      	b.n	8002e56 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db8:	4b2b      	ldr	r3, [pc, #172]	; (8002e68 <HAL_RCC_OscConfig+0x4ec>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbe:	f7fe ffb9 	bl	8001d34 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc6:	f7fe ffb5 	bl	8001d34 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e03f      	b.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd8:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <HAL_RCC_OscConfig+0x4e8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f0      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x44a>
 8002de4:	e037      	b.n	8002e56 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e032      	b.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002df2:	4b1c      	ldr	r3, [pc, #112]	; (8002e64 <HAL_RCC_OscConfig+0x4e8>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d028      	beq.n	8002e52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d121      	bne.n	8002e52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d11a      	bne.n	8002e52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e22:	4013      	ands	r3, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e28:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d111      	bne.n	8002e52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	085b      	lsrs	r3, r3, #1
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d107      	bne.n	8002e52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d001      	beq.n	8002e56 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40007000 	.word	0x40007000
 8002e64:	40023800 	.word	0x40023800
 8002e68:	42470060 	.word	0x42470060

08002e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0cc      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e80:	4b68      	ldr	r3, [pc, #416]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d90c      	bls.n	8002ea8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8e:	4b65      	ldr	r3, [pc, #404]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b63      	ldr	r3, [pc, #396]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0b8      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d020      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ec0:	4b59      	ldr	r3, [pc, #356]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	4a58      	ldr	r2, [pc, #352]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed8:	4b53      	ldr	r3, [pc, #332]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	4a52      	ldr	r2, [pc, #328]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ee2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee4:	4b50      	ldr	r3, [pc, #320]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	494d      	ldr	r1, [pc, #308]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d044      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	4b47      	ldr	r3, [pc, #284]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d119      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e07f      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d003      	beq.n	8002f2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d107      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2a:	4b3f      	ldr	r3, [pc, #252]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d109      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e06f      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3a:	4b3b      	ldr	r3, [pc, #236]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e067      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f4a:	4b37      	ldr	r3, [pc, #220]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f023 0203 	bic.w	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	4934      	ldr	r1, [pc, #208]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f5c:	f7fe feea 	bl	8001d34 <HAL_GetTick>
 8002f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f64:	f7fe fee6 	bl	8001d34 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e04f      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7a:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 020c 	and.w	r2, r3, #12
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d1eb      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f8c:	4b25      	ldr	r3, [pc, #148]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d20c      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9a:	4b22      	ldr	r3, [pc, #136]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b20      	ldr	r3, [pc, #128]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e032      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc0:	4b19      	ldr	r3, [pc, #100]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4916      	ldr	r1, [pc, #88]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d009      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	490e      	ldr	r1, [pc, #56]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ff2:	f000 f821 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	490a      	ldr	r1, [pc, #40]	; (800302c <HAL_RCC_ClockConfig+0x1c0>)
 8003004:	5ccb      	ldrb	r3, [r1, r3]
 8003006:	fa22 f303 	lsr.w	r3, r2, r3
 800300a:	4a09      	ldr	r2, [pc, #36]	; (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_RCC_ClockConfig+0x1c8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe fe4a 	bl	8001cac <HAL_InitTick>

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40023c00 	.word	0x40023c00
 8003028:	40023800 	.word	0x40023800
 800302c:	08005150 	.word	0x08005150
 8003030:	20000000 	.word	0x20000000
 8003034:	20000004 	.word	0x20000004

08003038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003038:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	2300      	movs	r3, #0
 800304a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003050:	4b67      	ldr	r3, [pc, #412]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 030c 	and.w	r3, r3, #12
 8003058:	2b08      	cmp	r3, #8
 800305a:	d00d      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0x40>
 800305c:	2b08      	cmp	r3, #8
 800305e:	f200 80bd 	bhi.w	80031dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <HAL_RCC_GetSysClockFreq+0x34>
 8003066:	2b04      	cmp	r3, #4
 8003068:	d003      	beq.n	8003072 <HAL_RCC_GetSysClockFreq+0x3a>
 800306a:	e0b7      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800306c:	4b61      	ldr	r3, [pc, #388]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800306e:	60bb      	str	r3, [r7, #8]
       break;
 8003070:	e0b7      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003072:	4b61      	ldr	r3, [pc, #388]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003074:	60bb      	str	r3, [r7, #8]
      break;
 8003076:	e0b4      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003078:	4b5d      	ldr	r3, [pc, #372]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003080:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003082:	4b5b      	ldr	r3, [pc, #364]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d04d      	beq.n	800312a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308e:	4b58      	ldr	r3, [pc, #352]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	099b      	lsrs	r3, r3, #6
 8003094:	461a      	mov	r2, r3
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800309e:	f04f 0100 	mov.w	r1, #0
 80030a2:	ea02 0800 	and.w	r8, r2, r0
 80030a6:	ea03 0901 	and.w	r9, r3, r1
 80030aa:	4640      	mov	r0, r8
 80030ac:	4649      	mov	r1, r9
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	014b      	lsls	r3, r1, #5
 80030b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030bc:	0142      	lsls	r2, r0, #5
 80030be:	4610      	mov	r0, r2
 80030c0:	4619      	mov	r1, r3
 80030c2:	ebb0 0008 	subs.w	r0, r0, r8
 80030c6:	eb61 0109 	sbc.w	r1, r1, r9
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	018b      	lsls	r3, r1, #6
 80030d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030d8:	0182      	lsls	r2, r0, #6
 80030da:	1a12      	subs	r2, r2, r0
 80030dc:	eb63 0301 	sbc.w	r3, r3, r1
 80030e0:	f04f 0000 	mov.w	r0, #0
 80030e4:	f04f 0100 	mov.w	r1, #0
 80030e8:	00d9      	lsls	r1, r3, #3
 80030ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030ee:	00d0      	lsls	r0, r2, #3
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	eb12 0208 	adds.w	r2, r2, r8
 80030f8:	eb43 0309 	adc.w	r3, r3, r9
 80030fc:	f04f 0000 	mov.w	r0, #0
 8003100:	f04f 0100 	mov.w	r1, #0
 8003104:	0259      	lsls	r1, r3, #9
 8003106:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800310a:	0250      	lsls	r0, r2, #9
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4610      	mov	r0, r2
 8003112:	4619      	mov	r1, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	461a      	mov	r2, r3
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	f7fd fd26 	bl	8000b6c <__aeabi_uldivmod>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4613      	mov	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	e04a      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800312a:	4b31      	ldr	r3, [pc, #196]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	099b      	lsrs	r3, r3, #6
 8003130:	461a      	mov	r2, r3
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	f240 10ff 	movw	r0, #511	; 0x1ff
 800313a:	f04f 0100 	mov.w	r1, #0
 800313e:	ea02 0400 	and.w	r4, r2, r0
 8003142:	ea03 0501 	and.w	r5, r3, r1
 8003146:	4620      	mov	r0, r4
 8003148:	4629      	mov	r1, r5
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	014b      	lsls	r3, r1, #5
 8003154:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003158:	0142      	lsls	r2, r0, #5
 800315a:	4610      	mov	r0, r2
 800315c:	4619      	mov	r1, r3
 800315e:	1b00      	subs	r0, r0, r4
 8003160:	eb61 0105 	sbc.w	r1, r1, r5
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	018b      	lsls	r3, r1, #6
 800316e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003172:	0182      	lsls	r2, r0, #6
 8003174:	1a12      	subs	r2, r2, r0
 8003176:	eb63 0301 	sbc.w	r3, r3, r1
 800317a:	f04f 0000 	mov.w	r0, #0
 800317e:	f04f 0100 	mov.w	r1, #0
 8003182:	00d9      	lsls	r1, r3, #3
 8003184:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003188:	00d0      	lsls	r0, r2, #3
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	1912      	adds	r2, r2, r4
 8003190:	eb45 0303 	adc.w	r3, r5, r3
 8003194:	f04f 0000 	mov.w	r0, #0
 8003198:	f04f 0100 	mov.w	r1, #0
 800319c:	0299      	lsls	r1, r3, #10
 800319e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80031a2:	0290      	lsls	r0, r2, #10
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4610      	mov	r0, r2
 80031aa:	4619      	mov	r1, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	461a      	mov	r2, r3
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	f7fd fcda 	bl	8000b6c <__aeabi_uldivmod>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4613      	mov	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	0c1b      	lsrs	r3, r3, #16
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	3301      	adds	r3, #1
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d8:	60bb      	str	r3, [r7, #8]
      break;
 80031da:	e002      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031de:	60bb      	str	r3, [r7, #8]
      break;
 80031e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e2:	68bb      	ldr	r3, [r7, #8]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031ee:	bf00      	nop
 80031f0:	40023800 	.word	0x40023800
 80031f4:	00f42400 	.word	0x00f42400
 80031f8:	007a1200 	.word	0x007a1200

080031fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003200:	4b03      	ldr	r3, [pc, #12]	; (8003210 <HAL_RCC_GetHCLKFreq+0x14>)
 8003202:	681b      	ldr	r3, [r3, #0]
}
 8003204:	4618      	mov	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	20000000 	.word	0x20000000

08003214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003218:	f7ff fff0 	bl	80031fc <HAL_RCC_GetHCLKFreq>
 800321c:	4602      	mov	r2, r0
 800321e:	4b05      	ldr	r3, [pc, #20]	; (8003234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	0a9b      	lsrs	r3, r3, #10
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	4903      	ldr	r1, [pc, #12]	; (8003238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800322a:	5ccb      	ldrb	r3, [r1, r3]
 800322c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003230:	4618      	mov	r0, r3
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40023800 	.word	0x40023800
 8003238:	08005160 	.word	0x08005160

0800323c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003240:	f7ff ffdc 	bl	80031fc <HAL_RCC_GetHCLKFreq>
 8003244:	4602      	mov	r2, r0
 8003246:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	0b5b      	lsrs	r3, r3, #13
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	4903      	ldr	r1, [pc, #12]	; (8003260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003252:	5ccb      	ldrb	r3, [r1, r3]
 8003254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003258:	4618      	mov	r0, r3
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40023800 	.word	0x40023800
 8003260:	08005160 	.word	0x08005160

08003264 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e041      	b.n	80032fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fe faf6 	bl	800187c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3304      	adds	r3, #4
 80032a0:	4619      	mov	r1, r3
 80032a2:	4610      	mov	r0, r2
 80032a4:	f000 fad4 	bl	8003850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d109      	bne.n	8003328 <HAL_TIM_PWM_Start+0x24>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b01      	cmp	r3, #1
 800331e:	bf14      	ite	ne
 8003320:	2301      	movne	r3, #1
 8003322:	2300      	moveq	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	e022      	b.n	800336e <HAL_TIM_PWM_Start+0x6a>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2b04      	cmp	r3, #4
 800332c:	d109      	bne.n	8003342 <HAL_TIM_PWM_Start+0x3e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b01      	cmp	r3, #1
 8003338:	bf14      	ite	ne
 800333a:	2301      	movne	r3, #1
 800333c:	2300      	moveq	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	e015      	b.n	800336e <HAL_TIM_PWM_Start+0x6a>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b08      	cmp	r3, #8
 8003346:	d109      	bne.n	800335c <HAL_TIM_PWM_Start+0x58>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	bf14      	ite	ne
 8003354:	2301      	movne	r3, #1
 8003356:	2300      	moveq	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	e008      	b.n	800336e <HAL_TIM_PWM_Start+0x6a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b01      	cmp	r3, #1
 8003366:	bf14      	ite	ne
 8003368:	2301      	movne	r3, #1
 800336a:	2300      	moveq	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e068      	b.n	8003448 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d104      	bne.n	8003386 <HAL_TIM_PWM_Start+0x82>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003384:	e013      	b.n	80033ae <HAL_TIM_PWM_Start+0xaa>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b04      	cmp	r3, #4
 800338a:	d104      	bne.n	8003396 <HAL_TIM_PWM_Start+0x92>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003394:	e00b      	b.n	80033ae <HAL_TIM_PWM_Start+0xaa>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b08      	cmp	r3, #8
 800339a:	d104      	bne.n	80033a6 <HAL_TIM_PWM_Start+0xa2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033a4:	e003      	b.n	80033ae <HAL_TIM_PWM_Start+0xaa>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2201      	movs	r2, #1
 80033b4:	6839      	ldr	r1, [r7, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fc56 	bl	8003c68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a23      	ldr	r2, [pc, #140]	; (8003450 <HAL_TIM_PWM_Start+0x14c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d107      	bne.n	80033d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a1d      	ldr	r2, [pc, #116]	; (8003450 <HAL_TIM_PWM_Start+0x14c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d018      	beq.n	8003412 <HAL_TIM_PWM_Start+0x10e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e8:	d013      	beq.n	8003412 <HAL_TIM_PWM_Start+0x10e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a19      	ldr	r2, [pc, #100]	; (8003454 <HAL_TIM_PWM_Start+0x150>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00e      	beq.n	8003412 <HAL_TIM_PWM_Start+0x10e>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a17      	ldr	r2, [pc, #92]	; (8003458 <HAL_TIM_PWM_Start+0x154>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d009      	beq.n	8003412 <HAL_TIM_PWM_Start+0x10e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a16      	ldr	r2, [pc, #88]	; (800345c <HAL_TIM_PWM_Start+0x158>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d004      	beq.n	8003412 <HAL_TIM_PWM_Start+0x10e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a14      	ldr	r2, [pc, #80]	; (8003460 <HAL_TIM_PWM_Start+0x15c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d111      	bne.n	8003436 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b06      	cmp	r3, #6
 8003422:	d010      	beq.n	8003446 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003434:	e007      	b.n	8003446 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 0201 	orr.w	r2, r2, #1
 8003444:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40010000 	.word	0x40010000
 8003454:	40000400 	.word	0x40000400
 8003458:	40000800 	.word	0x40000800
 800345c:	40000c00 	.word	0x40000c00
 8003460:	40014000 	.word	0x40014000

08003464 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e097      	b.n	80035a8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d106      	bne.n	8003492 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7fe fa15 	bl	80018bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2202      	movs	r2, #2
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034a8:	f023 0307 	bic.w	r3, r3, #7
 80034ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3304      	adds	r3, #4
 80034b6:	4619      	mov	r1, r3
 80034b8:	4610      	mov	r0, r2
 80034ba:	f000 f9c9 	bl	8003850 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e6:	f023 0303 	bic.w	r3, r3, #3
 80034ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	021b      	lsls	r3, r3, #8
 80034f6:	4313      	orrs	r3, r2
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003504:	f023 030c 	bic.w	r3, r3, #12
 8003508:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003510:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003514:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	021b      	lsls	r3, r3, #8
 8003520:	4313      	orrs	r3, r2
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	011a      	lsls	r2, r3, #4
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	031b      	lsls	r3, r3, #12
 8003534:	4313      	orrs	r3, r2
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003542:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800354a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	4313      	orrs	r3, r2
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80035d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d110      	bne.n	8003602 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d102      	bne.n	80035ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80035e6:	7b7b      	ldrb	r3, [r7, #13]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d001      	beq.n	80035f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e069      	b.n	80036c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003600:	e031      	b.n	8003666 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b04      	cmp	r3, #4
 8003606:	d110      	bne.n	800362a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003608:	7bbb      	ldrb	r3, [r7, #14]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d102      	bne.n	8003614 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800360e:	7b3b      	ldrb	r3, [r7, #12]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d001      	beq.n	8003618 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e055      	b.n	80036c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003628:	e01d      	b.n	8003666 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d108      	bne.n	8003642 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003630:	7bbb      	ldrb	r3, [r7, #14]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d105      	bne.n	8003642 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003636:	7b7b      	ldrb	r3, [r7, #13]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d102      	bne.n	8003642 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800363c:	7b3b      	ldrb	r3, [r7, #12]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d001      	beq.n	8003646 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e03e      	b.n	80036c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2202      	movs	r2, #2
 8003652:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2202      	movs	r2, #2
 800365a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2202      	movs	r2, #2
 8003662:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_TIM_Encoder_Start+0xc4>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2b04      	cmp	r3, #4
 8003670:	d008      	beq.n	8003684 <HAL_TIM_Encoder_Start+0xd4>
 8003672:	e00f      	b.n	8003694 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2201      	movs	r2, #1
 800367a:	2100      	movs	r1, #0
 800367c:	4618      	mov	r0, r3
 800367e:	f000 faf3 	bl	8003c68 <TIM_CCxChannelCmd>
      break;
 8003682:	e016      	b.n	80036b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2201      	movs	r2, #1
 800368a:	2104      	movs	r1, #4
 800368c:	4618      	mov	r0, r3
 800368e:	f000 faeb 	bl	8003c68 <TIM_CCxChannelCmd>
      break;
 8003692:	e00e      	b.n	80036b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2201      	movs	r2, #1
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fae3 	bl	8003c68 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2201      	movs	r2, #1
 80036a8:	2104      	movs	r1, #4
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 fadc 	bl	8003c68 <TIM_CCxChannelCmd>
      break;
 80036b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0201 	orr.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e0ae      	b.n	8003848 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b0c      	cmp	r3, #12
 80036f6:	f200 809f 	bhi.w	8003838 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036fa:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003700:	08003735 	.word	0x08003735
 8003704:	08003839 	.word	0x08003839
 8003708:	08003839 	.word	0x08003839
 800370c:	08003839 	.word	0x08003839
 8003710:	08003775 	.word	0x08003775
 8003714:	08003839 	.word	0x08003839
 8003718:	08003839 	.word	0x08003839
 800371c:	08003839 	.word	0x08003839
 8003720:	080037b7 	.word	0x080037b7
 8003724:	08003839 	.word	0x08003839
 8003728:	08003839 	.word	0x08003839
 800372c:	08003839 	.word	0x08003839
 8003730:	080037f7 	.word	0x080037f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	4618      	mov	r0, r3
 800373c:	f000 f908 	bl	8003950 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0208 	orr.w	r2, r2, #8
 800374e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699a      	ldr	r2, [r3, #24]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0204 	bic.w	r2, r2, #4
 800375e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6999      	ldr	r1, [r3, #24]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	691a      	ldr	r2, [r3, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	619a      	str	r2, [r3, #24]
      break;
 8003772:	e064      	b.n	800383e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	4618      	mov	r0, r3
 800377c:	f000 f94e 	bl	8003a1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800378e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699a      	ldr	r2, [r3, #24]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800379e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6999      	ldr	r1, [r3, #24]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	021a      	lsls	r2, r3, #8
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	619a      	str	r2, [r3, #24]
      break;
 80037b4:	e043      	b.n	800383e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68b9      	ldr	r1, [r7, #8]
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 f999 	bl	8003af4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f042 0208 	orr.w	r2, r2, #8
 80037d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69da      	ldr	r2, [r3, #28]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0204 	bic.w	r2, r2, #4
 80037e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69d9      	ldr	r1, [r3, #28]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	61da      	str	r2, [r3, #28]
      break;
 80037f4:	e023      	b.n	800383e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 f9e3 	bl	8003bc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69da      	ldr	r2, [r3, #28]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69da      	ldr	r2, [r3, #28]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69d9      	ldr	r1, [r3, #28]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	021a      	lsls	r2, r3, #8
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	61da      	str	r2, [r3, #28]
      break;
 8003836:	e002      	b.n	800383e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	75fb      	strb	r3, [r7, #23]
      break;
 800383c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003846:	7dfb      	ldrb	r3, [r7, #23]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a34      	ldr	r2, [pc, #208]	; (8003934 <TIM_Base_SetConfig+0xe4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00f      	beq.n	8003888 <TIM_Base_SetConfig+0x38>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386e:	d00b      	beq.n	8003888 <TIM_Base_SetConfig+0x38>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a31      	ldr	r2, [pc, #196]	; (8003938 <TIM_Base_SetConfig+0xe8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d007      	beq.n	8003888 <TIM_Base_SetConfig+0x38>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a30      	ldr	r2, [pc, #192]	; (800393c <TIM_Base_SetConfig+0xec>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d003      	beq.n	8003888 <TIM_Base_SetConfig+0x38>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a2f      	ldr	r2, [pc, #188]	; (8003940 <TIM_Base_SetConfig+0xf0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d108      	bne.n	800389a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a25      	ldr	r2, [pc, #148]	; (8003934 <TIM_Base_SetConfig+0xe4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d01b      	beq.n	80038da <TIM_Base_SetConfig+0x8a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a8:	d017      	beq.n	80038da <TIM_Base_SetConfig+0x8a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a22      	ldr	r2, [pc, #136]	; (8003938 <TIM_Base_SetConfig+0xe8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d013      	beq.n	80038da <TIM_Base_SetConfig+0x8a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a21      	ldr	r2, [pc, #132]	; (800393c <TIM_Base_SetConfig+0xec>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00f      	beq.n	80038da <TIM_Base_SetConfig+0x8a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a20      	ldr	r2, [pc, #128]	; (8003940 <TIM_Base_SetConfig+0xf0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00b      	beq.n	80038da <TIM_Base_SetConfig+0x8a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a1f      	ldr	r2, [pc, #124]	; (8003944 <TIM_Base_SetConfig+0xf4>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d007      	beq.n	80038da <TIM_Base_SetConfig+0x8a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a1e      	ldr	r2, [pc, #120]	; (8003948 <TIM_Base_SetConfig+0xf8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d003      	beq.n	80038da <TIM_Base_SetConfig+0x8a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a1d      	ldr	r2, [pc, #116]	; (800394c <TIM_Base_SetConfig+0xfc>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d108      	bne.n	80038ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a08      	ldr	r2, [pc, #32]	; (8003934 <TIM_Base_SetConfig+0xe4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d103      	bne.n	8003920 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	615a      	str	r2, [r3, #20]
}
 8003926:	bf00      	nop
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40010000 	.word	0x40010000
 8003938:	40000400 	.word	0x40000400
 800393c:	40000800 	.word	0x40000800
 8003940:	40000c00 	.word	0x40000c00
 8003944:	40014000 	.word	0x40014000
 8003948:	40014400 	.word	0x40014400
 800394c:	40014800 	.word	0x40014800

08003950 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	f023 0201 	bic.w	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0303 	bic.w	r3, r3, #3
 8003986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f023 0302 	bic.w	r3, r3, #2
 8003998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a1c      	ldr	r2, [pc, #112]	; (8003a18 <TIM_OC1_SetConfig+0xc8>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d10c      	bne.n	80039c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f023 0308 	bic.w	r3, r3, #8
 80039b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f023 0304 	bic.w	r3, r3, #4
 80039c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a13      	ldr	r2, [pc, #76]	; (8003a18 <TIM_OC1_SetConfig+0xc8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d111      	bne.n	80039f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	621a      	str	r2, [r3, #32]
}
 8003a0c:	bf00      	nop
 8003a0e:	371c      	adds	r7, #28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	40010000 	.word	0x40010000

08003a1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f023 0210 	bic.w	r2, r3, #16
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	021b      	lsls	r3, r3, #8
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f023 0320 	bic.w	r3, r3, #32
 8003a66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a1e      	ldr	r2, [pc, #120]	; (8003af0 <TIM_OC2_SetConfig+0xd4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d10d      	bne.n	8003a98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a15      	ldr	r2, [pc, #84]	; (8003af0 <TIM_OC2_SetConfig+0xd4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d113      	bne.n	8003ac8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003aa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003aae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	621a      	str	r2, [r3, #32]
}
 8003ae2:	bf00      	nop
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40010000 	.word	0x40010000

08003af4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0303 	bic.w	r3, r3, #3
 8003b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a1d      	ldr	r2, [pc, #116]	; (8003bc4 <TIM_OC3_SetConfig+0xd0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d10d      	bne.n	8003b6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a14      	ldr	r2, [pc, #80]	; (8003bc4 <TIM_OC3_SetConfig+0xd0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d113      	bne.n	8003b9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	621a      	str	r2, [r3, #32]
}
 8003bb8:	bf00      	nop
 8003bba:	371c      	adds	r7, #28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	40010000 	.word	0x40010000

08003bc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	021b      	lsls	r3, r3, #8
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	031b      	lsls	r3, r3, #12
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a10      	ldr	r2, [pc, #64]	; (8003c64 <TIM_OC4_SetConfig+0x9c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d109      	bne.n	8003c3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	019b      	lsls	r3, r3, #6
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	621a      	str	r2, [r3, #32]
}
 8003c56:	bf00      	nop
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40010000 	.word	0x40010000

08003c68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a1a      	ldr	r2, [r3, #32]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	401a      	ands	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a1a      	ldr	r2, [r3, #32]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f003 031f 	and.w	r3, r3, #31
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	621a      	str	r2, [r3, #32]
}
 8003ca6:	bf00      	nop
 8003ca8:	371c      	adds	r7, #28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e050      	b.n	8003d6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a1c      	ldr	r2, [pc, #112]	; (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d018      	beq.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d18:	d013      	beq.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a18      	ldr	r2, [pc, #96]	; (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00e      	beq.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a16      	ldr	r2, [pc, #88]	; (8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d009      	beq.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a15      	ldr	r2, [pc, #84]	; (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d004      	beq.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a13      	ldr	r2, [pc, #76]	; (8003d8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d10c      	bne.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40010000 	.word	0x40010000
 8003d80:	40000400 	.word	0x40000400
 8003d84:	40000800 	.word	0x40000800
 8003d88:	40000c00 	.word	0x40000c00
 8003d8c:	40014000 	.word	0x40014000

08003d90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e03f      	b.n	8003e22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d106      	bne.n	8003dbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fd fe80 	bl	8001abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2224      	movs	r2, #36	; 0x24
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fb85 	bl	80044e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003de8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695a      	ldr	r2, [r3, #20]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003df8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08c      	sub	sp, #48	; 0x30
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	4613      	mov	r3, r2
 8003e38:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d165      	bne.n	8003f12 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <HAL_UART_Transmit_DMA+0x26>
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e05e      	b.n	8003f14 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_UART_Transmit_DMA+0x38>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e057      	b.n	8003f14 <HAL_UART_Transmit_DMA+0xe8>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	88fa      	ldrh	r2, [r7, #6]
 8003e76:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	88fa      	ldrh	r2, [r7, #6]
 8003e7c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2221      	movs	r2, #33	; 0x21
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e90:	4a22      	ldr	r2, [pc, #136]	; (8003f1c <HAL_UART_Transmit_DMA+0xf0>)
 8003e92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e98:	4a21      	ldr	r2, [pc, #132]	; (8003f20 <HAL_UART_Transmit_DMA+0xf4>)
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea0:	4a20      	ldr	r2, [pc, #128]	; (8003f24 <HAL_UART_Transmit_DMA+0xf8>)
 8003ea2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003eac:	f107 0308 	add.w	r3, r7, #8
 8003eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb8:	6819      	ldr	r1, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	f7fe f8fa 	bl	80020bc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ed0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3314      	adds	r3, #20
 8003ee0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	617b      	str	r3, [r7, #20]
   return(result);
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3314      	adds	r3, #20
 8003ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003efa:	627a      	str	r2, [r7, #36]	; 0x24
 8003efc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efe:	6a39      	ldr	r1, [r7, #32]
 8003f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e5      	bne.n	8003eda <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e000      	b.n	8003f14 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003f12:	2302      	movs	r3, #2
  }
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3730      	adds	r7, #48	; 0x30
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	08003ff1 	.word	0x08003ff1
 8003f20:	0800408b 	.word	0x0800408b
 8003f24:	08004203 	.word	0x08004203

08003f28 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	4613      	mov	r3, r2
 8003f34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b20      	cmp	r3, #32
 8003f40:	d11d      	bne.n	8003f7e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <HAL_UART_Receive_DMA+0x26>
 8003f48:	88fb      	ldrh	r3, [r7, #6]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e016      	b.n	8003f80 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_UART_Receive_DMA+0x38>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e00f      	b.n	8003f80 <HAL_UART_Receive_DMA+0x58>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003f6e:	88fb      	ldrh	r3, [r7, #6]
 8003f70:	461a      	mov	r2, r3
 8003f72:	68b9      	ldr	r1, [r7, #8]
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 f98f 	bl	8004298 <UART_Start_Receive_DMA>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	e000      	b.n	8003f80 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003f7e:	2302      	movs	r3, #2
  }
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b090      	sub	sp, #64	; 0x40
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d137      	bne.n	800407c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800400c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400e:	2200      	movs	r2, #0
 8004010:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3314      	adds	r3, #20
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	623b      	str	r3, [r7, #32]
   return(result);
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004028:	63bb      	str	r3, [r7, #56]	; 0x38
 800402a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3314      	adds	r3, #20
 8004030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004032:	633a      	str	r2, [r7, #48]	; 0x30
 8004034:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e5      	bne.n	8004012 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	330c      	adds	r3, #12
 800404c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	60fb      	str	r3, [r7, #12]
   return(result);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800405c:	637b      	str	r3, [r7, #52]	; 0x34
 800405e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	330c      	adds	r3, #12
 8004064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004066:	61fa      	str	r2, [r7, #28]
 8004068:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	69b9      	ldr	r1, [r7, #24]
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	617b      	str	r3, [r7, #20]
   return(result);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e5      	bne.n	8004046 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800407a:	e002      	b.n	8004082 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800407c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800407e:	f7ff ff83 	bl	8003f88 <HAL_UART_TxCpltCallback>
}
 8004082:	bf00      	nop
 8004084:	3740      	adds	r7, #64	; 0x40
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b084      	sub	sp, #16
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f7ff ff7f 	bl	8003f9c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b09c      	sub	sp, #112	; 0x70
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d172      	bne.n	80041a8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80040c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c4:	2200      	movs	r2, #0
 80040c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	330c      	adds	r3, #12
 80040ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040de:	66bb      	str	r3, [r7, #104]	; 0x68
 80040e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80040ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e5      	bne.n	80040c8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3314      	adds	r3, #20
 8004102:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800410c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800410e:	f023 0301 	bic.w	r3, r3, #1
 8004112:	667b      	str	r3, [r7, #100]	; 0x64
 8004114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3314      	adds	r3, #20
 800411a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800411c:	647a      	str	r2, [r7, #68]	; 0x44
 800411e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800412a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e5      	bne.n	80040fc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3314      	adds	r3, #20
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	623b      	str	r3, [r7, #32]
   return(result);
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004146:	663b      	str	r3, [r7, #96]	; 0x60
 8004148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3314      	adds	r3, #20
 800414e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004150:	633a      	str	r2, [r7, #48]	; 0x30
 8004152:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e5      	bne.n	8004130 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800416c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	2b01      	cmp	r3, #1
 8004172:	d119      	bne.n	80041a8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	60fb      	str	r3, [r7, #12]
   return(result);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0310 	bic.w	r3, r3, #16
 800418a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800418c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	330c      	adds	r3, #12
 8004192:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004194:	61fa      	str	r2, [r7, #28]
 8004196:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	69b9      	ldr	r1, [r7, #24]
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	617b      	str	r3, [r7, #20]
   return(result);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e5      	bne.n	8004174 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d106      	bne.n	80041be <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041b4:	4619      	mov	r1, r3
 80041b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80041b8:	f7ff ff0e 	bl	8003fd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041bc:	e002      	b.n	80041c4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80041be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80041c0:	f7fc ffc4 	bl	800114c <HAL_UART_RxCpltCallback>
}
 80041c4:	bf00      	nop
 80041c6:	3770      	adds	r7, #112	; 0x70
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d108      	bne.n	80041f4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041e6:	085b      	lsrs	r3, r3, #1
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	4619      	mov	r1, r3
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f7ff fef3 	bl	8003fd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041f2:	e002      	b.n	80041fa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f7ff fedb 	bl	8003fb0 <HAL_UART_RxHalfCpltCallback>
}
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004212:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421e:	2b80      	cmp	r3, #128	; 0x80
 8004220:	bf0c      	ite	eq
 8004222:	2301      	moveq	r3, #1
 8004224:	2300      	movne	r3, #0
 8004226:	b2db      	uxtb	r3, r3
 8004228:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b21      	cmp	r3, #33	; 0x21
 8004234:	d108      	bne.n	8004248 <UART_DMAError+0x46>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2200      	movs	r2, #0
 8004240:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004242:	68b8      	ldr	r0, [r7, #8]
 8004244:	f000 f8c2 	bl	80043cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004252:	2b40      	cmp	r3, #64	; 0x40
 8004254:	bf0c      	ite	eq
 8004256:	2301      	moveq	r3, #1
 8004258:	2300      	movne	r3, #0
 800425a:	b2db      	uxtb	r3, r3
 800425c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b22      	cmp	r3, #34	; 0x22
 8004268:	d108      	bne.n	800427c <UART_DMAError+0x7a>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d005      	beq.n	800427c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2200      	movs	r2, #0
 8004274:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004276:	68b8      	ldr	r0, [r7, #8]
 8004278:	f000 f8d0 	bl	800441c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	f043 0210 	orr.w	r2, r3, #16
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004288:	68b8      	ldr	r0, [r7, #8]
 800428a:	f7ff fe9b 	bl	8003fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800428e:	bf00      	nop
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b098      	sub	sp, #96	; 0x60
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	4613      	mov	r3, r2
 80042a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	88fa      	ldrh	r2, [r7, #6]
 80042b0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2222      	movs	r2, #34	; 0x22
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	4a3e      	ldr	r2, [pc, #248]	; (80043c0 <UART_Start_Receive_DMA+0x128>)
 80042c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	4a3d      	ldr	r2, [pc, #244]	; (80043c4 <UART_Start_Receive_DMA+0x12c>)
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d4:	4a3c      	ldr	r2, [pc, #240]	; (80043c8 <UART_Start_Receive_DMA+0x130>)
 80042d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042dc:	2200      	movs	r2, #0
 80042de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80042e0:	f107 0308 	add.w	r3, r7, #8
 80042e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3304      	adds	r3, #4
 80042f0:	4619      	mov	r1, r3
 80042f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	f7fd fee0 	bl	80020bc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80042fc:	2300      	movs	r3, #0
 80042fe:	613b      	str	r3, [r7, #16]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	330c      	adds	r3, #12
 8004320:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800432a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800432c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004330:	65bb      	str	r3, [r7, #88]	; 0x58
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	330c      	adds	r3, #12
 8004338:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800433a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800433c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004340:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e5      	bne.n	800431a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3314      	adds	r3, #20
 8004354:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	f043 0301 	orr.w	r3, r3, #1
 8004364:	657b      	str	r3, [r7, #84]	; 0x54
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3314      	adds	r3, #20
 800436c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800436e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004370:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004372:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004376:	e841 2300 	strex	r3, r2, [r1]
 800437a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800437c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1e5      	bne.n	800434e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3314      	adds	r3, #20
 8004388:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	617b      	str	r3, [r7, #20]
   return(result);
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004398:	653b      	str	r3, [r7, #80]	; 0x50
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3314      	adds	r3, #20
 80043a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80043a2:	627a      	str	r2, [r7, #36]	; 0x24
 80043a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	6a39      	ldr	r1, [r7, #32]
 80043a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043aa:	e841 2300 	strex	r3, r2, [r1]
 80043ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1e5      	bne.n	8004382 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3760      	adds	r7, #96	; 0x60
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	080040a7 	.word	0x080040a7
 80043c4:	080041cd 	.word	0x080041cd
 80043c8:	08004203 	.word	0x08004203

080043cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b089      	sub	sp, #36	; 0x24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	330c      	adds	r3, #12
 80043da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80043ea:	61fb      	str	r3, [r7, #28]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	330c      	adds	r3, #12
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	61ba      	str	r2, [r7, #24]
 80043f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	6979      	ldr	r1, [r7, #20]
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	613b      	str	r3, [r7, #16]
   return(result);
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e5      	bne.n	80043d4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004410:	bf00      	nop
 8004412:	3724      	adds	r7, #36	; 0x24
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800441c:	b480      	push	{r7}
 800441e:	b095      	sub	sp, #84	; 0x54
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	330c      	adds	r3, #12
 800442a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800442e:	e853 3f00 	ldrex	r3, [r3]
 8004432:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800443a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	330c      	adds	r3, #12
 8004442:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004444:	643a      	str	r2, [r7, #64]	; 0x40
 8004446:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800444a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e5      	bne.n	8004424 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3314      	adds	r3, #20
 800445e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	e853 3f00 	ldrex	r3, [r3]
 8004466:	61fb      	str	r3, [r7, #28]
   return(result);
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f023 0301 	bic.w	r3, r3, #1
 800446e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3314      	adds	r3, #20
 8004476:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004478:	62fa      	str	r2, [r7, #44]	; 0x2c
 800447a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800447e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004480:	e841 2300 	strex	r3, r2, [r1]
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e5      	bne.n	8004458 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004490:	2b01      	cmp	r3, #1
 8004492:	d119      	bne.n	80044c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f023 0310 	bic.w	r3, r3, #16
 80044aa:	647b      	str	r3, [r7, #68]	; 0x44
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044b4:	61ba      	str	r2, [r7, #24]
 80044b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	6979      	ldr	r1, [r7, #20]
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	e841 2300 	strex	r3, r2, [r1]
 80044c0:	613b      	str	r3, [r7, #16]
   return(result);
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e5      	bne.n	8004494 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80044d6:	bf00      	nop
 80044d8:	3754      	adds	r7, #84	; 0x54
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
	...

080044e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e8:	b09f      	sub	sp, #124	; 0x7c
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044fa:	68d9      	ldr	r1, [r3, #12]
 80044fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	ea40 0301 	orr.w	r3, r0, r1
 8004504:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	431a      	orrs	r2, r3
 8004510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	431a      	orrs	r2, r3
 8004516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	4313      	orrs	r3, r2
 800451c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800451e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004528:	f021 010c 	bic.w	r1, r1, #12
 800452c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004532:	430b      	orrs	r3, r1
 8004534:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004542:	6999      	ldr	r1, [r3, #24]
 8004544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	ea40 0301 	orr.w	r3, r0, r1
 800454c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800454e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4bc5      	ldr	r3, [pc, #788]	; (8004868 <UART_SetConfig+0x384>)
 8004554:	429a      	cmp	r2, r3
 8004556:	d004      	beq.n	8004562 <UART_SetConfig+0x7e>
 8004558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	4bc3      	ldr	r3, [pc, #780]	; (800486c <UART_SetConfig+0x388>)
 800455e:	429a      	cmp	r2, r3
 8004560:	d103      	bne.n	800456a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004562:	f7fe fe6b 	bl	800323c <HAL_RCC_GetPCLK2Freq>
 8004566:	6778      	str	r0, [r7, #116]	; 0x74
 8004568:	e002      	b.n	8004570 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800456a:	f7fe fe53 	bl	8003214 <HAL_RCC_GetPCLK1Freq>
 800456e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004578:	f040 80b6 	bne.w	80046e8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800457c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800457e:	461c      	mov	r4, r3
 8004580:	f04f 0500 	mov.w	r5, #0
 8004584:	4622      	mov	r2, r4
 8004586:	462b      	mov	r3, r5
 8004588:	1891      	adds	r1, r2, r2
 800458a:	6439      	str	r1, [r7, #64]	; 0x40
 800458c:	415b      	adcs	r3, r3
 800458e:	647b      	str	r3, [r7, #68]	; 0x44
 8004590:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004594:	1912      	adds	r2, r2, r4
 8004596:	eb45 0303 	adc.w	r3, r5, r3
 800459a:	f04f 0000 	mov.w	r0, #0
 800459e:	f04f 0100 	mov.w	r1, #0
 80045a2:	00d9      	lsls	r1, r3, #3
 80045a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045a8:	00d0      	lsls	r0, r2, #3
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	1911      	adds	r1, r2, r4
 80045b0:	6639      	str	r1, [r7, #96]	; 0x60
 80045b2:	416b      	adcs	r3, r5
 80045b4:	667b      	str	r3, [r7, #100]	; 0x64
 80045b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	461a      	mov	r2, r3
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	1891      	adds	r1, r2, r2
 80045c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80045c4:	415b      	adcs	r3, r3
 80045c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80045d0:	f7fc facc 	bl	8000b6c <__aeabi_uldivmod>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4ba5      	ldr	r3, [pc, #660]	; (8004870 <UART_SetConfig+0x38c>)
 80045da:	fba3 2302 	umull	r2, r3, r3, r2
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	011e      	lsls	r6, r3, #4
 80045e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045e4:	461c      	mov	r4, r3
 80045e6:	f04f 0500 	mov.w	r5, #0
 80045ea:	4622      	mov	r2, r4
 80045ec:	462b      	mov	r3, r5
 80045ee:	1891      	adds	r1, r2, r2
 80045f0:	6339      	str	r1, [r7, #48]	; 0x30
 80045f2:	415b      	adcs	r3, r3
 80045f4:	637b      	str	r3, [r7, #52]	; 0x34
 80045f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045fa:	1912      	adds	r2, r2, r4
 80045fc:	eb45 0303 	adc.w	r3, r5, r3
 8004600:	f04f 0000 	mov.w	r0, #0
 8004604:	f04f 0100 	mov.w	r1, #0
 8004608:	00d9      	lsls	r1, r3, #3
 800460a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800460e:	00d0      	lsls	r0, r2, #3
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	1911      	adds	r1, r2, r4
 8004616:	65b9      	str	r1, [r7, #88]	; 0x58
 8004618:	416b      	adcs	r3, r5
 800461a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800461c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	461a      	mov	r2, r3
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	1891      	adds	r1, r2, r2
 8004628:	62b9      	str	r1, [r7, #40]	; 0x28
 800462a:	415b      	adcs	r3, r3
 800462c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800462e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004632:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004636:	f7fc fa99 	bl	8000b6c <__aeabi_uldivmod>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	4b8c      	ldr	r3, [pc, #560]	; (8004870 <UART_SetConfig+0x38c>)
 8004640:	fba3 1302 	umull	r1, r3, r3, r2
 8004644:	095b      	lsrs	r3, r3, #5
 8004646:	2164      	movs	r1, #100	; 0x64
 8004648:	fb01 f303 	mul.w	r3, r1, r3
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	3332      	adds	r3, #50	; 0x32
 8004652:	4a87      	ldr	r2, [pc, #540]	; (8004870 <UART_SetConfig+0x38c>)
 8004654:	fba2 2303 	umull	r2, r3, r2, r3
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004660:	441e      	add	r6, r3
 8004662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004664:	4618      	mov	r0, r3
 8004666:	f04f 0100 	mov.w	r1, #0
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	1894      	adds	r4, r2, r2
 8004670:	623c      	str	r4, [r7, #32]
 8004672:	415b      	adcs	r3, r3
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
 8004676:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800467a:	1812      	adds	r2, r2, r0
 800467c:	eb41 0303 	adc.w	r3, r1, r3
 8004680:	f04f 0400 	mov.w	r4, #0
 8004684:	f04f 0500 	mov.w	r5, #0
 8004688:	00dd      	lsls	r5, r3, #3
 800468a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800468e:	00d4      	lsls	r4, r2, #3
 8004690:	4622      	mov	r2, r4
 8004692:	462b      	mov	r3, r5
 8004694:	1814      	adds	r4, r2, r0
 8004696:	653c      	str	r4, [r7, #80]	; 0x50
 8004698:	414b      	adcs	r3, r1
 800469a:	657b      	str	r3, [r7, #84]	; 0x54
 800469c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	461a      	mov	r2, r3
 80046a2:	f04f 0300 	mov.w	r3, #0
 80046a6:	1891      	adds	r1, r2, r2
 80046a8:	61b9      	str	r1, [r7, #24]
 80046aa:	415b      	adcs	r3, r3
 80046ac:	61fb      	str	r3, [r7, #28]
 80046ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80046b6:	f7fc fa59 	bl	8000b6c <__aeabi_uldivmod>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4b6c      	ldr	r3, [pc, #432]	; (8004870 <UART_SetConfig+0x38c>)
 80046c0:	fba3 1302 	umull	r1, r3, r3, r2
 80046c4:	095b      	lsrs	r3, r3, #5
 80046c6:	2164      	movs	r1, #100	; 0x64
 80046c8:	fb01 f303 	mul.w	r3, r1, r3
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	3332      	adds	r3, #50	; 0x32
 80046d2:	4a67      	ldr	r2, [pc, #412]	; (8004870 <UART_SetConfig+0x38c>)
 80046d4:	fba2 2303 	umull	r2, r3, r2, r3
 80046d8:	095b      	lsrs	r3, r3, #5
 80046da:	f003 0207 	and.w	r2, r3, #7
 80046de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4432      	add	r2, r6
 80046e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046e6:	e0b9      	b.n	800485c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ea:	461c      	mov	r4, r3
 80046ec:	f04f 0500 	mov.w	r5, #0
 80046f0:	4622      	mov	r2, r4
 80046f2:	462b      	mov	r3, r5
 80046f4:	1891      	adds	r1, r2, r2
 80046f6:	6139      	str	r1, [r7, #16]
 80046f8:	415b      	adcs	r3, r3
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004700:	1912      	adds	r2, r2, r4
 8004702:	eb45 0303 	adc.w	r3, r5, r3
 8004706:	f04f 0000 	mov.w	r0, #0
 800470a:	f04f 0100 	mov.w	r1, #0
 800470e:	00d9      	lsls	r1, r3, #3
 8004710:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004714:	00d0      	lsls	r0, r2, #3
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	eb12 0804 	adds.w	r8, r2, r4
 800471e:	eb43 0905 	adc.w	r9, r3, r5
 8004722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	4618      	mov	r0, r3
 8004728:	f04f 0100 	mov.w	r1, #0
 800472c:	f04f 0200 	mov.w	r2, #0
 8004730:	f04f 0300 	mov.w	r3, #0
 8004734:	008b      	lsls	r3, r1, #2
 8004736:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800473a:	0082      	lsls	r2, r0, #2
 800473c:	4640      	mov	r0, r8
 800473e:	4649      	mov	r1, r9
 8004740:	f7fc fa14 	bl	8000b6c <__aeabi_uldivmod>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4b49      	ldr	r3, [pc, #292]	; (8004870 <UART_SetConfig+0x38c>)
 800474a:	fba3 2302 	umull	r2, r3, r3, r2
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	011e      	lsls	r6, r3, #4
 8004752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004754:	4618      	mov	r0, r3
 8004756:	f04f 0100 	mov.w	r1, #0
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	1894      	adds	r4, r2, r2
 8004760:	60bc      	str	r4, [r7, #8]
 8004762:	415b      	adcs	r3, r3
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800476a:	1812      	adds	r2, r2, r0
 800476c:	eb41 0303 	adc.w	r3, r1, r3
 8004770:	f04f 0400 	mov.w	r4, #0
 8004774:	f04f 0500 	mov.w	r5, #0
 8004778:	00dd      	lsls	r5, r3, #3
 800477a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800477e:	00d4      	lsls	r4, r2, #3
 8004780:	4622      	mov	r2, r4
 8004782:	462b      	mov	r3, r5
 8004784:	1814      	adds	r4, r2, r0
 8004786:	64bc      	str	r4, [r7, #72]	; 0x48
 8004788:	414b      	adcs	r3, r1
 800478a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800478c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4618      	mov	r0, r3
 8004792:	f04f 0100 	mov.w	r1, #0
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	008b      	lsls	r3, r1, #2
 80047a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047a4:	0082      	lsls	r2, r0, #2
 80047a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80047aa:	f7fc f9df 	bl	8000b6c <__aeabi_uldivmod>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	4b2f      	ldr	r3, [pc, #188]	; (8004870 <UART_SetConfig+0x38c>)
 80047b4:	fba3 1302 	umull	r1, r3, r3, r2
 80047b8:	095b      	lsrs	r3, r3, #5
 80047ba:	2164      	movs	r1, #100	; 0x64
 80047bc:	fb01 f303 	mul.w	r3, r1, r3
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	3332      	adds	r3, #50	; 0x32
 80047c6:	4a2a      	ldr	r2, [pc, #168]	; (8004870 <UART_SetConfig+0x38c>)
 80047c8:	fba2 2303 	umull	r2, r3, r2, r3
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047d2:	441e      	add	r6, r3
 80047d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047d6:	4618      	mov	r0, r3
 80047d8:	f04f 0100 	mov.w	r1, #0
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	1894      	adds	r4, r2, r2
 80047e2:	603c      	str	r4, [r7, #0]
 80047e4:	415b      	adcs	r3, r3
 80047e6:	607b      	str	r3, [r7, #4]
 80047e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047ec:	1812      	adds	r2, r2, r0
 80047ee:	eb41 0303 	adc.w	r3, r1, r3
 80047f2:	f04f 0400 	mov.w	r4, #0
 80047f6:	f04f 0500 	mov.w	r5, #0
 80047fa:	00dd      	lsls	r5, r3, #3
 80047fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004800:	00d4      	lsls	r4, r2, #3
 8004802:	4622      	mov	r2, r4
 8004804:	462b      	mov	r3, r5
 8004806:	eb12 0a00 	adds.w	sl, r2, r0
 800480a:	eb43 0b01 	adc.w	fp, r3, r1
 800480e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	4618      	mov	r0, r3
 8004814:	f04f 0100 	mov.w	r1, #0
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	008b      	lsls	r3, r1, #2
 8004822:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004826:	0082      	lsls	r2, r0, #2
 8004828:	4650      	mov	r0, sl
 800482a:	4659      	mov	r1, fp
 800482c:	f7fc f99e 	bl	8000b6c <__aeabi_uldivmod>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4b0e      	ldr	r3, [pc, #56]	; (8004870 <UART_SetConfig+0x38c>)
 8004836:	fba3 1302 	umull	r1, r3, r3, r2
 800483a:	095b      	lsrs	r3, r3, #5
 800483c:	2164      	movs	r1, #100	; 0x64
 800483e:	fb01 f303 	mul.w	r3, r1, r3
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	3332      	adds	r3, #50	; 0x32
 8004848:	4a09      	ldr	r2, [pc, #36]	; (8004870 <UART_SetConfig+0x38c>)
 800484a:	fba2 2303 	umull	r2, r3, r2, r3
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	f003 020f 	and.w	r2, r3, #15
 8004854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4432      	add	r2, r6
 800485a:	609a      	str	r2, [r3, #8]
}
 800485c:	bf00      	nop
 800485e:	377c      	adds	r7, #124	; 0x7c
 8004860:	46bd      	mov	sp, r7
 8004862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004866:	bf00      	nop
 8004868:	40011000 	.word	0x40011000
 800486c:	40011400 	.word	0x40011400
 8004870:	51eb851f 	.word	0x51eb851f

08004874 <__errno>:
 8004874:	4b01      	ldr	r3, [pc, #4]	; (800487c <__errno+0x8>)
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	2000000c 	.word	0x2000000c

08004880 <__libc_init_array>:
 8004880:	b570      	push	{r4, r5, r6, lr}
 8004882:	4d0d      	ldr	r5, [pc, #52]	; (80048b8 <__libc_init_array+0x38>)
 8004884:	4c0d      	ldr	r4, [pc, #52]	; (80048bc <__libc_init_array+0x3c>)
 8004886:	1b64      	subs	r4, r4, r5
 8004888:	10a4      	asrs	r4, r4, #2
 800488a:	2600      	movs	r6, #0
 800488c:	42a6      	cmp	r6, r4
 800488e:	d109      	bne.n	80048a4 <__libc_init_array+0x24>
 8004890:	4d0b      	ldr	r5, [pc, #44]	; (80048c0 <__libc_init_array+0x40>)
 8004892:	4c0c      	ldr	r4, [pc, #48]	; (80048c4 <__libc_init_array+0x44>)
 8004894:	f000 fc4e 	bl	8005134 <_init>
 8004898:	1b64      	subs	r4, r4, r5
 800489a:	10a4      	asrs	r4, r4, #2
 800489c:	2600      	movs	r6, #0
 800489e:	42a6      	cmp	r6, r4
 80048a0:	d105      	bne.n	80048ae <__libc_init_array+0x2e>
 80048a2:	bd70      	pop	{r4, r5, r6, pc}
 80048a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a8:	4798      	blx	r3
 80048aa:	3601      	adds	r6, #1
 80048ac:	e7ee      	b.n	800488c <__libc_init_array+0xc>
 80048ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b2:	4798      	blx	r3
 80048b4:	3601      	adds	r6, #1
 80048b6:	e7f2      	b.n	800489e <__libc_init_array+0x1e>
 80048b8:	080051ac 	.word	0x080051ac
 80048bc:	080051ac 	.word	0x080051ac
 80048c0:	080051ac 	.word	0x080051ac
 80048c4:	080051b0 	.word	0x080051b0

080048c8 <memset>:
 80048c8:	4402      	add	r2, r0
 80048ca:	4603      	mov	r3, r0
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d100      	bne.n	80048d2 <memset+0xa>
 80048d0:	4770      	bx	lr
 80048d2:	f803 1b01 	strb.w	r1, [r3], #1
 80048d6:	e7f9      	b.n	80048cc <memset+0x4>

080048d8 <siprintf>:
 80048d8:	b40e      	push	{r1, r2, r3}
 80048da:	b500      	push	{lr}
 80048dc:	b09c      	sub	sp, #112	; 0x70
 80048de:	ab1d      	add	r3, sp, #116	; 0x74
 80048e0:	9002      	str	r0, [sp, #8]
 80048e2:	9006      	str	r0, [sp, #24]
 80048e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048e8:	4809      	ldr	r0, [pc, #36]	; (8004910 <siprintf+0x38>)
 80048ea:	9107      	str	r1, [sp, #28]
 80048ec:	9104      	str	r1, [sp, #16]
 80048ee:	4909      	ldr	r1, [pc, #36]	; (8004914 <siprintf+0x3c>)
 80048f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80048f4:	9105      	str	r1, [sp, #20]
 80048f6:	6800      	ldr	r0, [r0, #0]
 80048f8:	9301      	str	r3, [sp, #4]
 80048fa:	a902      	add	r1, sp, #8
 80048fc:	f000 f868 	bl	80049d0 <_svfiprintf_r>
 8004900:	9b02      	ldr	r3, [sp, #8]
 8004902:	2200      	movs	r2, #0
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	b01c      	add	sp, #112	; 0x70
 8004908:	f85d eb04 	ldr.w	lr, [sp], #4
 800490c:	b003      	add	sp, #12
 800490e:	4770      	bx	lr
 8004910:	2000000c 	.word	0x2000000c
 8004914:	ffff0208 	.word	0xffff0208

08004918 <__ssputs_r>:
 8004918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800491c:	688e      	ldr	r6, [r1, #8]
 800491e:	429e      	cmp	r6, r3
 8004920:	4682      	mov	sl, r0
 8004922:	460c      	mov	r4, r1
 8004924:	4690      	mov	r8, r2
 8004926:	461f      	mov	r7, r3
 8004928:	d838      	bhi.n	800499c <__ssputs_r+0x84>
 800492a:	898a      	ldrh	r2, [r1, #12]
 800492c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004930:	d032      	beq.n	8004998 <__ssputs_r+0x80>
 8004932:	6825      	ldr	r5, [r4, #0]
 8004934:	6909      	ldr	r1, [r1, #16]
 8004936:	eba5 0901 	sub.w	r9, r5, r1
 800493a:	6965      	ldr	r5, [r4, #20]
 800493c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004940:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004944:	3301      	adds	r3, #1
 8004946:	444b      	add	r3, r9
 8004948:	106d      	asrs	r5, r5, #1
 800494a:	429d      	cmp	r5, r3
 800494c:	bf38      	it	cc
 800494e:	461d      	movcc	r5, r3
 8004950:	0553      	lsls	r3, r2, #21
 8004952:	d531      	bpl.n	80049b8 <__ssputs_r+0xa0>
 8004954:	4629      	mov	r1, r5
 8004956:	f000 fb47 	bl	8004fe8 <_malloc_r>
 800495a:	4606      	mov	r6, r0
 800495c:	b950      	cbnz	r0, 8004974 <__ssputs_r+0x5c>
 800495e:	230c      	movs	r3, #12
 8004960:	f8ca 3000 	str.w	r3, [sl]
 8004964:	89a3      	ldrh	r3, [r4, #12]
 8004966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800496a:	81a3      	strh	r3, [r4, #12]
 800496c:	f04f 30ff 	mov.w	r0, #4294967295
 8004970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004974:	6921      	ldr	r1, [r4, #16]
 8004976:	464a      	mov	r2, r9
 8004978:	f000 fabe 	bl	8004ef8 <memcpy>
 800497c:	89a3      	ldrh	r3, [r4, #12]
 800497e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004986:	81a3      	strh	r3, [r4, #12]
 8004988:	6126      	str	r6, [r4, #16]
 800498a:	6165      	str	r5, [r4, #20]
 800498c:	444e      	add	r6, r9
 800498e:	eba5 0509 	sub.w	r5, r5, r9
 8004992:	6026      	str	r6, [r4, #0]
 8004994:	60a5      	str	r5, [r4, #8]
 8004996:	463e      	mov	r6, r7
 8004998:	42be      	cmp	r6, r7
 800499a:	d900      	bls.n	800499e <__ssputs_r+0x86>
 800499c:	463e      	mov	r6, r7
 800499e:	4632      	mov	r2, r6
 80049a0:	6820      	ldr	r0, [r4, #0]
 80049a2:	4641      	mov	r1, r8
 80049a4:	f000 fab6 	bl	8004f14 <memmove>
 80049a8:	68a3      	ldr	r3, [r4, #8]
 80049aa:	6822      	ldr	r2, [r4, #0]
 80049ac:	1b9b      	subs	r3, r3, r6
 80049ae:	4432      	add	r2, r6
 80049b0:	60a3      	str	r3, [r4, #8]
 80049b2:	6022      	str	r2, [r4, #0]
 80049b4:	2000      	movs	r0, #0
 80049b6:	e7db      	b.n	8004970 <__ssputs_r+0x58>
 80049b8:	462a      	mov	r2, r5
 80049ba:	f000 fb6f 	bl	800509c <_realloc_r>
 80049be:	4606      	mov	r6, r0
 80049c0:	2800      	cmp	r0, #0
 80049c2:	d1e1      	bne.n	8004988 <__ssputs_r+0x70>
 80049c4:	6921      	ldr	r1, [r4, #16]
 80049c6:	4650      	mov	r0, sl
 80049c8:	f000 fabe 	bl	8004f48 <_free_r>
 80049cc:	e7c7      	b.n	800495e <__ssputs_r+0x46>
	...

080049d0 <_svfiprintf_r>:
 80049d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d4:	4698      	mov	r8, r3
 80049d6:	898b      	ldrh	r3, [r1, #12]
 80049d8:	061b      	lsls	r3, r3, #24
 80049da:	b09d      	sub	sp, #116	; 0x74
 80049dc:	4607      	mov	r7, r0
 80049de:	460d      	mov	r5, r1
 80049e0:	4614      	mov	r4, r2
 80049e2:	d50e      	bpl.n	8004a02 <_svfiprintf_r+0x32>
 80049e4:	690b      	ldr	r3, [r1, #16]
 80049e6:	b963      	cbnz	r3, 8004a02 <_svfiprintf_r+0x32>
 80049e8:	2140      	movs	r1, #64	; 0x40
 80049ea:	f000 fafd 	bl	8004fe8 <_malloc_r>
 80049ee:	6028      	str	r0, [r5, #0]
 80049f0:	6128      	str	r0, [r5, #16]
 80049f2:	b920      	cbnz	r0, 80049fe <_svfiprintf_r+0x2e>
 80049f4:	230c      	movs	r3, #12
 80049f6:	603b      	str	r3, [r7, #0]
 80049f8:	f04f 30ff 	mov.w	r0, #4294967295
 80049fc:	e0d1      	b.n	8004ba2 <_svfiprintf_r+0x1d2>
 80049fe:	2340      	movs	r3, #64	; 0x40
 8004a00:	616b      	str	r3, [r5, #20]
 8004a02:	2300      	movs	r3, #0
 8004a04:	9309      	str	r3, [sp, #36]	; 0x24
 8004a06:	2320      	movs	r3, #32
 8004a08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a10:	2330      	movs	r3, #48	; 0x30
 8004a12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004bbc <_svfiprintf_r+0x1ec>
 8004a16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a1a:	f04f 0901 	mov.w	r9, #1
 8004a1e:	4623      	mov	r3, r4
 8004a20:	469a      	mov	sl, r3
 8004a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a26:	b10a      	cbz	r2, 8004a2c <_svfiprintf_r+0x5c>
 8004a28:	2a25      	cmp	r2, #37	; 0x25
 8004a2a:	d1f9      	bne.n	8004a20 <_svfiprintf_r+0x50>
 8004a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8004a30:	d00b      	beq.n	8004a4a <_svfiprintf_r+0x7a>
 8004a32:	465b      	mov	r3, fp
 8004a34:	4622      	mov	r2, r4
 8004a36:	4629      	mov	r1, r5
 8004a38:	4638      	mov	r0, r7
 8004a3a:	f7ff ff6d 	bl	8004918 <__ssputs_r>
 8004a3e:	3001      	adds	r0, #1
 8004a40:	f000 80aa 	beq.w	8004b98 <_svfiprintf_r+0x1c8>
 8004a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a46:	445a      	add	r2, fp
 8004a48:	9209      	str	r2, [sp, #36]	; 0x24
 8004a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 80a2 	beq.w	8004b98 <_svfiprintf_r+0x1c8>
 8004a54:	2300      	movs	r3, #0
 8004a56:	f04f 32ff 	mov.w	r2, #4294967295
 8004a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a5e:	f10a 0a01 	add.w	sl, sl, #1
 8004a62:	9304      	str	r3, [sp, #16]
 8004a64:	9307      	str	r3, [sp, #28]
 8004a66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a6a:	931a      	str	r3, [sp, #104]	; 0x68
 8004a6c:	4654      	mov	r4, sl
 8004a6e:	2205      	movs	r2, #5
 8004a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a74:	4851      	ldr	r0, [pc, #324]	; (8004bbc <_svfiprintf_r+0x1ec>)
 8004a76:	f7fb fbb3 	bl	80001e0 <memchr>
 8004a7a:	9a04      	ldr	r2, [sp, #16]
 8004a7c:	b9d8      	cbnz	r0, 8004ab6 <_svfiprintf_r+0xe6>
 8004a7e:	06d0      	lsls	r0, r2, #27
 8004a80:	bf44      	itt	mi
 8004a82:	2320      	movmi	r3, #32
 8004a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a88:	0711      	lsls	r1, r2, #28
 8004a8a:	bf44      	itt	mi
 8004a8c:	232b      	movmi	r3, #43	; 0x2b
 8004a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a92:	f89a 3000 	ldrb.w	r3, [sl]
 8004a96:	2b2a      	cmp	r3, #42	; 0x2a
 8004a98:	d015      	beq.n	8004ac6 <_svfiprintf_r+0xf6>
 8004a9a:	9a07      	ldr	r2, [sp, #28]
 8004a9c:	4654      	mov	r4, sl
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	f04f 0c0a 	mov.w	ip, #10
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004aaa:	3b30      	subs	r3, #48	; 0x30
 8004aac:	2b09      	cmp	r3, #9
 8004aae:	d94e      	bls.n	8004b4e <_svfiprintf_r+0x17e>
 8004ab0:	b1b0      	cbz	r0, 8004ae0 <_svfiprintf_r+0x110>
 8004ab2:	9207      	str	r2, [sp, #28]
 8004ab4:	e014      	b.n	8004ae0 <_svfiprintf_r+0x110>
 8004ab6:	eba0 0308 	sub.w	r3, r0, r8
 8004aba:	fa09 f303 	lsl.w	r3, r9, r3
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	9304      	str	r3, [sp, #16]
 8004ac2:	46a2      	mov	sl, r4
 8004ac4:	e7d2      	b.n	8004a6c <_svfiprintf_r+0x9c>
 8004ac6:	9b03      	ldr	r3, [sp, #12]
 8004ac8:	1d19      	adds	r1, r3, #4
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	9103      	str	r1, [sp, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	bfbb      	ittet	lt
 8004ad2:	425b      	neglt	r3, r3
 8004ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8004ad8:	9307      	strge	r3, [sp, #28]
 8004ada:	9307      	strlt	r3, [sp, #28]
 8004adc:	bfb8      	it	lt
 8004ade:	9204      	strlt	r2, [sp, #16]
 8004ae0:	7823      	ldrb	r3, [r4, #0]
 8004ae2:	2b2e      	cmp	r3, #46	; 0x2e
 8004ae4:	d10c      	bne.n	8004b00 <_svfiprintf_r+0x130>
 8004ae6:	7863      	ldrb	r3, [r4, #1]
 8004ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8004aea:	d135      	bne.n	8004b58 <_svfiprintf_r+0x188>
 8004aec:	9b03      	ldr	r3, [sp, #12]
 8004aee:	1d1a      	adds	r2, r3, #4
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	9203      	str	r2, [sp, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	bfb8      	it	lt
 8004af8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004afc:	3402      	adds	r4, #2
 8004afe:	9305      	str	r3, [sp, #20]
 8004b00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004bcc <_svfiprintf_r+0x1fc>
 8004b04:	7821      	ldrb	r1, [r4, #0]
 8004b06:	2203      	movs	r2, #3
 8004b08:	4650      	mov	r0, sl
 8004b0a:	f7fb fb69 	bl	80001e0 <memchr>
 8004b0e:	b140      	cbz	r0, 8004b22 <_svfiprintf_r+0x152>
 8004b10:	2340      	movs	r3, #64	; 0x40
 8004b12:	eba0 000a 	sub.w	r0, r0, sl
 8004b16:	fa03 f000 	lsl.w	r0, r3, r0
 8004b1a:	9b04      	ldr	r3, [sp, #16]
 8004b1c:	4303      	orrs	r3, r0
 8004b1e:	3401      	adds	r4, #1
 8004b20:	9304      	str	r3, [sp, #16]
 8004b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b26:	4826      	ldr	r0, [pc, #152]	; (8004bc0 <_svfiprintf_r+0x1f0>)
 8004b28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b2c:	2206      	movs	r2, #6
 8004b2e:	f7fb fb57 	bl	80001e0 <memchr>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d038      	beq.n	8004ba8 <_svfiprintf_r+0x1d8>
 8004b36:	4b23      	ldr	r3, [pc, #140]	; (8004bc4 <_svfiprintf_r+0x1f4>)
 8004b38:	bb1b      	cbnz	r3, 8004b82 <_svfiprintf_r+0x1b2>
 8004b3a:	9b03      	ldr	r3, [sp, #12]
 8004b3c:	3307      	adds	r3, #7
 8004b3e:	f023 0307 	bic.w	r3, r3, #7
 8004b42:	3308      	adds	r3, #8
 8004b44:	9303      	str	r3, [sp, #12]
 8004b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b48:	4433      	add	r3, r6
 8004b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b4c:	e767      	b.n	8004a1e <_svfiprintf_r+0x4e>
 8004b4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b52:	460c      	mov	r4, r1
 8004b54:	2001      	movs	r0, #1
 8004b56:	e7a5      	b.n	8004aa4 <_svfiprintf_r+0xd4>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	3401      	adds	r4, #1
 8004b5c:	9305      	str	r3, [sp, #20]
 8004b5e:	4619      	mov	r1, r3
 8004b60:	f04f 0c0a 	mov.w	ip, #10
 8004b64:	4620      	mov	r0, r4
 8004b66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b6a:	3a30      	subs	r2, #48	; 0x30
 8004b6c:	2a09      	cmp	r2, #9
 8004b6e:	d903      	bls.n	8004b78 <_svfiprintf_r+0x1a8>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0c5      	beq.n	8004b00 <_svfiprintf_r+0x130>
 8004b74:	9105      	str	r1, [sp, #20]
 8004b76:	e7c3      	b.n	8004b00 <_svfiprintf_r+0x130>
 8004b78:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e7f0      	b.n	8004b64 <_svfiprintf_r+0x194>
 8004b82:	ab03      	add	r3, sp, #12
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	462a      	mov	r2, r5
 8004b88:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <_svfiprintf_r+0x1f8>)
 8004b8a:	a904      	add	r1, sp, #16
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	f3af 8000 	nop.w
 8004b92:	1c42      	adds	r2, r0, #1
 8004b94:	4606      	mov	r6, r0
 8004b96:	d1d6      	bne.n	8004b46 <_svfiprintf_r+0x176>
 8004b98:	89ab      	ldrh	r3, [r5, #12]
 8004b9a:	065b      	lsls	r3, r3, #25
 8004b9c:	f53f af2c 	bmi.w	80049f8 <_svfiprintf_r+0x28>
 8004ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ba2:	b01d      	add	sp, #116	; 0x74
 8004ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba8:	ab03      	add	r3, sp, #12
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	462a      	mov	r2, r5
 8004bae:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <_svfiprintf_r+0x1f8>)
 8004bb0:	a904      	add	r1, sp, #16
 8004bb2:	4638      	mov	r0, r7
 8004bb4:	f000 f87a 	bl	8004cac <_printf_i>
 8004bb8:	e7eb      	b.n	8004b92 <_svfiprintf_r+0x1c2>
 8004bba:	bf00      	nop
 8004bbc:	08005170 	.word	0x08005170
 8004bc0:	0800517a 	.word	0x0800517a
 8004bc4:	00000000 	.word	0x00000000
 8004bc8:	08004919 	.word	0x08004919
 8004bcc:	08005176 	.word	0x08005176

08004bd0 <_printf_common>:
 8004bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd4:	4616      	mov	r6, r2
 8004bd6:	4699      	mov	r9, r3
 8004bd8:	688a      	ldr	r2, [r1, #8]
 8004bda:	690b      	ldr	r3, [r1, #16]
 8004bdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004be0:	4293      	cmp	r3, r2
 8004be2:	bfb8      	it	lt
 8004be4:	4613      	movlt	r3, r2
 8004be6:	6033      	str	r3, [r6, #0]
 8004be8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bec:	4607      	mov	r7, r0
 8004bee:	460c      	mov	r4, r1
 8004bf0:	b10a      	cbz	r2, 8004bf6 <_printf_common+0x26>
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	6033      	str	r3, [r6, #0]
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	0699      	lsls	r1, r3, #26
 8004bfa:	bf42      	ittt	mi
 8004bfc:	6833      	ldrmi	r3, [r6, #0]
 8004bfe:	3302      	addmi	r3, #2
 8004c00:	6033      	strmi	r3, [r6, #0]
 8004c02:	6825      	ldr	r5, [r4, #0]
 8004c04:	f015 0506 	ands.w	r5, r5, #6
 8004c08:	d106      	bne.n	8004c18 <_printf_common+0x48>
 8004c0a:	f104 0a19 	add.w	sl, r4, #25
 8004c0e:	68e3      	ldr	r3, [r4, #12]
 8004c10:	6832      	ldr	r2, [r6, #0]
 8004c12:	1a9b      	subs	r3, r3, r2
 8004c14:	42ab      	cmp	r3, r5
 8004c16:	dc26      	bgt.n	8004c66 <_printf_common+0x96>
 8004c18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c1c:	1e13      	subs	r3, r2, #0
 8004c1e:	6822      	ldr	r2, [r4, #0]
 8004c20:	bf18      	it	ne
 8004c22:	2301      	movne	r3, #1
 8004c24:	0692      	lsls	r2, r2, #26
 8004c26:	d42b      	bmi.n	8004c80 <_printf_common+0xb0>
 8004c28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c2c:	4649      	mov	r1, r9
 8004c2e:	4638      	mov	r0, r7
 8004c30:	47c0      	blx	r8
 8004c32:	3001      	adds	r0, #1
 8004c34:	d01e      	beq.n	8004c74 <_printf_common+0xa4>
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	68e5      	ldr	r5, [r4, #12]
 8004c3a:	6832      	ldr	r2, [r6, #0]
 8004c3c:	f003 0306 	and.w	r3, r3, #6
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	bf08      	it	eq
 8004c44:	1aad      	subeq	r5, r5, r2
 8004c46:	68a3      	ldr	r3, [r4, #8]
 8004c48:	6922      	ldr	r2, [r4, #16]
 8004c4a:	bf0c      	ite	eq
 8004c4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c50:	2500      	movne	r5, #0
 8004c52:	4293      	cmp	r3, r2
 8004c54:	bfc4      	itt	gt
 8004c56:	1a9b      	subgt	r3, r3, r2
 8004c58:	18ed      	addgt	r5, r5, r3
 8004c5a:	2600      	movs	r6, #0
 8004c5c:	341a      	adds	r4, #26
 8004c5e:	42b5      	cmp	r5, r6
 8004c60:	d11a      	bne.n	8004c98 <_printf_common+0xc8>
 8004c62:	2000      	movs	r0, #0
 8004c64:	e008      	b.n	8004c78 <_printf_common+0xa8>
 8004c66:	2301      	movs	r3, #1
 8004c68:	4652      	mov	r2, sl
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	4638      	mov	r0, r7
 8004c6e:	47c0      	blx	r8
 8004c70:	3001      	adds	r0, #1
 8004c72:	d103      	bne.n	8004c7c <_printf_common+0xac>
 8004c74:	f04f 30ff 	mov.w	r0, #4294967295
 8004c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c7c:	3501      	adds	r5, #1
 8004c7e:	e7c6      	b.n	8004c0e <_printf_common+0x3e>
 8004c80:	18e1      	adds	r1, r4, r3
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	2030      	movs	r0, #48	; 0x30
 8004c86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c8a:	4422      	add	r2, r4
 8004c8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c94:	3302      	adds	r3, #2
 8004c96:	e7c7      	b.n	8004c28 <_printf_common+0x58>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	4622      	mov	r2, r4
 8004c9c:	4649      	mov	r1, r9
 8004c9e:	4638      	mov	r0, r7
 8004ca0:	47c0      	blx	r8
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	d0e6      	beq.n	8004c74 <_printf_common+0xa4>
 8004ca6:	3601      	adds	r6, #1
 8004ca8:	e7d9      	b.n	8004c5e <_printf_common+0x8e>
	...

08004cac <_printf_i>:
 8004cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb0:	460c      	mov	r4, r1
 8004cb2:	4691      	mov	r9, r2
 8004cb4:	7e27      	ldrb	r7, [r4, #24]
 8004cb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004cb8:	2f78      	cmp	r7, #120	; 0x78
 8004cba:	4680      	mov	r8, r0
 8004cbc:	469a      	mov	sl, r3
 8004cbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cc2:	d807      	bhi.n	8004cd4 <_printf_i+0x28>
 8004cc4:	2f62      	cmp	r7, #98	; 0x62
 8004cc6:	d80a      	bhi.n	8004cde <_printf_i+0x32>
 8004cc8:	2f00      	cmp	r7, #0
 8004cca:	f000 80d8 	beq.w	8004e7e <_printf_i+0x1d2>
 8004cce:	2f58      	cmp	r7, #88	; 0x58
 8004cd0:	f000 80a3 	beq.w	8004e1a <_printf_i+0x16e>
 8004cd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cdc:	e03a      	b.n	8004d54 <_printf_i+0xa8>
 8004cde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ce2:	2b15      	cmp	r3, #21
 8004ce4:	d8f6      	bhi.n	8004cd4 <_printf_i+0x28>
 8004ce6:	a001      	add	r0, pc, #4	; (adr r0, 8004cec <_printf_i+0x40>)
 8004ce8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004cec:	08004d45 	.word	0x08004d45
 8004cf0:	08004d59 	.word	0x08004d59
 8004cf4:	08004cd5 	.word	0x08004cd5
 8004cf8:	08004cd5 	.word	0x08004cd5
 8004cfc:	08004cd5 	.word	0x08004cd5
 8004d00:	08004cd5 	.word	0x08004cd5
 8004d04:	08004d59 	.word	0x08004d59
 8004d08:	08004cd5 	.word	0x08004cd5
 8004d0c:	08004cd5 	.word	0x08004cd5
 8004d10:	08004cd5 	.word	0x08004cd5
 8004d14:	08004cd5 	.word	0x08004cd5
 8004d18:	08004e65 	.word	0x08004e65
 8004d1c:	08004d89 	.word	0x08004d89
 8004d20:	08004e47 	.word	0x08004e47
 8004d24:	08004cd5 	.word	0x08004cd5
 8004d28:	08004cd5 	.word	0x08004cd5
 8004d2c:	08004e87 	.word	0x08004e87
 8004d30:	08004cd5 	.word	0x08004cd5
 8004d34:	08004d89 	.word	0x08004d89
 8004d38:	08004cd5 	.word	0x08004cd5
 8004d3c:	08004cd5 	.word	0x08004cd5
 8004d40:	08004e4f 	.word	0x08004e4f
 8004d44:	680b      	ldr	r3, [r1, #0]
 8004d46:	1d1a      	adds	r2, r3, #4
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	600a      	str	r2, [r1, #0]
 8004d4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d54:	2301      	movs	r3, #1
 8004d56:	e0a3      	b.n	8004ea0 <_printf_i+0x1f4>
 8004d58:	6825      	ldr	r5, [r4, #0]
 8004d5a:	6808      	ldr	r0, [r1, #0]
 8004d5c:	062e      	lsls	r6, r5, #24
 8004d5e:	f100 0304 	add.w	r3, r0, #4
 8004d62:	d50a      	bpl.n	8004d7a <_printf_i+0xce>
 8004d64:	6805      	ldr	r5, [r0, #0]
 8004d66:	600b      	str	r3, [r1, #0]
 8004d68:	2d00      	cmp	r5, #0
 8004d6a:	da03      	bge.n	8004d74 <_printf_i+0xc8>
 8004d6c:	232d      	movs	r3, #45	; 0x2d
 8004d6e:	426d      	negs	r5, r5
 8004d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d74:	485e      	ldr	r0, [pc, #376]	; (8004ef0 <_printf_i+0x244>)
 8004d76:	230a      	movs	r3, #10
 8004d78:	e019      	b.n	8004dae <_printf_i+0x102>
 8004d7a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d7e:	6805      	ldr	r5, [r0, #0]
 8004d80:	600b      	str	r3, [r1, #0]
 8004d82:	bf18      	it	ne
 8004d84:	b22d      	sxthne	r5, r5
 8004d86:	e7ef      	b.n	8004d68 <_printf_i+0xbc>
 8004d88:	680b      	ldr	r3, [r1, #0]
 8004d8a:	6825      	ldr	r5, [r4, #0]
 8004d8c:	1d18      	adds	r0, r3, #4
 8004d8e:	6008      	str	r0, [r1, #0]
 8004d90:	0628      	lsls	r0, r5, #24
 8004d92:	d501      	bpl.n	8004d98 <_printf_i+0xec>
 8004d94:	681d      	ldr	r5, [r3, #0]
 8004d96:	e002      	b.n	8004d9e <_printf_i+0xf2>
 8004d98:	0669      	lsls	r1, r5, #25
 8004d9a:	d5fb      	bpl.n	8004d94 <_printf_i+0xe8>
 8004d9c:	881d      	ldrh	r5, [r3, #0]
 8004d9e:	4854      	ldr	r0, [pc, #336]	; (8004ef0 <_printf_i+0x244>)
 8004da0:	2f6f      	cmp	r7, #111	; 0x6f
 8004da2:	bf0c      	ite	eq
 8004da4:	2308      	moveq	r3, #8
 8004da6:	230a      	movne	r3, #10
 8004da8:	2100      	movs	r1, #0
 8004daa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dae:	6866      	ldr	r6, [r4, #4]
 8004db0:	60a6      	str	r6, [r4, #8]
 8004db2:	2e00      	cmp	r6, #0
 8004db4:	bfa2      	ittt	ge
 8004db6:	6821      	ldrge	r1, [r4, #0]
 8004db8:	f021 0104 	bicge.w	r1, r1, #4
 8004dbc:	6021      	strge	r1, [r4, #0]
 8004dbe:	b90d      	cbnz	r5, 8004dc4 <_printf_i+0x118>
 8004dc0:	2e00      	cmp	r6, #0
 8004dc2:	d04d      	beq.n	8004e60 <_printf_i+0x1b4>
 8004dc4:	4616      	mov	r6, r2
 8004dc6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004dca:	fb03 5711 	mls	r7, r3, r1, r5
 8004dce:	5dc7      	ldrb	r7, [r0, r7]
 8004dd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004dd4:	462f      	mov	r7, r5
 8004dd6:	42bb      	cmp	r3, r7
 8004dd8:	460d      	mov	r5, r1
 8004dda:	d9f4      	bls.n	8004dc6 <_printf_i+0x11a>
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d10b      	bne.n	8004df8 <_printf_i+0x14c>
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	07df      	lsls	r7, r3, #31
 8004de4:	d508      	bpl.n	8004df8 <_printf_i+0x14c>
 8004de6:	6923      	ldr	r3, [r4, #16]
 8004de8:	6861      	ldr	r1, [r4, #4]
 8004dea:	4299      	cmp	r1, r3
 8004dec:	bfde      	ittt	le
 8004dee:	2330      	movle	r3, #48	; 0x30
 8004df0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004df4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004df8:	1b92      	subs	r2, r2, r6
 8004dfa:	6122      	str	r2, [r4, #16]
 8004dfc:	f8cd a000 	str.w	sl, [sp]
 8004e00:	464b      	mov	r3, r9
 8004e02:	aa03      	add	r2, sp, #12
 8004e04:	4621      	mov	r1, r4
 8004e06:	4640      	mov	r0, r8
 8004e08:	f7ff fee2 	bl	8004bd0 <_printf_common>
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d14c      	bne.n	8004eaa <_printf_i+0x1fe>
 8004e10:	f04f 30ff 	mov.w	r0, #4294967295
 8004e14:	b004      	add	sp, #16
 8004e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e1a:	4835      	ldr	r0, [pc, #212]	; (8004ef0 <_printf_i+0x244>)
 8004e1c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	680e      	ldr	r6, [r1, #0]
 8004e24:	061f      	lsls	r7, r3, #24
 8004e26:	f856 5b04 	ldr.w	r5, [r6], #4
 8004e2a:	600e      	str	r6, [r1, #0]
 8004e2c:	d514      	bpl.n	8004e58 <_printf_i+0x1ac>
 8004e2e:	07d9      	lsls	r1, r3, #31
 8004e30:	bf44      	itt	mi
 8004e32:	f043 0320 	orrmi.w	r3, r3, #32
 8004e36:	6023      	strmi	r3, [r4, #0]
 8004e38:	b91d      	cbnz	r5, 8004e42 <_printf_i+0x196>
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	f023 0320 	bic.w	r3, r3, #32
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	2310      	movs	r3, #16
 8004e44:	e7b0      	b.n	8004da8 <_printf_i+0xfc>
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	f043 0320 	orr.w	r3, r3, #32
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	2378      	movs	r3, #120	; 0x78
 8004e50:	4828      	ldr	r0, [pc, #160]	; (8004ef4 <_printf_i+0x248>)
 8004e52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e56:	e7e3      	b.n	8004e20 <_printf_i+0x174>
 8004e58:	065e      	lsls	r6, r3, #25
 8004e5a:	bf48      	it	mi
 8004e5c:	b2ad      	uxthmi	r5, r5
 8004e5e:	e7e6      	b.n	8004e2e <_printf_i+0x182>
 8004e60:	4616      	mov	r6, r2
 8004e62:	e7bb      	b.n	8004ddc <_printf_i+0x130>
 8004e64:	680b      	ldr	r3, [r1, #0]
 8004e66:	6826      	ldr	r6, [r4, #0]
 8004e68:	6960      	ldr	r0, [r4, #20]
 8004e6a:	1d1d      	adds	r5, r3, #4
 8004e6c:	600d      	str	r5, [r1, #0]
 8004e6e:	0635      	lsls	r5, r6, #24
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	d501      	bpl.n	8004e78 <_printf_i+0x1cc>
 8004e74:	6018      	str	r0, [r3, #0]
 8004e76:	e002      	b.n	8004e7e <_printf_i+0x1d2>
 8004e78:	0671      	lsls	r1, r6, #25
 8004e7a:	d5fb      	bpl.n	8004e74 <_printf_i+0x1c8>
 8004e7c:	8018      	strh	r0, [r3, #0]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	6123      	str	r3, [r4, #16]
 8004e82:	4616      	mov	r6, r2
 8004e84:	e7ba      	b.n	8004dfc <_printf_i+0x150>
 8004e86:	680b      	ldr	r3, [r1, #0]
 8004e88:	1d1a      	adds	r2, r3, #4
 8004e8a:	600a      	str	r2, [r1, #0]
 8004e8c:	681e      	ldr	r6, [r3, #0]
 8004e8e:	6862      	ldr	r2, [r4, #4]
 8004e90:	2100      	movs	r1, #0
 8004e92:	4630      	mov	r0, r6
 8004e94:	f7fb f9a4 	bl	80001e0 <memchr>
 8004e98:	b108      	cbz	r0, 8004e9e <_printf_i+0x1f2>
 8004e9a:	1b80      	subs	r0, r0, r6
 8004e9c:	6060      	str	r0, [r4, #4]
 8004e9e:	6863      	ldr	r3, [r4, #4]
 8004ea0:	6123      	str	r3, [r4, #16]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ea8:	e7a8      	b.n	8004dfc <_printf_i+0x150>
 8004eaa:	6923      	ldr	r3, [r4, #16]
 8004eac:	4632      	mov	r2, r6
 8004eae:	4649      	mov	r1, r9
 8004eb0:	4640      	mov	r0, r8
 8004eb2:	47d0      	blx	sl
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	d0ab      	beq.n	8004e10 <_printf_i+0x164>
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	079b      	lsls	r3, r3, #30
 8004ebc:	d413      	bmi.n	8004ee6 <_printf_i+0x23a>
 8004ebe:	68e0      	ldr	r0, [r4, #12]
 8004ec0:	9b03      	ldr	r3, [sp, #12]
 8004ec2:	4298      	cmp	r0, r3
 8004ec4:	bfb8      	it	lt
 8004ec6:	4618      	movlt	r0, r3
 8004ec8:	e7a4      	b.n	8004e14 <_printf_i+0x168>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	4632      	mov	r2, r6
 8004ece:	4649      	mov	r1, r9
 8004ed0:	4640      	mov	r0, r8
 8004ed2:	47d0      	blx	sl
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	d09b      	beq.n	8004e10 <_printf_i+0x164>
 8004ed8:	3501      	adds	r5, #1
 8004eda:	68e3      	ldr	r3, [r4, #12]
 8004edc:	9903      	ldr	r1, [sp, #12]
 8004ede:	1a5b      	subs	r3, r3, r1
 8004ee0:	42ab      	cmp	r3, r5
 8004ee2:	dcf2      	bgt.n	8004eca <_printf_i+0x21e>
 8004ee4:	e7eb      	b.n	8004ebe <_printf_i+0x212>
 8004ee6:	2500      	movs	r5, #0
 8004ee8:	f104 0619 	add.w	r6, r4, #25
 8004eec:	e7f5      	b.n	8004eda <_printf_i+0x22e>
 8004eee:	bf00      	nop
 8004ef0:	08005181 	.word	0x08005181
 8004ef4:	08005192 	.word	0x08005192

08004ef8 <memcpy>:
 8004ef8:	440a      	add	r2, r1
 8004efa:	4291      	cmp	r1, r2
 8004efc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f00:	d100      	bne.n	8004f04 <memcpy+0xc>
 8004f02:	4770      	bx	lr
 8004f04:	b510      	push	{r4, lr}
 8004f06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f0e:	4291      	cmp	r1, r2
 8004f10:	d1f9      	bne.n	8004f06 <memcpy+0xe>
 8004f12:	bd10      	pop	{r4, pc}

08004f14 <memmove>:
 8004f14:	4288      	cmp	r0, r1
 8004f16:	b510      	push	{r4, lr}
 8004f18:	eb01 0402 	add.w	r4, r1, r2
 8004f1c:	d902      	bls.n	8004f24 <memmove+0x10>
 8004f1e:	4284      	cmp	r4, r0
 8004f20:	4623      	mov	r3, r4
 8004f22:	d807      	bhi.n	8004f34 <memmove+0x20>
 8004f24:	1e43      	subs	r3, r0, #1
 8004f26:	42a1      	cmp	r1, r4
 8004f28:	d008      	beq.n	8004f3c <memmove+0x28>
 8004f2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f32:	e7f8      	b.n	8004f26 <memmove+0x12>
 8004f34:	4402      	add	r2, r0
 8004f36:	4601      	mov	r1, r0
 8004f38:	428a      	cmp	r2, r1
 8004f3a:	d100      	bne.n	8004f3e <memmove+0x2a>
 8004f3c:	bd10      	pop	{r4, pc}
 8004f3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f46:	e7f7      	b.n	8004f38 <memmove+0x24>

08004f48 <_free_r>:
 8004f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f4a:	2900      	cmp	r1, #0
 8004f4c:	d048      	beq.n	8004fe0 <_free_r+0x98>
 8004f4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f52:	9001      	str	r0, [sp, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f1a1 0404 	sub.w	r4, r1, #4
 8004f5a:	bfb8      	it	lt
 8004f5c:	18e4      	addlt	r4, r4, r3
 8004f5e:	f000 f8d3 	bl	8005108 <__malloc_lock>
 8004f62:	4a20      	ldr	r2, [pc, #128]	; (8004fe4 <_free_r+0x9c>)
 8004f64:	9801      	ldr	r0, [sp, #4]
 8004f66:	6813      	ldr	r3, [r2, #0]
 8004f68:	4615      	mov	r5, r2
 8004f6a:	b933      	cbnz	r3, 8004f7a <_free_r+0x32>
 8004f6c:	6063      	str	r3, [r4, #4]
 8004f6e:	6014      	str	r4, [r2, #0]
 8004f70:	b003      	add	sp, #12
 8004f72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f76:	f000 b8cd 	b.w	8005114 <__malloc_unlock>
 8004f7a:	42a3      	cmp	r3, r4
 8004f7c:	d90b      	bls.n	8004f96 <_free_r+0x4e>
 8004f7e:	6821      	ldr	r1, [r4, #0]
 8004f80:	1862      	adds	r2, r4, r1
 8004f82:	4293      	cmp	r3, r2
 8004f84:	bf04      	itt	eq
 8004f86:	681a      	ldreq	r2, [r3, #0]
 8004f88:	685b      	ldreq	r3, [r3, #4]
 8004f8a:	6063      	str	r3, [r4, #4]
 8004f8c:	bf04      	itt	eq
 8004f8e:	1852      	addeq	r2, r2, r1
 8004f90:	6022      	streq	r2, [r4, #0]
 8004f92:	602c      	str	r4, [r5, #0]
 8004f94:	e7ec      	b.n	8004f70 <_free_r+0x28>
 8004f96:	461a      	mov	r2, r3
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	b10b      	cbz	r3, 8004fa0 <_free_r+0x58>
 8004f9c:	42a3      	cmp	r3, r4
 8004f9e:	d9fa      	bls.n	8004f96 <_free_r+0x4e>
 8004fa0:	6811      	ldr	r1, [r2, #0]
 8004fa2:	1855      	adds	r5, r2, r1
 8004fa4:	42a5      	cmp	r5, r4
 8004fa6:	d10b      	bne.n	8004fc0 <_free_r+0x78>
 8004fa8:	6824      	ldr	r4, [r4, #0]
 8004faa:	4421      	add	r1, r4
 8004fac:	1854      	adds	r4, r2, r1
 8004fae:	42a3      	cmp	r3, r4
 8004fb0:	6011      	str	r1, [r2, #0]
 8004fb2:	d1dd      	bne.n	8004f70 <_free_r+0x28>
 8004fb4:	681c      	ldr	r4, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	6053      	str	r3, [r2, #4]
 8004fba:	4421      	add	r1, r4
 8004fbc:	6011      	str	r1, [r2, #0]
 8004fbe:	e7d7      	b.n	8004f70 <_free_r+0x28>
 8004fc0:	d902      	bls.n	8004fc8 <_free_r+0x80>
 8004fc2:	230c      	movs	r3, #12
 8004fc4:	6003      	str	r3, [r0, #0]
 8004fc6:	e7d3      	b.n	8004f70 <_free_r+0x28>
 8004fc8:	6825      	ldr	r5, [r4, #0]
 8004fca:	1961      	adds	r1, r4, r5
 8004fcc:	428b      	cmp	r3, r1
 8004fce:	bf04      	itt	eq
 8004fd0:	6819      	ldreq	r1, [r3, #0]
 8004fd2:	685b      	ldreq	r3, [r3, #4]
 8004fd4:	6063      	str	r3, [r4, #4]
 8004fd6:	bf04      	itt	eq
 8004fd8:	1949      	addeq	r1, r1, r5
 8004fda:	6021      	streq	r1, [r4, #0]
 8004fdc:	6054      	str	r4, [r2, #4]
 8004fde:	e7c7      	b.n	8004f70 <_free_r+0x28>
 8004fe0:	b003      	add	sp, #12
 8004fe2:	bd30      	pop	{r4, r5, pc}
 8004fe4:	200000a0 	.word	0x200000a0

08004fe8 <_malloc_r>:
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fea:	1ccd      	adds	r5, r1, #3
 8004fec:	f025 0503 	bic.w	r5, r5, #3
 8004ff0:	3508      	adds	r5, #8
 8004ff2:	2d0c      	cmp	r5, #12
 8004ff4:	bf38      	it	cc
 8004ff6:	250c      	movcc	r5, #12
 8004ff8:	2d00      	cmp	r5, #0
 8004ffa:	4606      	mov	r6, r0
 8004ffc:	db01      	blt.n	8005002 <_malloc_r+0x1a>
 8004ffe:	42a9      	cmp	r1, r5
 8005000:	d903      	bls.n	800500a <_malloc_r+0x22>
 8005002:	230c      	movs	r3, #12
 8005004:	6033      	str	r3, [r6, #0]
 8005006:	2000      	movs	r0, #0
 8005008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800500a:	f000 f87d 	bl	8005108 <__malloc_lock>
 800500e:	4921      	ldr	r1, [pc, #132]	; (8005094 <_malloc_r+0xac>)
 8005010:	680a      	ldr	r2, [r1, #0]
 8005012:	4614      	mov	r4, r2
 8005014:	b99c      	cbnz	r4, 800503e <_malloc_r+0x56>
 8005016:	4f20      	ldr	r7, [pc, #128]	; (8005098 <_malloc_r+0xb0>)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	b923      	cbnz	r3, 8005026 <_malloc_r+0x3e>
 800501c:	4621      	mov	r1, r4
 800501e:	4630      	mov	r0, r6
 8005020:	f000 f862 	bl	80050e8 <_sbrk_r>
 8005024:	6038      	str	r0, [r7, #0]
 8005026:	4629      	mov	r1, r5
 8005028:	4630      	mov	r0, r6
 800502a:	f000 f85d 	bl	80050e8 <_sbrk_r>
 800502e:	1c43      	adds	r3, r0, #1
 8005030:	d123      	bne.n	800507a <_malloc_r+0x92>
 8005032:	230c      	movs	r3, #12
 8005034:	6033      	str	r3, [r6, #0]
 8005036:	4630      	mov	r0, r6
 8005038:	f000 f86c 	bl	8005114 <__malloc_unlock>
 800503c:	e7e3      	b.n	8005006 <_malloc_r+0x1e>
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	1b5b      	subs	r3, r3, r5
 8005042:	d417      	bmi.n	8005074 <_malloc_r+0x8c>
 8005044:	2b0b      	cmp	r3, #11
 8005046:	d903      	bls.n	8005050 <_malloc_r+0x68>
 8005048:	6023      	str	r3, [r4, #0]
 800504a:	441c      	add	r4, r3
 800504c:	6025      	str	r5, [r4, #0]
 800504e:	e004      	b.n	800505a <_malloc_r+0x72>
 8005050:	6863      	ldr	r3, [r4, #4]
 8005052:	42a2      	cmp	r2, r4
 8005054:	bf0c      	ite	eq
 8005056:	600b      	streq	r3, [r1, #0]
 8005058:	6053      	strne	r3, [r2, #4]
 800505a:	4630      	mov	r0, r6
 800505c:	f000 f85a 	bl	8005114 <__malloc_unlock>
 8005060:	f104 000b 	add.w	r0, r4, #11
 8005064:	1d23      	adds	r3, r4, #4
 8005066:	f020 0007 	bic.w	r0, r0, #7
 800506a:	1ac2      	subs	r2, r0, r3
 800506c:	d0cc      	beq.n	8005008 <_malloc_r+0x20>
 800506e:	1a1b      	subs	r3, r3, r0
 8005070:	50a3      	str	r3, [r4, r2]
 8005072:	e7c9      	b.n	8005008 <_malloc_r+0x20>
 8005074:	4622      	mov	r2, r4
 8005076:	6864      	ldr	r4, [r4, #4]
 8005078:	e7cc      	b.n	8005014 <_malloc_r+0x2c>
 800507a:	1cc4      	adds	r4, r0, #3
 800507c:	f024 0403 	bic.w	r4, r4, #3
 8005080:	42a0      	cmp	r0, r4
 8005082:	d0e3      	beq.n	800504c <_malloc_r+0x64>
 8005084:	1a21      	subs	r1, r4, r0
 8005086:	4630      	mov	r0, r6
 8005088:	f000 f82e 	bl	80050e8 <_sbrk_r>
 800508c:	3001      	adds	r0, #1
 800508e:	d1dd      	bne.n	800504c <_malloc_r+0x64>
 8005090:	e7cf      	b.n	8005032 <_malloc_r+0x4a>
 8005092:	bf00      	nop
 8005094:	200000a0 	.word	0x200000a0
 8005098:	200000a4 	.word	0x200000a4

0800509c <_realloc_r>:
 800509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509e:	4607      	mov	r7, r0
 80050a0:	4614      	mov	r4, r2
 80050a2:	460e      	mov	r6, r1
 80050a4:	b921      	cbnz	r1, 80050b0 <_realloc_r+0x14>
 80050a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80050aa:	4611      	mov	r1, r2
 80050ac:	f7ff bf9c 	b.w	8004fe8 <_malloc_r>
 80050b0:	b922      	cbnz	r2, 80050bc <_realloc_r+0x20>
 80050b2:	f7ff ff49 	bl	8004f48 <_free_r>
 80050b6:	4625      	mov	r5, r4
 80050b8:	4628      	mov	r0, r5
 80050ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050bc:	f000 f830 	bl	8005120 <_malloc_usable_size_r>
 80050c0:	42a0      	cmp	r0, r4
 80050c2:	d20f      	bcs.n	80050e4 <_realloc_r+0x48>
 80050c4:	4621      	mov	r1, r4
 80050c6:	4638      	mov	r0, r7
 80050c8:	f7ff ff8e 	bl	8004fe8 <_malloc_r>
 80050cc:	4605      	mov	r5, r0
 80050ce:	2800      	cmp	r0, #0
 80050d0:	d0f2      	beq.n	80050b8 <_realloc_r+0x1c>
 80050d2:	4631      	mov	r1, r6
 80050d4:	4622      	mov	r2, r4
 80050d6:	f7ff ff0f 	bl	8004ef8 <memcpy>
 80050da:	4631      	mov	r1, r6
 80050dc:	4638      	mov	r0, r7
 80050de:	f7ff ff33 	bl	8004f48 <_free_r>
 80050e2:	e7e9      	b.n	80050b8 <_realloc_r+0x1c>
 80050e4:	4635      	mov	r5, r6
 80050e6:	e7e7      	b.n	80050b8 <_realloc_r+0x1c>

080050e8 <_sbrk_r>:
 80050e8:	b538      	push	{r3, r4, r5, lr}
 80050ea:	4d06      	ldr	r5, [pc, #24]	; (8005104 <_sbrk_r+0x1c>)
 80050ec:	2300      	movs	r3, #0
 80050ee:	4604      	mov	r4, r0
 80050f0:	4608      	mov	r0, r1
 80050f2:	602b      	str	r3, [r5, #0]
 80050f4:	f7fc fa64 	bl	80015c0 <_sbrk>
 80050f8:	1c43      	adds	r3, r0, #1
 80050fa:	d102      	bne.n	8005102 <_sbrk_r+0x1a>
 80050fc:	682b      	ldr	r3, [r5, #0]
 80050fe:	b103      	cbz	r3, 8005102 <_sbrk_r+0x1a>
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	bd38      	pop	{r3, r4, r5, pc}
 8005104:	200002a4 	.word	0x200002a4

08005108 <__malloc_lock>:
 8005108:	4801      	ldr	r0, [pc, #4]	; (8005110 <__malloc_lock+0x8>)
 800510a:	f000 b811 	b.w	8005130 <__retarget_lock_acquire_recursive>
 800510e:	bf00      	nop
 8005110:	200002ac 	.word	0x200002ac

08005114 <__malloc_unlock>:
 8005114:	4801      	ldr	r0, [pc, #4]	; (800511c <__malloc_unlock+0x8>)
 8005116:	f000 b80c 	b.w	8005132 <__retarget_lock_release_recursive>
 800511a:	bf00      	nop
 800511c:	200002ac 	.word	0x200002ac

08005120 <_malloc_usable_size_r>:
 8005120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005124:	1f18      	subs	r0, r3, #4
 8005126:	2b00      	cmp	r3, #0
 8005128:	bfbc      	itt	lt
 800512a:	580b      	ldrlt	r3, [r1, r0]
 800512c:	18c0      	addlt	r0, r0, r3
 800512e:	4770      	bx	lr

08005130 <__retarget_lock_acquire_recursive>:
 8005130:	4770      	bx	lr

08005132 <__retarget_lock_release_recursive>:
 8005132:	4770      	bx	lr

08005134 <_init>:
 8005134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005136:	bf00      	nop
 8005138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800513a:	bc08      	pop	{r3}
 800513c:	469e      	mov	lr, r3
 800513e:	4770      	bx	lr

08005140 <_fini>:
 8005140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005142:	bf00      	nop
 8005144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005146:	bc08      	pop	{r3}
 8005148:	469e      	mov	lr, r3
 800514a:	4770      	bx	lr
