
KomunikacjaJavaSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004674  08004674  00014674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004734  08004734  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004734  08004734  00014734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800473c  0800473c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800473c  0800473c  0001473c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004740  08004740  00014740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  080047b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080047b4  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1f7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e65  00000000  00000000  0002e297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00030100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  00030cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d90  00000000  00000000  00031828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e36e  00000000  00000000  000475b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b5e5  00000000  00000000  00055926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0f0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003744  00000000  00000000  000e0f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800465c 	.word	0x0800465c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800465c 	.word	0x0800465c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b96e 	b.w	8000e70 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468c      	mov	ip, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f040 8083 	bne.w	8000cc2 <__udivmoddi4+0x116>
 8000bbc:	428a      	cmp	r2, r1
 8000bbe:	4617      	mov	r7, r2
 8000bc0:	d947      	bls.n	8000c52 <__udivmoddi4+0xa6>
 8000bc2:	fab2 f282 	clz	r2, r2
 8000bc6:	b142      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc8:	f1c2 0020 	rsb	r0, r2, #32
 8000bcc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bd0:	4091      	lsls	r1, r2
 8000bd2:	4097      	lsls	r7, r2
 8000bd4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bd8:	4094      	lsls	r4, r2
 8000bda:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fbbc f6f8 	udiv	r6, ip, r8
 8000be4:	fa1f fe87 	uxth.w	lr, r7
 8000be8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf0:	fb06 f10e 	mul.w	r1, r6, lr
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	d909      	bls.n	8000c0c <__udivmoddi4+0x60>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfe:	f080 8119 	bcs.w	8000e34 <__udivmoddi4+0x288>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 8116 	bls.w	8000e34 <__udivmoddi4+0x288>
 8000c08:	3e02      	subs	r6, #2
 8000c0a:	443b      	add	r3, r7
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x8c>
 8000c24:	193c      	adds	r4, r7, r4
 8000c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2a:	f080 8105 	bcs.w	8000e38 <__udivmoddi4+0x28c>
 8000c2e:	45a6      	cmp	lr, r4
 8000c30:	f240 8102 	bls.w	8000e38 <__udivmoddi4+0x28c>
 8000c34:	3802      	subs	r0, #2
 8000c36:	443c      	add	r4, r7
 8000c38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3c:	eba4 040e 	sub.w	r4, r4, lr
 8000c40:	2600      	movs	r6, #0
 8000c42:	b11d      	cbz	r5, 8000c4c <__udivmoddi4+0xa0>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c5 4300 	strd	r4, r3, [r5]
 8000c4c:	4631      	mov	r1, r6
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	b902      	cbnz	r2, 8000c56 <__udivmoddi4+0xaa>
 8000c54:	deff      	udf	#255	; 0xff
 8000c56:	fab2 f282 	clz	r2, r2
 8000c5a:	2a00      	cmp	r2, #0
 8000c5c:	d150      	bne.n	8000d00 <__udivmoddi4+0x154>
 8000c5e:	1bcb      	subs	r3, r1, r7
 8000c60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c64:	fa1f f887 	uxth.w	r8, r7
 8000c68:	2601      	movs	r6, #1
 8000c6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c6e:	0c21      	lsrs	r1, r4, #16
 8000c70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c78:	fb08 f30c 	mul.w	r3, r8, ip
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0xe4>
 8000c80:	1879      	adds	r1, r7, r1
 8000c82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0xe2>
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	f200 80e9 	bhi.w	8000e60 <__udivmoddi4+0x2b4>
 8000c8e:	4684      	mov	ip, r0
 8000c90:	1ac9      	subs	r1, r1, r3
 8000c92:	b2a3      	uxth	r3, r4
 8000c94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ca0:	fb08 f800 	mul.w	r8, r8, r0
 8000ca4:	45a0      	cmp	r8, r4
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x10c>
 8000ca8:	193c      	adds	r4, r7, r4
 8000caa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x10a>
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	f200 80d9 	bhi.w	8000e68 <__udivmoddi4+0x2bc>
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	eba4 0408 	sub.w	r4, r4, r8
 8000cbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc0:	e7bf      	b.n	8000c42 <__udivmoddi4+0x96>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x12e>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80b1 	beq.w	8000e2e <__udivmoddi4+0x282>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x1cc>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0x140>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80b8 	bhi.w	8000e5c <__udivmoddi4+0x2b0>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0103 	sbc.w	r1, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	468c      	mov	ip, r1
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0a8      	beq.n	8000c4c <__udivmoddi4+0xa0>
 8000cfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cfe:	e7a5      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f603 	lsr.w	r6, r0, r3
 8000d08:	4097      	lsls	r7, r2
 8000d0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d12:	40d9      	lsrs	r1, r3
 8000d14:	4330      	orrs	r0, r6
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d1c:	fa1f f887 	uxth.w	r8, r7
 8000d20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d28:	fb06 f108 	mul.w	r1, r6, r8
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x19c>
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d3a:	f080 808d 	bcs.w	8000e58 <__udivmoddi4+0x2ac>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 808a 	bls.w	8000e58 <__udivmoddi4+0x2ac>
 8000d44:	3e02      	subs	r6, #2
 8000d46:	443b      	add	r3, r7
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b281      	uxth	r1, r0
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d58:	fb00 f308 	mul.w	r3, r0, r8
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0x1c4>
 8000d60:	1879      	adds	r1, r7, r1
 8000d62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d66:	d273      	bcs.n	8000e50 <__udivmoddi4+0x2a4>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d971      	bls.n	8000e50 <__udivmoddi4+0x2a4>
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	4439      	add	r1, r7
 8000d70:	1acb      	subs	r3, r1, r3
 8000d72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d76:	e778      	b.n	8000c6a <__udivmoddi4+0xbe>
 8000d78:	f1c6 0c20 	rsb	ip, r6, #32
 8000d7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d84:	431c      	orrs	r4, r3
 8000d86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d96:	431f      	orrs	r7, r3
 8000d98:	0c3b      	lsrs	r3, r7, #16
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fa1f f884 	uxth.w	r8, r4
 8000da2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000da6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000daa:	fb09 fa08 	mul.w	sl, r9, r8
 8000dae:	458a      	cmp	sl, r1
 8000db0:	fa02 f206 	lsl.w	r2, r2, r6
 8000db4:	fa00 f306 	lsl.w	r3, r0, r6
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x220>
 8000dba:	1861      	adds	r1, r4, r1
 8000dbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc0:	d248      	bcs.n	8000e54 <__udivmoddi4+0x2a8>
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	d946      	bls.n	8000e54 <__udivmoddi4+0x2a8>
 8000dc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dca:	4421      	add	r1, r4
 8000dcc:	eba1 010a 	sub.w	r1, r1, sl
 8000dd0:	b2bf      	uxth	r7, r7
 8000dd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dde:	fb00 f808 	mul.w	r8, r0, r8
 8000de2:	45b8      	cmp	r8, r7
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x24a>
 8000de6:	19e7      	adds	r7, r4, r7
 8000de8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dec:	d22e      	bcs.n	8000e4c <__udivmoddi4+0x2a0>
 8000dee:	45b8      	cmp	r8, r7
 8000df0:	d92c      	bls.n	8000e4c <__udivmoddi4+0x2a0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	4427      	add	r7, r4
 8000df6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dfa:	eba7 0708 	sub.w	r7, r7, r8
 8000dfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000e02:	454f      	cmp	r7, r9
 8000e04:	46c6      	mov	lr, r8
 8000e06:	4649      	mov	r1, r9
 8000e08:	d31a      	bcc.n	8000e40 <__udivmoddi4+0x294>
 8000e0a:	d017      	beq.n	8000e3c <__udivmoddi4+0x290>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x27a>
 8000e0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e12:	eb67 0701 	sbc.w	r7, r7, r1
 8000e16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e1a:	40f2      	lsrs	r2, r6
 8000e1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e20:	40f7      	lsrs	r7, r6
 8000e22:	e9c5 2700 	strd	r2, r7, [r5]
 8000e26:	2600      	movs	r6, #0
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	462e      	mov	r6, r5
 8000e30:	4628      	mov	r0, r5
 8000e32:	e70b      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000e34:	4606      	mov	r6, r0
 8000e36:	e6e9      	b.n	8000c0c <__udivmoddi4+0x60>
 8000e38:	4618      	mov	r0, r3
 8000e3a:	e6fd      	b.n	8000c38 <__udivmoddi4+0x8c>
 8000e3c:	4543      	cmp	r3, r8
 8000e3e:	d2e5      	bcs.n	8000e0c <__udivmoddi4+0x260>
 8000e40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e44:	eb69 0104 	sbc.w	r1, r9, r4
 8000e48:	3801      	subs	r0, #1
 8000e4a:	e7df      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e7d2      	b.n	8000df6 <__udivmoddi4+0x24a>
 8000e50:	4660      	mov	r0, ip
 8000e52:	e78d      	b.n	8000d70 <__udivmoddi4+0x1c4>
 8000e54:	4681      	mov	r9, r0
 8000e56:	e7b9      	b.n	8000dcc <__udivmoddi4+0x220>
 8000e58:	4666      	mov	r6, ip
 8000e5a:	e775      	b.n	8000d48 <__udivmoddi4+0x19c>
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	e74a      	b.n	8000cf6 <__udivmoddi4+0x14a>
 8000e60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e64:	4439      	add	r1, r7
 8000e66:	e713      	b.n	8000c90 <__udivmoddi4+0xe4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	443c      	add	r4, r7
 8000e6c:	e724      	b.n	8000cb8 <__udivmoddi4+0x10c>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b3e      	ldr	r3, [pc, #248]	; (8000f88 <MX_GPIO_Init+0x114>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a3d      	ldr	r2, [pc, #244]	; (8000f88 <MX_GPIO_Init+0x114>)
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b3b      	ldr	r3, [pc, #236]	; (8000f88 <MX_GPIO_Init+0x114>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b37      	ldr	r3, [pc, #220]	; (8000f88 <MX_GPIO_Init+0x114>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a36      	ldr	r2, [pc, #216]	; (8000f88 <MX_GPIO_Init+0x114>)
 8000eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b34      	ldr	r3, [pc, #208]	; (8000f88 <MX_GPIO_Init+0x114>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <MX_GPIO_Init+0x114>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a2f      	ldr	r2, [pc, #188]	; (8000f88 <MX_GPIO_Init+0x114>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <MX_GPIO_Init+0x114>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <MX_GPIO_Init+0x114>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a28      	ldr	r2, [pc, #160]	; (8000f88 <MX_GPIO_Init+0x114>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <MX_GPIO_Init+0x114>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2120      	movs	r1, #32
 8000efe:	4823      	ldr	r0, [pc, #140]	; (8000f8c <MX_GPIO_Init+0x118>)
 8000f00:	f001 f970 	bl	80021e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000f0a:	4821      	ldr	r0, [pc, #132]	; (8000f90 <MX_GPIO_Init+0x11c>)
 8000f0c:	f001 f96a 	bl	80021e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f16:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4619      	mov	r1, r3
 8000f26:	481a      	ldr	r0, [pc, #104]	; (8000f90 <MX_GPIO_Init+0x11c>)
 8000f28:	f000 ffd8 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f2c:	2320      	movs	r3, #32
 8000f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	4812      	ldr	r0, [pc, #72]	; (8000f8c <MX_GPIO_Init+0x118>)
 8000f44:	f000 ffca 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000f48:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480b      	ldr	r0, [pc, #44]	; (8000f90 <MX_GPIO_Init+0x11c>)
 8000f62:	f000 ffbb 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4804      	ldr	r0, [pc, #16]	; (8000f8c <MX_GPIO_Init+0x118>)
 8000f7c:	f000 ffae 	bl	8001edc <HAL_GPIO_Init>

}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	; 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40020800 	.word	0x40020800
 8000f94:	00000000 	.word	0x00000000

08000f98 <calculate>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

double calculate(double setpoint, double pv) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b09c      	sub	sp, #112	; 0x70
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	ed87 0b02 	vstr	d0, [r7, #8]
 8000fa2:	ed87 1b00 	vstr	d1, [r7]

				double dt = 0.5;
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	4b45      	ldr	r3, [pc, #276]	; (80010c0 <calculate+0x128>)
 8000fac:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

							double Kp = 0.1;
 8000fb0:	a341      	add	r3, pc, #260	; (adr r3, 80010b8 <calculate+0x120>)
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
							 double Ki = 0.1;
 8000fba:	a33f      	add	r3, pc, #252	; (adr r3, 80010b8 <calculate+0x120>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
							double Kd = 0.1;
 8000fc4:	a33c      	add	r3, pc, #240	; (adr r3, 80010b8 <calculate+0x120>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

							double pre_error = 0;
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	f04f 0300 	mov.w	r3, #0
 8000fd6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

							double integral = 0;
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			    double error = setpoint - pv;
 8000fe6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fee:	f7ff f953 	bl	8000298 <__aeabi_dsub>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

			    //P
			    double Pout = Kp * error;
 8000ffa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000ffe:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001002:	f7ff fb01 	bl	8000608 <__aeabi_dmul>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

			    //I
			    integral = integral + (error * dt);
 800100e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001012:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001016:	f7ff faf7 	bl	8000608 <__aeabi_dmul>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001022:	f7ff f93b 	bl	800029c <__adddf3>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			    double Iout = Ki * integral;
 800102e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001032:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001036:	f7ff fae7 	bl	8000608 <__aeabi_dmul>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

			    //D
			    double derivative = (error - pre_error) / dt;
 8001042:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001046:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800104a:	f7ff f925 	bl	8000298 <__aeabi_dsub>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800105a:	f7ff fbff 	bl	800085c <__aeabi_ddiv>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	e9c7 2308 	strd	r2, r3, [r7, #32]
			    double Dout = Kd * derivative;
 8001066:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800106a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800106e:	f7ff facb 	bl	8000608 <__aeabi_dmul>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	e9c7 2306 	strd	r2, r3, [r7, #24]

			    //PID
			    double out = Pout + Iout + Dout;
 800107a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800107e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001082:	f7ff f90b 	bl	800029c <__adddf3>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800108e:	f7ff f905 	bl	800029c <__adddf3>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	e9c7 2304 	strd	r2, r3, [r7, #16]

			    pre_error = error;
 800109a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800109e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			    return out;
 80010a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010a6:	ec43 2b17 	vmov	d7, r2, r3
			}
 80010aa:	eeb0 0a47 	vmov.f32	s0, s14
 80010ae:	eef0 0a67 	vmov.f32	s1, s15
 80010b2:	3770      	adds	r7, #112	; 0x70
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	9999999a 	.word	0x9999999a
 80010bc:	3fb99999 	.word	0x3fb99999
 80010c0:	3fe00000 	.word	0x3fe00000

080010c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b0ad      	sub	sp, #180	; 0xb4
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ca:	f000 fd8b 	bl	8001be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ce:	f000 f9d5 	bl	800147c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d2:	f7ff fecf 	bl	8000e74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010d6:	f000 fce9 	bl	8001aac <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80010da:	f000 fadb 	bl	8001694 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010de:	f000 fb47 	bl	8001770 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010e2:	f000 fb99 	bl	8001818 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  uint16_t encoderCounterUp=0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
  uint16_t  encoderCounterDown=0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
  bool stateFirst=false;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  bool stateSecond=false;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
  bool stateThird=false;
 80010fe:	2300      	movs	r3, #0
 8001100:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
  bool stateFourth=false;
 8001104:	2300      	movs	r3, #0
 8001106:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
  bool stateFifth =false;
 800110a:	2300      	movs	r3, #0
 800110c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  char messageSend[64];
  char messageGet[64];
  char* mesage = 'recieved_message';
 8001110:	4bca      	ldr	r3, [pc, #808]	; (800143c <main+0x378>)
 8001112:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  double punktZero=0.0 ,PWM;
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	f04f 0300 	mov.w	r3, #0
 800111e:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  bool left = false;
 8001122:	2300      	movs	r3, #0
 8001124:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  bool right = false;
 8001128:	2300      	movs	r3, #0
 800112a:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 int way;
  bool RecievedMSG = false;
 800112e:	2300      	movs	r3, #0
 8001130:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	uint8_t value=1;
 8001134:	2301      	movs	r3, #1
 8001136:	70fb      	strb	r3, [r7, #3]
  	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001138:	213c      	movs	r1, #60	; 0x3c
 800113a:	48c1      	ldr	r0, [pc, #772]	; (8001440 <main+0x37c>)
 800113c:	f001 fe86 	bl	8002e4c <HAL_TIM_Encoder_Start>
  	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001140:	213c      	movs	r1, #60	; 0x3c
 8001142:	48c0      	ldr	r0, [pc, #768]	; (8001444 <main+0x380>)
 8001144:	f001 fe82 	bl	8002e4c <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001148:	2100      	movs	r1, #0
 800114a:	48bf      	ldr	r0, [pc, #764]	; (8001448 <main+0x384>)
 800114c:	f001 fd28 	bl	8002ba0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001150:	2104      	movs	r1, #4
 8001152:	48bd      	ldr	r0, [pc, #756]	; (8001448 <main+0x384>)
 8001154:	f001 fd24 	bl	8002ba0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001158:	2108      	movs	r1, #8
 800115a:	48bb      	ldr	r0, [pc, #748]	; (8001448 <main+0x384>)
 800115c:	f001 fd20 	bl	8002ba0 <HAL_TIM_PWM_Start>

  while (1)
  {


		if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE) == SET)
 8001160:	4bba      	ldr	r3, [pc, #744]	; (800144c <main+0x388>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0320 	and.w	r3, r3, #32
 800116a:	2b20      	cmp	r3, #32
 800116c:	d105      	bne.n	800117a <main+0xb6>
		{

			HAL_UART_Receive(&huart2, &value, 1, 100);
 800116e:	1cf9      	adds	r1, r7, #3
 8001170:	2364      	movs	r3, #100	; 0x64
 8001172:	2201      	movs	r2, #1
 8001174:	48b5      	ldr	r0, [pc, #724]	; (800144c <main+0x388>)
 8001176:	f002 fb38 	bl	80037ea <HAL_UART_Receive>

		}
		encoderCounterUp = __HAL_TIM_GET_COUNTER(&htim4);
 800117a:	4bb2      	ldr	r3, [pc, #712]	; (8001444 <main+0x380>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
		encoderCounterDown = __HAL_TIM_GET_COUNTER(&htim3);
 8001184:	4bae      	ldr	r3, [pc, #696]	; (8001440 <main+0x37c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac


		switch (value){
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	2b05      	cmp	r3, #5
 8001192:	f200 814d 	bhi.w	8001430 <main+0x36c>
 8001196:	a201      	add	r2, pc, #4	; (adr r2, 800119c <main+0xd8>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	080011b5 	.word	0x080011b5
 80011a0:	0800134b 	.word	0x0800134b
 80011a4:	08001379 	.word	0x08001379
 80011a8:	080013a7 	.word	0x080013a7
 80011ac:	080013d5 	.word	0x080013d5
 80011b0:	08001403 	.word	0x08001403

		case 0:

			          PWM = calculate( punktZero,  (double)encoderCounterDown);
 80011b4:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f9ab 	bl	8000514 <__aeabi_ui2d>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	ec43 2b11 	vmov	d1, r2, r3
 80011c6:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 80011ca:	f7ff fee5 	bl	8000f98 <calculate>
 80011ce:	ed87 0b22 	vstr	d0, [r7, #136]	; 0x88
			            if(PWM>0)
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	f04f 0300 	mov.w	r3, #0
 80011da:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80011de:	f7ff fca3 	bl	8000b28 <__aeabi_dcmpgt>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d021      	beq.n	800122c <main+0x168>
			            {

			             HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,  GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	2140      	movs	r1, #64	; 0x40
 80011ec:	4898      	ldr	r0, [pc, #608]	; (8001450 <main+0x38c>)
 80011ee:	f000 fff9 	bl	80021e4 <HAL_GPIO_WritePin>
			             HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,  GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2180      	movs	r1, #128	; 0x80
 80011f6:	4896      	ldr	r0, [pc, #600]	; (8001450 <main+0x38c>)
 80011f8:	f000 fff4 	bl	80021e4 <HAL_GPIO_WritePin>
			             HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001202:	4893      	ldr	r0, [pc, #588]	; (8001450 <main+0x38c>)
 8001204:	f000 ffee 	bl	80021e4 <HAL_GPIO_WritePin>
			             HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,  GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800120e:	4890      	ldr	r0, [pc, #576]	; (8001450 <main+0x38c>)
 8001210:	f000 ffe8 	bl	80021e4 <HAL_GPIO_WritePin>
			             HAL_Delay(10);
 8001214:	200a      	movs	r0, #10
 8001216:	f000 fd57 	bl	8001cc8 <HAL_Delay>
			             __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 800121a:	4b8b      	ldr	r3, [pc, #556]	; (8001448 <main+0x384>)
 800121c:	681c      	ldr	r4, [r3, #0]
 800121e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001222:	f7ff fc8b 	bl	8000b3c <__aeabi_d2uiz>
 8001226:	4603      	mov	r3, r0
 8001228:	6363      	str	r3, [r4, #52]	; 0x34
 800122a:	e020      	b.n	800126e <main+0x1aa>
			            }else{


			            	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,  GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	2140      	movs	r1, #64	; 0x40
 8001230:	4887      	ldr	r0, [pc, #540]	; (8001450 <main+0x38c>)
 8001232:	f000 ffd7 	bl	80021e4 <HAL_GPIO_WritePin>
			            	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,  GPIO_PIN_SET);
 8001236:	2201      	movs	r2, #1
 8001238:	2180      	movs	r1, #128	; 0x80
 800123a:	4885      	ldr	r0, [pc, #532]	; (8001450 <main+0x38c>)
 800123c:	f000 ffd2 	bl	80021e4 <HAL_GPIO_WritePin>
			            	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001246:	4882      	ldr	r0, [pc, #520]	; (8001450 <main+0x38c>)
 8001248:	f000 ffcc 	bl	80021e4 <HAL_GPIO_WritePin>
			            	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,  GPIO_PIN_SET);
 800124c:	2201      	movs	r2, #1
 800124e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001252:	487f      	ldr	r0, [pc, #508]	; (8001450 <main+0x38c>)
 8001254:	f000 ffc6 	bl	80021e4 <HAL_GPIO_WritePin>
			            	HAL_Delay(10);
 8001258:	200a      	movs	r0, #10
 800125a:	f000 fd35 	bl	8001cc8 <HAL_Delay>
			            	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 800125e:	4b7a      	ldr	r3, [pc, #488]	; (8001448 <main+0x384>)
 8001260:	681c      	ldr	r4, [r3, #0]
 8001262:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001266:	f7ff fc69 	bl	8000b3c <__aeabi_d2uiz>
 800126a:	4603      	mov	r3, r0
 800126c:	6363      	str	r3, [r4, #52]	; 0x34
			            }

			            //start
			            sprintf((char*)messageSend, " START %d",   value);
 800126e:	78fb      	ldrb	r3, [r7, #3]
 8001270:	461a      	mov	r2, r3
 8001272:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001276:	4977      	ldr	r1, [pc, #476]	; (8001454 <main+0x390>)
 8001278:	4618      	mov	r0, r3
 800127a:	f002 fdc1 	bl	8003e00 <siprintf>
			            	HAL_UART_Transmit(&huart2, (uint8_t*)messageSend, strlen(messageSend), 1000);
 800127e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001282:	4618      	mov	r0, r3
 8001284:	f7fe ffac 	bl	80001e0 <strlen>
 8001288:	4603      	mov	r3, r0
 800128a:	b29a      	uxth	r2, r3
 800128c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001294:	486d      	ldr	r0, [pc, #436]	; (800144c <main+0x388>)
 8001296:	f002 fa16 	bl	80036c6 <HAL_UART_Transmit>
			            	sprintf((char*)messageSend, " EUP %d",   encoderCounterUp);
 800129a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 800129e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012a2:	496d      	ldr	r1, [pc, #436]	; (8001458 <main+0x394>)
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 fdab 	bl	8003e00 <siprintf>
			            	HAL_UART_Transmit(&huart2, (uint8_t*)messageSend, strlen(messageSend), 1000);
 80012aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7fe ff96 	bl	80001e0 <strlen>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80012bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c0:	4862      	ldr	r0, [pc, #392]	; (800144c <main+0x388>)
 80012c2:	f002 fa00 	bl	80036c6 <HAL_UART_Transmit>
			            	sprintf((char*)messageSend, " EDOWN %d",   encoderCounterDown);
 80012c6:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 80012ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012ce:	4963      	ldr	r1, [pc, #396]	; (800145c <main+0x398>)
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 fd95 	bl	8003e00 <siprintf>
			            	HAL_UART_Transmit(&huart2, (uint8_t*)messageSend, strlen(messageSend), 1000);
 80012d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012da:	4618      	mov	r0, r3
 80012dc:	f7fe ff80 	bl	80001e0 <strlen>
 80012e0:	4603      	mov	r3, r0
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80012e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ec:	4857      	ldr	r0, [pc, #348]	; (800144c <main+0x388>)
 80012ee:	f002 f9ea 	bl	80036c6 <HAL_UART_Transmit>
			            	sprintf((char*)messageSend, " PWM %d",  PWM);
 80012f2:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80012f6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80012fa:	4959      	ldr	r1, [pc, #356]	; (8001460 <main+0x39c>)
 80012fc:	f002 fd80 	bl	8003e00 <siprintf>
			            	HAL_UART_Transmit(&huart2, (uint8_t*)messageSend, strlen(messageSend), 1000);
 8001300:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001304:	4618      	mov	r0, r3
 8001306:	f7fe ff6b 	bl	80001e0 <strlen>
 800130a:	4603      	mov	r3, r0
 800130c:	b29a      	uxth	r2, r3
 800130e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001316:	484d      	ldr	r0, [pc, #308]	; (800144c <main+0x388>)
 8001318:	f002 f9d5 	bl	80036c6 <HAL_UART_Transmit>
			            	sprintf((char*)messageSend, " way %d",  way);
 800131c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001320:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001324:	494f      	ldr	r1, [pc, #316]	; (8001464 <main+0x3a0>)
 8001326:	4618      	mov	r0, r3
 8001328:	f002 fd6a 	bl	8003e00 <siprintf>
			            	HAL_UART_Transmit(&huart2, (uint8_t*)messageSend, strlen(messageSend), 1000);
 800132c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001330:	4618      	mov	r0, r3
 8001332:	f7fe ff55 	bl	80001e0 <strlen>
 8001336:	4603      	mov	r3, r0
 8001338:	b29a      	uxth	r2, r3
 800133a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800133e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001342:	4842      	ldr	r0, [pc, #264]	; (800144c <main+0x388>)
 8001344:	f002 f9bf 	bl	80036c6 <HAL_UART_Transmit>


		break;
 8001348:	e072      	b.n	8001430 <main+0x36c>

		case 1:

			sprintf((char*)messageSend, " STOP %d",   value);
 800134a:	78fb      	ldrb	r3, [r7, #3]
 800134c:	461a      	mov	r2, r3
 800134e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001352:	4945      	ldr	r1, [pc, #276]	; (8001468 <main+0x3a4>)
 8001354:	4618      	mov	r0, r3
 8001356:	f002 fd53 	bl	8003e00 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)messageSend, strlen(messageSend), 1000);
 800135a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800135e:	4618      	mov	r0, r3
 8001360:	f7fe ff3e 	bl	80001e0 <strlen>
 8001364:	4603      	mov	r3, r0
 8001366:	b29a      	uxth	r2, r3
 8001368:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800136c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001370:	4836      	ldr	r0, [pc, #216]	; (800144c <main+0x388>)
 8001372:	f002 f9a8 	bl	80036c6 <HAL_UART_Transmit>

				break;
 8001376:	e05b      	b.n	8001430 <main+0x36c>
		case 2:

			sprintf((char*)messageSend, " LEFT BUTTON %d",   value);
 8001378:	78fb      	ldrb	r3, [r7, #3]
 800137a:	461a      	mov	r2, r3
 800137c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001380:	493a      	ldr	r1, [pc, #232]	; (800146c <main+0x3a8>)
 8001382:	4618      	mov	r0, r3
 8001384:	f002 fd3c 	bl	8003e00 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)messageSend, strlen(messageSend), 1000);
 8001388:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800138c:	4618      	mov	r0, r3
 800138e:	f7fe ff27 	bl	80001e0 <strlen>
 8001392:	4603      	mov	r3, r0
 8001394:	b29a      	uxth	r2, r3
 8001396:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800139a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139e:	482b      	ldr	r0, [pc, #172]	; (800144c <main+0x388>)
 80013a0:	f002 f991 	bl	80036c6 <HAL_UART_Transmit>


				break;
 80013a4:	e044      	b.n	8001430 <main+0x36c>
		case 3:

			sprintf((char*)messageSend, " RIGHT BUTTON %d",   value);
 80013a6:	78fb      	ldrb	r3, [r7, #3]
 80013a8:	461a      	mov	r2, r3
 80013aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013ae:	4930      	ldr	r1, [pc, #192]	; (8001470 <main+0x3ac>)
 80013b0:	4618      	mov	r0, r3
 80013b2:	f002 fd25 	bl	8003e00 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)messageSend, strlen(messageSend), 1000);
 80013b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7fe ff10 	bl	80001e0 <strlen>
 80013c0:	4603      	mov	r3, r0
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80013c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013cc:	481f      	ldr	r0, [pc, #124]	; (800144c <main+0x388>)
 80013ce:	f002 f97a 	bl	80036c6 <HAL_UART_Transmit>

				break;
 80013d2:	e02d      	b.n	8001430 <main+0x36c>
		case 4:

			sprintf((char*)messageSend, "MANUAL %d",   value);
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	461a      	mov	r2, r3
 80013d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013dc:	4925      	ldr	r1, [pc, #148]	; (8001474 <main+0x3b0>)
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 fd0e 	bl	8003e00 <siprintf>
		   HAL_UART_Transmit(&huart2, (uint8_t*)messageSend, strlen(messageSend), 1000);
 80013e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7fe fef9 	bl	80001e0 <strlen>
 80013ee:	4603      	mov	r3, r0
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80013f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fa:	4814      	ldr	r0, [pc, #80]	; (800144c <main+0x388>)
 80013fc:	f002 f963 	bl	80036c6 <HAL_UART_Transmit>

				break;
 8001400:	e016      	b.n	8001430 <main+0x36c>
		case 5:

          sprintf((char*)messageSend, " P %d",   value);
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	461a      	mov	r2, r3
 8001406:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800140a:	491b      	ldr	r1, [pc, #108]	; (8001478 <main+0x3b4>)
 800140c:	4618      	mov	r0, r3
 800140e:	f002 fcf7 	bl	8003e00 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)messageSend, strlen(messageSend), 1000);
 8001412:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001416:	4618      	mov	r0, r3
 8001418:	f7fe fee2 	bl	80001e0 <strlen>
 800141c:	4603      	mov	r3, r0
 800141e:	b29a      	uxth	r2, r3
 8001420:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001428:	4808      	ldr	r0, [pc, #32]	; (800144c <main+0x388>)
 800142a:	f002 f94c 	bl	80036c6 <HAL_UART_Transmit>

				break;
 800142e:	bf00      	nop

		}


	 	HAL_Delay(1000);
 8001430:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001434:	f000 fc48 	bl	8001cc8 <HAL_Delay>
		if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE) == SET)
 8001438:	e692      	b.n	8001160 <main+0x9c>
 800143a:	bf00      	nop
 800143c:	73616765 	.word	0x73616765
 8001440:	200000e0 	.word	0x200000e0
 8001444:	20000098 	.word	0x20000098
 8001448:	20000128 	.word	0x20000128
 800144c:	20000170 	.word	0x20000170
 8001450:	40020800 	.word	0x40020800
 8001454:	08004674 	.word	0x08004674
 8001458:	08004680 	.word	0x08004680
 800145c:	08004688 	.word	0x08004688
 8001460:	08004694 	.word	0x08004694
 8001464:	0800469c 	.word	0x0800469c
 8001468:	080046a4 	.word	0x080046a4
 800146c:	080046b0 	.word	0x080046b0
 8001470:	080046c0 	.word	0x080046c0
 8001474:	080046d4 	.word	0x080046d4
 8001478:	080046e0 	.word	0x080046e0

0800147c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b094      	sub	sp, #80	; 0x50
 8001480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001482:	f107 0320 	add.w	r3, r7, #32
 8001486:	2230      	movs	r2, #48	; 0x30
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f002 fcb0 	bl	8003df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	4b29      	ldr	r3, [pc, #164]	; (800154c <SystemClock_Config+0xd0>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	4a28      	ldr	r2, [pc, #160]	; (800154c <SystemClock_Config+0xd0>)
 80014aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ae:	6413      	str	r3, [r2, #64]	; 0x40
 80014b0:	4b26      	ldr	r3, [pc, #152]	; (800154c <SystemClock_Config+0xd0>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	4b23      	ldr	r3, [pc, #140]	; (8001550 <SystemClock_Config+0xd4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014c8:	4a21      	ldr	r2, [pc, #132]	; (8001550 <SystemClock_Config+0xd4>)
 80014ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <SystemClock_Config+0xd4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014dc:	2302      	movs	r3, #2
 80014de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e0:	2301      	movs	r3, #1
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e4:	2310      	movs	r3, #16
 80014e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e8:	2302      	movs	r3, #2
 80014ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014ec:	2300      	movs	r3, #0
 80014ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014f0:	2310      	movs	r3, #16
 80014f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014fa:	2304      	movs	r3, #4
 80014fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014fe:	2307      	movs	r3, #7
 8001500:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fe86 	bl	8002218 <HAL_RCC_OscConfig>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001512:	f000 f81f 	bl	8001554 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001516:	230f      	movs	r3, #15
 8001518:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151a:	2302      	movs	r3, #2
 800151c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 800151e:	23a0      	movs	r3, #160	; 0xa0
 8001520:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001526:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f001 f8e8 	bl	8002708 <HAL_RCC_ClockConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800153e:	f000 f809 	bl	8001554 <Error_Handler>
  }
}
 8001542:	bf00      	nop
 8001544:	3750      	adds	r7, #80	; 0x50
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	40007000 	.word	0x40007000

08001554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001558:	b672      	cpsid	i
}
 800155a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800155c:	e7fe      	b.n	800155c <Error_Handler+0x8>
	...

08001560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <HAL_MspInit+0x4c>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <HAL_MspInit+0x4c>)
 8001570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001574:	6453      	str	r3, [r2, #68]	; 0x44
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <HAL_MspInit+0x4c>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_MspInit+0x4c>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	4a08      	ldr	r2, [pc, #32]	; (80015ac <HAL_MspInit+0x4c>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001590:	6413      	str	r3, [r2, #64]	; 0x40
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_MspInit+0x4c>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800159e:	2007      	movs	r0, #7
 80015a0:	f000 fc68 	bl	8001e74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40023800 	.word	0x40023800

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <NMI_Handler+0x4>

080015b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <MemManage_Handler+0x4>

080015c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler+0x4>

080015ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fc:	f000 fb44 	bl	8001c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <_sbrk+0x5c>)
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <_sbrk+0x60>)
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <_sbrk+0x64>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <_sbrk+0x68>)
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d207      	bcs.n	8001644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001634:	f002 fbb2 	bl	8003d9c <__errno>
 8001638:	4603      	mov	r3, r0
 800163a:	220c      	movs	r2, #12
 800163c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163e:	f04f 33ff 	mov.w	r3, #4294967295
 8001642:	e009      	b.n	8001658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <_sbrk+0x64>)
 8001654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20018000 	.word	0x20018000
 8001664:	00000400 	.word	0x00000400
 8001668:	2000008c 	.word	0x2000008c
 800166c:	200001c8 	.word	0x200001c8

08001670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <SystemInit+0x20>)
 8001676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <SystemInit+0x20>)
 800167c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169a:	f107 0320 	add.w	r3, r7, #32
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	611a      	str	r2, [r3, #16]
 80016b2:	615a      	str	r2, [r3, #20]
 80016b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016b6:	4b2d      	ldr	r3, [pc, #180]	; (800176c <MX_TIM2_Init+0xd8>)
 80016b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016be:	4b2b      	ldr	r3, [pc, #172]	; (800176c <MX_TIM2_Init+0xd8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c4:	4b29      	ldr	r3, [pc, #164]	; (800176c <MX_TIM2_Init+0xd8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 80016ca:	4b28      	ldr	r3, [pc, #160]	; (800176c <MX_TIM2_Init+0xd8>)
 80016cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d2:	4b26      	ldr	r3, [pc, #152]	; (800176c <MX_TIM2_Init+0xd8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d8:	4b24      	ldr	r3, [pc, #144]	; (800176c <MX_TIM2_Init+0xd8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016de:	4823      	ldr	r0, [pc, #140]	; (800176c <MX_TIM2_Init+0xd8>)
 80016e0:	f001 fa0e 	bl	8002b00 <HAL_TIM_PWM_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80016ea:	f7ff ff33 	bl	8001554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016f6:	f107 0320 	add.w	r3, r7, #32
 80016fa:	4619      	mov	r1, r3
 80016fc:	481b      	ldr	r0, [pc, #108]	; (800176c <MX_TIM2_Init+0xd8>)
 80016fe:	f001 ff27 	bl	8003550 <HAL_TIMEx_MasterConfigSynchronization>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001708:	f7ff ff24 	bl	8001554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800170c:	2360      	movs	r3, #96	; 0x60
 800170e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	2200      	movs	r2, #0
 8001720:	4619      	mov	r1, r3
 8001722:	4812      	ldr	r0, [pc, #72]	; (800176c <MX_TIM2_Init+0xd8>)
 8001724:	f001 fc20 	bl	8002f68 <HAL_TIM_PWM_ConfigChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800172e:	f7ff ff11 	bl	8001554 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2204      	movs	r2, #4
 8001736:	4619      	mov	r1, r3
 8001738:	480c      	ldr	r0, [pc, #48]	; (800176c <MX_TIM2_Init+0xd8>)
 800173a:	f001 fc15 	bl	8002f68 <HAL_TIM_PWM_ConfigChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001744:	f7ff ff06 	bl	8001554 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	2208      	movs	r2, #8
 800174c:	4619      	mov	r1, r3
 800174e:	4807      	ldr	r0, [pc, #28]	; (800176c <MX_TIM2_Init+0xd8>)
 8001750:	f001 fc0a 	bl	8002f68 <HAL_TIM_PWM_ConfigChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800175a:	f7ff fefb 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800175e:	4803      	ldr	r0, [pc, #12]	; (800176c <MX_TIM2_Init+0xd8>)
 8001760:	f000 f94c 	bl	80019fc <HAL_TIM_MspPostInit>

}
 8001764:	bf00      	nop
 8001766:	3728      	adds	r7, #40	; 0x28
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000128 	.word	0x20000128

08001770 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08c      	sub	sp, #48	; 0x30
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	2224      	movs	r2, #36	; 0x24
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f002 fb36 	bl	8003df0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800178c:	4b20      	ldr	r3, [pc, #128]	; (8001810 <MX_TIM3_Init+0xa0>)
 800178e:	4a21      	ldr	r2, [pc, #132]	; (8001814 <MX_TIM3_Init+0xa4>)
 8001790:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001792:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <MX_TIM3_Init+0xa0>)
 8001794:	2200      	movs	r2, #0
 8001796:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <MX_TIM3_Init+0xa0>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 511;
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <MX_TIM3_Init+0xa0>)
 80017a0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80017a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <MX_TIM3_Init+0xa0>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <MX_TIM3_Init+0xa0>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80017b2:	2301      	movs	r3, #1
 80017b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017ba:	2301      	movs	r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017ca:	2301      	movs	r3, #1
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	4619      	mov	r1, r3
 80017dc:	480c      	ldr	r0, [pc, #48]	; (8001810 <MX_TIM3_Init+0xa0>)
 80017de:	f001 fa8f 	bl	8002d00 <HAL_TIM_Encoder_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80017e8:	f7ff feb4 	bl	8001554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ec:	2300      	movs	r3, #0
 80017ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_TIM3_Init+0xa0>)
 80017fa:	f001 fea9 	bl	8003550 <HAL_TIMEx_MasterConfigSynchronization>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001804:	f7ff fea6 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	3730      	adds	r7, #48	; 0x30
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	200000e0 	.word	0x200000e0
 8001814:	40000400 	.word	0x40000400

08001818 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08c      	sub	sp, #48	; 0x30
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	2224      	movs	r2, #36	; 0x24
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f002 fae2 	bl	8003df0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001834:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <MX_TIM4_Init+0xa0>)
 8001836:	4a21      	ldr	r2, [pc, #132]	; (80018bc <MX_TIM4_Init+0xa4>)
 8001838:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800183a:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <MX_TIM4_Init+0xa0>)
 800183c:	2200      	movs	r2, #0
 800183e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <MX_TIM4_Init+0xa0>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <MX_TIM4_Init+0xa0>)
 8001848:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800184c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <MX_TIM4_Init+0xa0>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <MX_TIM4_Init+0xa0>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800185a:	2301      	movs	r3, #1
 800185c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001862:	2301      	movs	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001872:	2301      	movs	r3, #1
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001876:	2300      	movs	r3, #0
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	4619      	mov	r1, r3
 8001884:	480c      	ldr	r0, [pc, #48]	; (80018b8 <MX_TIM4_Init+0xa0>)
 8001886:	f001 fa3b 	bl	8002d00 <HAL_TIM_Encoder_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001890:	f7ff fe60 	bl	8001554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001894:	2300      	movs	r3, #0
 8001896:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_TIM4_Init+0xa0>)
 80018a2:	f001 fe55 	bl	8003550 <HAL_TIMEx_MasterConfigSynchronization>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80018ac:	f7ff fe52 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	3730      	adds	r7, #48	; 0x30
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000098 	.word	0x20000098
 80018bc:	40000800 	.word	0x40000800

080018c0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d0:	d10d      	bne.n	80018ee <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_TIM_PWM_MspInit+0x3c>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	4a08      	ldr	r2, [pc, #32]	; (80018fc <HAL_TIM_PWM_MspInit+0x3c>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6413      	str	r3, [r2, #64]	; 0x40
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_TIM_PWM_MspInit+0x3c>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80018ee:	bf00      	nop
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800

08001900 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08c      	sub	sp, #48	; 0x30
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a32      	ldr	r2, [pc, #200]	; (80019e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d12c      	bne.n	800197c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]
 8001926:	4b31      	ldr	r3, [pc, #196]	; (80019ec <HAL_TIM_Encoder_MspInit+0xec>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a30      	ldr	r2, [pc, #192]	; (80019ec <HAL_TIM_Encoder_MspInit+0xec>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
 8001932:	4b2e      	ldr	r3, [pc, #184]	; (80019ec <HAL_TIM_Encoder_MspInit+0xec>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	61bb      	str	r3, [r7, #24]
 800193c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <HAL_TIM_Encoder_MspInit+0xec>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a29      	ldr	r2, [pc, #164]	; (80019ec <HAL_TIM_Encoder_MspInit+0xec>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b27      	ldr	r3, [pc, #156]	; (80019ec <HAL_TIM_Encoder_MspInit+0xec>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800195a:	23c0      	movs	r3, #192	; 0xc0
 800195c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800196a:	2302      	movs	r3, #2
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 031c 	add.w	r3, r7, #28
 8001972:	4619      	mov	r1, r3
 8001974:	481e      	ldr	r0, [pc, #120]	; (80019f0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001976:	f000 fab1 	bl	8001edc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800197a:	e030      	b.n	80019de <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a1c      	ldr	r2, [pc, #112]	; (80019f4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d12b      	bne.n	80019de <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	4b18      	ldr	r3, [pc, #96]	; (80019ec <HAL_TIM_Encoder_MspInit+0xec>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	4a17      	ldr	r2, [pc, #92]	; (80019ec <HAL_TIM_Encoder_MspInit+0xec>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	6413      	str	r3, [r2, #64]	; 0x40
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <HAL_TIM_Encoder_MspInit+0xec>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_TIM_Encoder_MspInit+0xec>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a10      	ldr	r2, [pc, #64]	; (80019ec <HAL_TIM_Encoder_MspInit+0xec>)
 80019ac:	f043 0302 	orr.w	r3, r3, #2
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <HAL_TIM_Encoder_MspInit+0xec>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019be:	23c0      	movs	r3, #192	; 0xc0
 80019c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019ce:	2302      	movs	r3, #2
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	4619      	mov	r1, r3
 80019d8:	4807      	ldr	r0, [pc, #28]	; (80019f8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80019da:	f000 fa7f 	bl	8001edc <HAL_GPIO_Init>
}
 80019de:	bf00      	nop
 80019e0:	3730      	adds	r7, #48	; 0x30
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40000400 	.word	0x40000400
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020000 	.word	0x40020000
 80019f4:	40000800 	.word	0x40000800
 80019f8:	40020400 	.word	0x40020400

080019fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	; 0x28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a1c:	d13c      	bne.n	8001a98 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <HAL_TIM_MspPostInit+0xa4>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a1e      	ldr	r2, [pc, #120]	; (8001aa0 <HAL_TIM_MspPostInit+0xa4>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <HAL_TIM_MspPostInit+0xa4>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_TIM_MspPostInit+0xa4>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <HAL_TIM_MspPostInit+0xa4>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_TIM_MspPostInit+0xa4>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a56:	2303      	movs	r3, #3
 8001a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a66:	2301      	movs	r3, #1
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <HAL_TIM_MspPostInit+0xa8>)
 8001a72:	f000 fa33 	bl	8001edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <HAL_TIM_MspPostInit+0xac>)
 8001a94:	f000 fa22 	bl	8001edc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a98:	bf00      	nop
 8001a9a:	3728      	adds	r7, #40	; 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020000 	.word	0x40020000
 8001aa8:	40020400 	.word	0x40020400

08001aac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <MX_USART2_UART_Init+0x4c>)
 8001ab2:	4a12      	ldr	r2, [pc, #72]	; (8001afc <MX_USART2_UART_Init+0x50>)
 8001ab4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <MX_USART2_UART_Init+0x4c>)
 8001ab8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001abc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <MX_USART2_UART_Init+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <MX_USART2_UART_Init+0x4c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <MX_USART2_UART_Init+0x4c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <MX_USART2_UART_Init+0x4c>)
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <MX_USART2_UART_Init+0x4c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <MX_USART2_UART_Init+0x4c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_USART2_UART_Init+0x4c>)
 8001ae4:	f001 fda2 	bl	800362c <HAL_UART_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aee:	f7ff fd31 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000170 	.word	0x20000170
 8001afc:	40004400 	.word	0x40004400

08001b00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a19      	ldr	r2, [pc, #100]	; (8001b84 <HAL_UART_MspInit+0x84>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d12b      	bne.n	8001b7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <HAL_UART_MspInit+0x88>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	4a17      	ldr	r2, [pc, #92]	; (8001b88 <HAL_UART_MspInit+0x88>)
 8001b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b30:	6413      	str	r3, [r2, #64]	; 0x40
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <HAL_UART_MspInit+0x88>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <HAL_UART_MspInit+0x88>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a10      	ldr	r2, [pc, #64]	; (8001b88 <HAL_UART_MspInit+0x88>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <HAL_UART_MspInit+0x88>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b5a:	230c      	movs	r3, #12
 8001b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b6a:	2307      	movs	r3, #7
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	; (8001b8c <HAL_UART_MspInit+0x8c>)
 8001b76:	f000 f9b1 	bl	8001edc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	3728      	adds	r7, #40	; 0x28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40004400 	.word	0x40004400
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40020000 	.word	0x40020000

08001b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b94:	480d      	ldr	r0, [pc, #52]	; (8001bcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b96:	490e      	ldr	r1, [pc, #56]	; (8001bd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b98:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b9c:	e002      	b.n	8001ba4 <LoopCopyDataInit>

08001b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba2:	3304      	adds	r3, #4

08001ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba8:	d3f9      	bcc.n	8001b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001baa:	4a0b      	ldr	r2, [pc, #44]	; (8001bd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bac:	4c0b      	ldr	r4, [pc, #44]	; (8001bdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb0:	e001      	b.n	8001bb6 <LoopFillZerobss>

08001bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb4:	3204      	adds	r2, #4

08001bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb8:	d3fb      	bcc.n	8001bb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bba:	f7ff fd59 	bl	8001670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bbe:	f002 f8f3 	bl	8003da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc2:	f7ff fa7f 	bl	80010c4 <main>
  bx  lr    
 8001bc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001bd4:	08004744 	.word	0x08004744
  ldr r2, =_sbss
 8001bd8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001bdc:	200001c8 	.word	0x200001c8

08001be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC_IRQHandler>
	...

08001be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <HAL_Init+0x40>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0d      	ldr	r2, [pc, #52]	; (8001c24 <HAL_Init+0x40>)
 8001bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_Init+0x40>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <HAL_Init+0x40>)
 8001bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_Init+0x40>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <HAL_Init+0x40>)
 8001c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f000 f931 	bl	8001e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c12:	2000      	movs	r0, #0
 8001c14:	f000 f808 	bl	8001c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c18:	f7ff fca2 	bl	8001560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023c00 	.word	0x40023c00

08001c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_InitTick+0x54>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_InitTick+0x58>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f93b 	bl	8001ec2 <HAL_SYSTICK_Config>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00e      	b.n	8001c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b0f      	cmp	r3, #15
 8001c5a:	d80a      	bhi.n	8001c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f000 f911 	bl	8001e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c68:	4a06      	ldr	r2, [pc, #24]	; (8001c84 <HAL_InitTick+0x5c>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e000      	b.n	8001c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000008 	.word	0x20000008
 8001c84:	20000004 	.word	0x20000004

08001c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_IncTick+0x20>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_IncTick+0x24>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	4a04      	ldr	r2, [pc, #16]	; (8001cac <HAL_IncTick+0x24>)
 8001c9a:	6013      	str	r3, [r2, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	200001b4 	.word	0x200001b4

08001cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <HAL_GetTick+0x14>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	200001b4 	.word	0x200001b4

08001cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7ff ffee 	bl	8001cb0 <HAL_GetTick>
 8001cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce0:	d005      	beq.n	8001cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_Delay+0x44>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4413      	add	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cee:	bf00      	nop
 8001cf0:	f7ff ffde 	bl	8001cb0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d8f7      	bhi.n	8001cf0 <HAL_Delay+0x28>
  {
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000008 	.word	0x20000008

08001d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d42:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	60d3      	str	r3, [r2, #12]
}
 8001d48:	bf00      	nop
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d5c:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <__NVIC_GetPriorityGrouping+0x18>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	0a1b      	lsrs	r3, r3, #8
 8001d62:	f003 0307 	and.w	r3, r3, #7
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	db0a      	blt.n	8001d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	490c      	ldr	r1, [pc, #48]	; (8001dc0 <__NVIC_SetPriority+0x4c>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	0112      	lsls	r2, r2, #4
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	440b      	add	r3, r1
 8001d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d9c:	e00a      	b.n	8001db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4908      	ldr	r1, [pc, #32]	; (8001dc4 <__NVIC_SetPriority+0x50>)
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	3b04      	subs	r3, #4
 8001dac:	0112      	lsls	r2, r2, #4
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	440b      	add	r3, r1
 8001db2:	761a      	strb	r2, [r3, #24]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000e100 	.word	0xe000e100
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f1c3 0307 	rsb	r3, r3, #7
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	bf28      	it	cs
 8001de6:	2304      	movcs	r3, #4
 8001de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3304      	adds	r3, #4
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d902      	bls.n	8001df8 <NVIC_EncodePriority+0x30>
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3b03      	subs	r3, #3
 8001df6:	e000      	b.n	8001dfa <NVIC_EncodePriority+0x32>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43da      	mvns	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e10:	f04f 31ff 	mov.w	r1, #4294967295
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1a:	43d9      	mvns	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	4313      	orrs	r3, r2
         );
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3724      	adds	r7, #36	; 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e40:	d301      	bcc.n	8001e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e42:	2301      	movs	r3, #1
 8001e44:	e00f      	b.n	8001e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <SysTick_Config+0x40>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4e:	210f      	movs	r1, #15
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295
 8001e54:	f7ff ff8e 	bl	8001d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <SysTick_Config+0x40>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5e:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <SysTick_Config+0x40>)
 8001e60:	2207      	movs	r2, #7
 8001e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	e000e010 	.word	0xe000e010

08001e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ff47 	bl	8001d10 <__NVIC_SetPriorityGrouping>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e9c:	f7ff ff5c 	bl	8001d58 <__NVIC_GetPriorityGrouping>
 8001ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	6978      	ldr	r0, [r7, #20]
 8001ea8:	f7ff ff8e 	bl	8001dc8 <NVIC_EncodePriority>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff5d 	bl	8001d74 <__NVIC_SetPriority>
}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff ffb0 	bl	8001e30 <SysTick_Config>
 8001ed0:	4603      	mov	r3, r0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	; 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	e159      	b.n	80021ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ef8:	2201      	movs	r2, #1
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	f040 8148 	bne.w	80021a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d005      	beq.n	8001f2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d130      	bne.n	8001f90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	2203      	movs	r2, #3
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4013      	ands	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f64:	2201      	movs	r2, #1
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 0201 	and.w	r2, r3, #1
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d017      	beq.n	8001fcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d123      	bne.n	8002020 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	08da      	lsrs	r2, r3, #3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3208      	adds	r2, #8
 8001fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	220f      	movs	r2, #15
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	691a      	ldr	r2, [r3, #16]
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	08da      	lsrs	r2, r3, #3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3208      	adds	r2, #8
 800201a:	69b9      	ldr	r1, [r7, #24]
 800201c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	2203      	movs	r2, #3
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0203 	and.w	r2, r3, #3
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80a2 	beq.w	80021a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4b57      	ldr	r3, [pc, #348]	; (80021c4 <HAL_GPIO_Init+0x2e8>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	4a56      	ldr	r2, [pc, #344]	; (80021c4 <HAL_GPIO_Init+0x2e8>)
 800206c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002070:	6453      	str	r3, [r2, #68]	; 0x44
 8002072:	4b54      	ldr	r3, [pc, #336]	; (80021c4 <HAL_GPIO_Init+0x2e8>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800207e:	4a52      	ldr	r2, [pc, #328]	; (80021c8 <HAL_GPIO_Init+0x2ec>)
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	089b      	lsrs	r3, r3, #2
 8002084:	3302      	adds	r3, #2
 8002086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	220f      	movs	r2, #15
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a49      	ldr	r2, [pc, #292]	; (80021cc <HAL_GPIO_Init+0x2f0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d019      	beq.n	80020de <HAL_GPIO_Init+0x202>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a48      	ldr	r2, [pc, #288]	; (80021d0 <HAL_GPIO_Init+0x2f4>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d013      	beq.n	80020da <HAL_GPIO_Init+0x1fe>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a47      	ldr	r2, [pc, #284]	; (80021d4 <HAL_GPIO_Init+0x2f8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00d      	beq.n	80020d6 <HAL_GPIO_Init+0x1fa>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a46      	ldr	r2, [pc, #280]	; (80021d8 <HAL_GPIO_Init+0x2fc>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d007      	beq.n	80020d2 <HAL_GPIO_Init+0x1f6>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a45      	ldr	r2, [pc, #276]	; (80021dc <HAL_GPIO_Init+0x300>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d101      	bne.n	80020ce <HAL_GPIO_Init+0x1f2>
 80020ca:	2304      	movs	r3, #4
 80020cc:	e008      	b.n	80020e0 <HAL_GPIO_Init+0x204>
 80020ce:	2307      	movs	r3, #7
 80020d0:	e006      	b.n	80020e0 <HAL_GPIO_Init+0x204>
 80020d2:	2303      	movs	r3, #3
 80020d4:	e004      	b.n	80020e0 <HAL_GPIO_Init+0x204>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e002      	b.n	80020e0 <HAL_GPIO_Init+0x204>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_GPIO_Init+0x204>
 80020de:	2300      	movs	r3, #0
 80020e0:	69fa      	ldr	r2, [r7, #28]
 80020e2:	f002 0203 	and.w	r2, r2, #3
 80020e6:	0092      	lsls	r2, r2, #2
 80020e8:	4093      	lsls	r3, r2
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020f0:	4935      	ldr	r1, [pc, #212]	; (80021c8 <HAL_GPIO_Init+0x2ec>)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	3302      	adds	r3, #2
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020fe:	4b38      	ldr	r3, [pc, #224]	; (80021e0 <HAL_GPIO_Init+0x304>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002122:	4a2f      	ldr	r2, [pc, #188]	; (80021e0 <HAL_GPIO_Init+0x304>)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002128:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <HAL_GPIO_Init+0x304>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800214c:	4a24      	ldr	r2, [pc, #144]	; (80021e0 <HAL_GPIO_Init+0x304>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002152:	4b23      	ldr	r3, [pc, #140]	; (80021e0 <HAL_GPIO_Init+0x304>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002176:	4a1a      	ldr	r2, [pc, #104]	; (80021e0 <HAL_GPIO_Init+0x304>)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800217c:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <HAL_GPIO_Init+0x304>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021a0:	4a0f      	ldr	r2, [pc, #60]	; (80021e0 <HAL_GPIO_Init+0x304>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3301      	adds	r3, #1
 80021aa:	61fb      	str	r3, [r7, #28]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	2b0f      	cmp	r3, #15
 80021b0:	f67f aea2 	bls.w	8001ef8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	3724      	adds	r7, #36	; 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40013800 	.word	0x40013800
 80021cc:	40020000 	.word	0x40020000
 80021d0:	40020400 	.word	0x40020400
 80021d4:	40020800 	.word	0x40020800
 80021d8:	40020c00 	.word	0x40020c00
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40013c00 	.word	0x40013c00

080021e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	807b      	strh	r3, [r7, #2]
 80021f0:	4613      	mov	r3, r2
 80021f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f4:	787b      	ldrb	r3, [r7, #1]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002200:	e003      	b.n	800220a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002202:	887b      	ldrh	r3, [r7, #2]
 8002204:	041a      	lsls	r2, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	619a      	str	r2, [r3, #24]
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e264      	b.n	80026f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d075      	beq.n	8002322 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002236:	4ba3      	ldr	r3, [pc, #652]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b04      	cmp	r3, #4
 8002240:	d00c      	beq.n	800225c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002242:	4ba0      	ldr	r3, [pc, #640]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800224a:	2b08      	cmp	r3, #8
 800224c:	d112      	bne.n	8002274 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800224e:	4b9d      	ldr	r3, [pc, #628]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800225a:	d10b      	bne.n	8002274 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225c:	4b99      	ldr	r3, [pc, #612]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d05b      	beq.n	8002320 <HAL_RCC_OscConfig+0x108>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d157      	bne.n	8002320 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e23f      	b.n	80026f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227c:	d106      	bne.n	800228c <HAL_RCC_OscConfig+0x74>
 800227e:	4b91      	ldr	r3, [pc, #580]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a90      	ldr	r2, [pc, #576]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	e01d      	b.n	80022c8 <HAL_RCC_OscConfig+0xb0>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002294:	d10c      	bne.n	80022b0 <HAL_RCC_OscConfig+0x98>
 8002296:	4b8b      	ldr	r3, [pc, #556]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a8a      	ldr	r2, [pc, #552]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 800229c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	4b88      	ldr	r3, [pc, #544]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a87      	ldr	r2, [pc, #540]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	e00b      	b.n	80022c8 <HAL_RCC_OscConfig+0xb0>
 80022b0:	4b84      	ldr	r3, [pc, #528]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a83      	ldr	r2, [pc, #524]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 80022b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	4b81      	ldr	r3, [pc, #516]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a80      	ldr	r2, [pc, #512]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 80022c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d013      	beq.n	80022f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7ff fcee 	bl	8001cb0 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d8:	f7ff fcea 	bl	8001cb0 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	; 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e204      	b.n	80026f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ea:	4b76      	ldr	r3, [pc, #472]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0xc0>
 80022f6:	e014      	b.n	8002322 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7ff fcda 	bl	8001cb0 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002300:	f7ff fcd6 	bl	8001cb0 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b64      	cmp	r3, #100	; 0x64
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e1f0      	b.n	80026f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002312:	4b6c      	ldr	r3, [pc, #432]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0xe8>
 800231e:	e000      	b.n	8002322 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d063      	beq.n	80023f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800232e:	4b65      	ldr	r3, [pc, #404]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 030c 	and.w	r3, r3, #12
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00b      	beq.n	8002352 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800233a:	4b62      	ldr	r3, [pc, #392]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002342:	2b08      	cmp	r3, #8
 8002344:	d11c      	bne.n	8002380 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002346:	4b5f      	ldr	r3, [pc, #380]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d116      	bne.n	8002380 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002352:	4b5c      	ldr	r3, [pc, #368]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <HAL_RCC_OscConfig+0x152>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d001      	beq.n	800236a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e1c4      	b.n	80026f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236a:	4b56      	ldr	r3, [pc, #344]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4952      	ldr	r1, [pc, #328]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237e:	e03a      	b.n	80023f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d020      	beq.n	80023ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002388:	4b4f      	ldr	r3, [pc, #316]	; (80024c8 <HAL_RCC_OscConfig+0x2b0>)
 800238a:	2201      	movs	r2, #1
 800238c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238e:	f7ff fc8f 	bl	8001cb0 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002396:	f7ff fc8b 	bl	8001cb0 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e1a5      	b.n	80026f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a8:	4b46      	ldr	r3, [pc, #280]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b4:	4b43      	ldr	r3, [pc, #268]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4940      	ldr	r1, [pc, #256]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	600b      	str	r3, [r1, #0]
 80023c8:	e015      	b.n	80023f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ca:	4b3f      	ldr	r3, [pc, #252]	; (80024c8 <HAL_RCC_OscConfig+0x2b0>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7ff fc6e 	bl	8001cb0 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d8:	f7ff fc6a 	bl	8001cb0 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e184      	b.n	80026f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ea:	4b36      	ldr	r3, [pc, #216]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d030      	beq.n	8002464 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d016      	beq.n	8002438 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240a:	4b30      	ldr	r3, [pc, #192]	; (80024cc <HAL_RCC_OscConfig+0x2b4>)
 800240c:	2201      	movs	r2, #1
 800240e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002410:	f7ff fc4e 	bl	8001cb0 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002418:	f7ff fc4a 	bl	8001cb0 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e164      	b.n	80026f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242a:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 800242c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0x200>
 8002436:	e015      	b.n	8002464 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002438:	4b24      	ldr	r3, [pc, #144]	; (80024cc <HAL_RCC_OscConfig+0x2b4>)
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243e:	f7ff fc37 	bl	8001cb0 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002446:	f7ff fc33 	bl	8001cb0 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e14d      	b.n	80026f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002458:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 800245a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f0      	bne.n	8002446 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 80a0 	beq.w	80025b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002472:	2300      	movs	r3, #0
 8002474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002476:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10f      	bne.n	80024a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	4a0e      	ldr	r2, [pc, #56]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002490:	6413      	str	r3, [r2, #64]	; 0x40
 8002492:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249e:	2301      	movs	r3, #1
 80024a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCC_OscConfig+0x2b8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d121      	bne.n	80024f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <HAL_RCC_OscConfig+0x2b8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <HAL_RCC_OscConfig+0x2b8>)
 80024b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ba:	f7ff fbf9 	bl	8001cb0 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c0:	e011      	b.n	80024e6 <HAL_RCC_OscConfig+0x2ce>
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800
 80024c8:	42470000 	.word	0x42470000
 80024cc:	42470e80 	.word	0x42470e80
 80024d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d4:	f7ff fbec 	bl	8001cb0 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e106      	b.n	80026f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e6:	4b85      	ldr	r3, [pc, #532]	; (80026fc <HAL_RCC_OscConfig+0x4e4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d106      	bne.n	8002508 <HAL_RCC_OscConfig+0x2f0>
 80024fa:	4b81      	ldr	r3, [pc, #516]	; (8002700 <HAL_RCC_OscConfig+0x4e8>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	4a80      	ldr	r2, [pc, #512]	; (8002700 <HAL_RCC_OscConfig+0x4e8>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6713      	str	r3, [r2, #112]	; 0x70
 8002506:	e01c      	b.n	8002542 <HAL_RCC_OscConfig+0x32a>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2b05      	cmp	r3, #5
 800250e:	d10c      	bne.n	800252a <HAL_RCC_OscConfig+0x312>
 8002510:	4b7b      	ldr	r3, [pc, #492]	; (8002700 <HAL_RCC_OscConfig+0x4e8>)
 8002512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002514:	4a7a      	ldr	r2, [pc, #488]	; (8002700 <HAL_RCC_OscConfig+0x4e8>)
 8002516:	f043 0304 	orr.w	r3, r3, #4
 800251a:	6713      	str	r3, [r2, #112]	; 0x70
 800251c:	4b78      	ldr	r3, [pc, #480]	; (8002700 <HAL_RCC_OscConfig+0x4e8>)
 800251e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002520:	4a77      	ldr	r2, [pc, #476]	; (8002700 <HAL_RCC_OscConfig+0x4e8>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6713      	str	r3, [r2, #112]	; 0x70
 8002528:	e00b      	b.n	8002542 <HAL_RCC_OscConfig+0x32a>
 800252a:	4b75      	ldr	r3, [pc, #468]	; (8002700 <HAL_RCC_OscConfig+0x4e8>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252e:	4a74      	ldr	r2, [pc, #464]	; (8002700 <HAL_RCC_OscConfig+0x4e8>)
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	6713      	str	r3, [r2, #112]	; 0x70
 8002536:	4b72      	ldr	r3, [pc, #456]	; (8002700 <HAL_RCC_OscConfig+0x4e8>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	4a71      	ldr	r2, [pc, #452]	; (8002700 <HAL_RCC_OscConfig+0x4e8>)
 800253c:	f023 0304 	bic.w	r3, r3, #4
 8002540:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d015      	beq.n	8002576 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254a:	f7ff fbb1 	bl	8001cb0 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002550:	e00a      	b.n	8002568 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002552:	f7ff fbad 	bl	8001cb0 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002560:	4293      	cmp	r3, r2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e0c5      	b.n	80026f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002568:	4b65      	ldr	r3, [pc, #404]	; (8002700 <HAL_RCC_OscConfig+0x4e8>)
 800256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0ee      	beq.n	8002552 <HAL_RCC_OscConfig+0x33a>
 8002574:	e014      	b.n	80025a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002576:	f7ff fb9b 	bl	8001cb0 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257c:	e00a      	b.n	8002594 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257e:	f7ff fb97 	bl	8001cb0 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	f241 3288 	movw	r2, #5000	; 0x1388
 800258c:	4293      	cmp	r3, r2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e0af      	b.n	80026f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002594:	4b5a      	ldr	r3, [pc, #360]	; (8002700 <HAL_RCC_OscConfig+0x4e8>)
 8002596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1ee      	bne.n	800257e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d105      	bne.n	80025b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a6:	4b56      	ldr	r3, [pc, #344]	; (8002700 <HAL_RCC_OscConfig+0x4e8>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a55      	ldr	r2, [pc, #340]	; (8002700 <HAL_RCC_OscConfig+0x4e8>)
 80025ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 809b 	beq.w	80026f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025bc:	4b50      	ldr	r3, [pc, #320]	; (8002700 <HAL_RCC_OscConfig+0x4e8>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d05c      	beq.n	8002682 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d141      	bne.n	8002654 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d0:	4b4c      	ldr	r3, [pc, #304]	; (8002704 <HAL_RCC_OscConfig+0x4ec>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d6:	f7ff fb6b 	bl	8001cb0 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025de:	f7ff fb67 	bl	8001cb0 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e081      	b.n	80026f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f0:	4b43      	ldr	r3, [pc, #268]	; (8002700 <HAL_RCC_OscConfig+0x4e8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	019b      	lsls	r3, r3, #6
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002612:	085b      	lsrs	r3, r3, #1
 8002614:	3b01      	subs	r3, #1
 8002616:	041b      	lsls	r3, r3, #16
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261e:	061b      	lsls	r3, r3, #24
 8002620:	4937      	ldr	r1, [pc, #220]	; (8002700 <HAL_RCC_OscConfig+0x4e8>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002626:	4b37      	ldr	r3, [pc, #220]	; (8002704 <HAL_RCC_OscConfig+0x4ec>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7ff fb40 	bl	8001cb0 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002634:	f7ff fb3c 	bl	8001cb0 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e056      	b.n	80026f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002646:	4b2e      	ldr	r3, [pc, #184]	; (8002700 <HAL_RCC_OscConfig+0x4e8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x41c>
 8002652:	e04e      	b.n	80026f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002654:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <HAL_RCC_OscConfig+0x4ec>)
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7ff fb29 	bl	8001cb0 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002662:	f7ff fb25 	bl	8001cb0 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e03f      	b.n	80026f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002674:	4b22      	ldr	r3, [pc, #136]	; (8002700 <HAL_RCC_OscConfig+0x4e8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f0      	bne.n	8002662 <HAL_RCC_OscConfig+0x44a>
 8002680:	e037      	b.n	80026f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e032      	b.n	80026f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800268e:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <HAL_RCC_OscConfig+0x4e8>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d028      	beq.n	80026ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d121      	bne.n	80026ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d11a      	bne.n	80026ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026be:	4013      	ands	r3, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d111      	bne.n	80026ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	085b      	lsrs	r3, r3, #1
 80026d6:	3b01      	subs	r3, #1
 80026d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d001      	beq.n	80026f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40007000 	.word	0x40007000
 8002700:	40023800 	.word	0x40023800
 8002704:	42470060 	.word	0x42470060

08002708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0cc      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800271c:	4b68      	ldr	r3, [pc, #416]	; (80028c0 <HAL_RCC_ClockConfig+0x1b8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d90c      	bls.n	8002744 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b65      	ldr	r3, [pc, #404]	; (80028c0 <HAL_RCC_ClockConfig+0x1b8>)
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b63      	ldr	r3, [pc, #396]	; (80028c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0b8      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d020      	beq.n	8002792 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800275c:	4b59      	ldr	r3, [pc, #356]	; (80028c4 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4a58      	ldr	r2, [pc, #352]	; (80028c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002766:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002774:	4b53      	ldr	r3, [pc, #332]	; (80028c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4a52      	ldr	r2, [pc, #328]	; (80028c4 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800277e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002780:	4b50      	ldr	r3, [pc, #320]	; (80028c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	494d      	ldr	r1, [pc, #308]	; (80028c4 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	4313      	orrs	r3, r2
 8002790:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d044      	beq.n	8002828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d107      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	4b47      	ldr	r3, [pc, #284]	; (80028c4 <HAL_RCC_ClockConfig+0x1bc>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d119      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e07f      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d003      	beq.n	80027c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c6:	4b3f      	ldr	r3, [pc, #252]	; (80028c4 <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d109      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e06f      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d6:	4b3b      	ldr	r3, [pc, #236]	; (80028c4 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e067      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027e6:	4b37      	ldr	r3, [pc, #220]	; (80028c4 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f023 0203 	bic.w	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4934      	ldr	r1, [pc, #208]	; (80028c4 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027f8:	f7ff fa5a 	bl	8001cb0 <HAL_GetTick>
 80027fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fe:	e00a      	b.n	8002816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002800:	f7ff fa56 	bl	8001cb0 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	f241 3288 	movw	r2, #5000	; 0x1388
 800280e:	4293      	cmp	r3, r2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e04f      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	4b2b      	ldr	r3, [pc, #172]	; (80028c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 020c 	and.w	r2, r3, #12
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	429a      	cmp	r2, r3
 8002826:	d1eb      	bne.n	8002800 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002828:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <HAL_RCC_ClockConfig+0x1b8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d20c      	bcs.n	8002850 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	4b22      	ldr	r3, [pc, #136]	; (80028c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800283e:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e032      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4916      	ldr	r1, [pc, #88]	; (80028c4 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	4313      	orrs	r3, r2
 800286c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d009      	beq.n	800288e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800287a:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	490e      	ldr	r1, [pc, #56]	; (80028c4 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	4313      	orrs	r3, r2
 800288c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800288e:	f000 f821 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 8002892:	4602      	mov	r2, r0
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	490a      	ldr	r1, [pc, #40]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 80028a0:	5ccb      	ldrb	r3, [r1, r3]
 80028a2:	fa22 f303 	lsr.w	r3, r2, r3
 80028a6:	4a09      	ldr	r2, [pc, #36]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028aa:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <HAL_RCC_ClockConfig+0x1c8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff f9ba 	bl	8001c28 <HAL_InitTick>

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40023c00 	.word	0x40023c00
 80028c4:	40023800 	.word	0x40023800
 80028c8:	080046e8 	.word	0x080046e8
 80028cc:	20000000 	.word	0x20000000
 80028d0:	20000004 	.word	0x20000004

080028d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	607b      	str	r3, [r7, #4]
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	2300      	movs	r3, #0
 80028e6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028ec:	4b67      	ldr	r3, [pc, #412]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d00d      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x40>
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	f200 80bd 	bhi.w	8002a78 <HAL_RCC_GetSysClockFreq+0x1a4>
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x34>
 8002902:	2b04      	cmp	r3, #4
 8002904:	d003      	beq.n	800290e <HAL_RCC_GetSysClockFreq+0x3a>
 8002906:	e0b7      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002908:	4b61      	ldr	r3, [pc, #388]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800290a:	60bb      	str	r3, [r7, #8]
       break;
 800290c:	e0b7      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800290e:	4b61      	ldr	r3, [pc, #388]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002910:	60bb      	str	r3, [r7, #8]
      break;
 8002912:	e0b4      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002914:	4b5d      	ldr	r3, [pc, #372]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800291c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800291e:	4b5b      	ldr	r3, [pc, #364]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d04d      	beq.n	80029c6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800292a:	4b58      	ldr	r3, [pc, #352]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	099b      	lsrs	r3, r3, #6
 8002930:	461a      	mov	r2, r3
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	f240 10ff 	movw	r0, #511	; 0x1ff
 800293a:	f04f 0100 	mov.w	r1, #0
 800293e:	ea02 0800 	and.w	r8, r2, r0
 8002942:	ea03 0901 	and.w	r9, r3, r1
 8002946:	4640      	mov	r0, r8
 8002948:	4649      	mov	r1, r9
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	014b      	lsls	r3, r1, #5
 8002954:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002958:	0142      	lsls	r2, r0, #5
 800295a:	4610      	mov	r0, r2
 800295c:	4619      	mov	r1, r3
 800295e:	ebb0 0008 	subs.w	r0, r0, r8
 8002962:	eb61 0109 	sbc.w	r1, r1, r9
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	018b      	lsls	r3, r1, #6
 8002970:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002974:	0182      	lsls	r2, r0, #6
 8002976:	1a12      	subs	r2, r2, r0
 8002978:	eb63 0301 	sbc.w	r3, r3, r1
 800297c:	f04f 0000 	mov.w	r0, #0
 8002980:	f04f 0100 	mov.w	r1, #0
 8002984:	00d9      	lsls	r1, r3, #3
 8002986:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800298a:	00d0      	lsls	r0, r2, #3
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	eb12 0208 	adds.w	r2, r2, r8
 8002994:	eb43 0309 	adc.w	r3, r3, r9
 8002998:	f04f 0000 	mov.w	r0, #0
 800299c:	f04f 0100 	mov.w	r1, #0
 80029a0:	0259      	lsls	r1, r3, #9
 80029a2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80029a6:	0250      	lsls	r0, r2, #9
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	461a      	mov	r2, r3
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	f7fe f8e0 	bl	8000b7c <__aeabi_uldivmod>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4613      	mov	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	e04a      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c6:	4b31      	ldr	r3, [pc, #196]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	099b      	lsrs	r3, r3, #6
 80029cc:	461a      	mov	r2, r3
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029d6:	f04f 0100 	mov.w	r1, #0
 80029da:	ea02 0400 	and.w	r4, r2, r0
 80029de:	ea03 0501 	and.w	r5, r3, r1
 80029e2:	4620      	mov	r0, r4
 80029e4:	4629      	mov	r1, r5
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	014b      	lsls	r3, r1, #5
 80029f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029f4:	0142      	lsls	r2, r0, #5
 80029f6:	4610      	mov	r0, r2
 80029f8:	4619      	mov	r1, r3
 80029fa:	1b00      	subs	r0, r0, r4
 80029fc:	eb61 0105 	sbc.w	r1, r1, r5
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	f04f 0300 	mov.w	r3, #0
 8002a08:	018b      	lsls	r3, r1, #6
 8002a0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a0e:	0182      	lsls	r2, r0, #6
 8002a10:	1a12      	subs	r2, r2, r0
 8002a12:	eb63 0301 	sbc.w	r3, r3, r1
 8002a16:	f04f 0000 	mov.w	r0, #0
 8002a1a:	f04f 0100 	mov.w	r1, #0
 8002a1e:	00d9      	lsls	r1, r3, #3
 8002a20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a24:	00d0      	lsls	r0, r2, #3
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	1912      	adds	r2, r2, r4
 8002a2c:	eb45 0303 	adc.w	r3, r5, r3
 8002a30:	f04f 0000 	mov.w	r0, #0
 8002a34:	f04f 0100 	mov.w	r1, #0
 8002a38:	0299      	lsls	r1, r3, #10
 8002a3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a3e:	0290      	lsls	r0, r2, #10
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4610      	mov	r0, r2
 8002a46:	4619      	mov	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f04f 0300 	mov.w	r3, #0
 8002a50:	f7fe f894 	bl	8000b7c <__aeabi_uldivmod>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4613      	mov	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	0c1b      	lsrs	r3, r3, #16
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	3301      	adds	r3, #1
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a74:	60bb      	str	r3, [r7, #8]
      break;
 8002a76:	e002      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a78:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a7a:	60bb      	str	r3, [r7, #8]
      break;
 8002a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	00f42400 	.word	0x00f42400
 8002a94:	007a1200 	.word	0x007a1200

08002a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_RCC_GetHCLKFreq+0x14>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	20000000 	.word	0x20000000

08002ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ab4:	f7ff fff0 	bl	8002a98 <HAL_RCC_GetHCLKFreq>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	0a9b      	lsrs	r3, r3, #10
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	4903      	ldr	r1, [pc, #12]	; (8002ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac6:	5ccb      	ldrb	r3, [r1, r3]
 8002ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	080046f8 	.word	0x080046f8

08002ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002adc:	f7ff ffdc 	bl	8002a98 <HAL_RCC_GetHCLKFreq>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	0b5b      	lsrs	r3, r3, #13
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	4903      	ldr	r1, [pc, #12]	; (8002afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aee:	5ccb      	ldrb	r3, [r1, r3]
 8002af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40023800 	.word	0x40023800
 8002afc:	080046f8 	.word	0x080046f8

08002b00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e041      	b.n	8002b96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fe feca 	bl	80018c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4610      	mov	r0, r2
 8002b40:	f000 fad4 	bl	80030ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d109      	bne.n	8002bc4 <HAL_TIM_PWM_Start+0x24>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	bf14      	ite	ne
 8002bbc:	2301      	movne	r3, #1
 8002bbe:	2300      	moveq	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	e022      	b.n	8002c0a <HAL_TIM_PWM_Start+0x6a>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d109      	bne.n	8002bde <HAL_TIM_PWM_Start+0x3e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	bf14      	ite	ne
 8002bd6:	2301      	movne	r3, #1
 8002bd8:	2300      	moveq	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	e015      	b.n	8002c0a <HAL_TIM_PWM_Start+0x6a>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d109      	bne.n	8002bf8 <HAL_TIM_PWM_Start+0x58>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	bf14      	ite	ne
 8002bf0:	2301      	movne	r3, #1
 8002bf2:	2300      	moveq	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	e008      	b.n	8002c0a <HAL_TIM_PWM_Start+0x6a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	bf14      	ite	ne
 8002c04:	2301      	movne	r3, #1
 8002c06:	2300      	moveq	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e068      	b.n	8002ce4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d104      	bne.n	8002c22 <HAL_TIM_PWM_Start+0x82>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c20:	e013      	b.n	8002c4a <HAL_TIM_PWM_Start+0xaa>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d104      	bne.n	8002c32 <HAL_TIM_PWM_Start+0x92>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c30:	e00b      	b.n	8002c4a <HAL_TIM_PWM_Start+0xaa>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d104      	bne.n	8002c42 <HAL_TIM_PWM_Start+0xa2>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c40:	e003      	b.n	8002c4a <HAL_TIM_PWM_Start+0xaa>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2202      	movs	r2, #2
 8002c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	6839      	ldr	r1, [r7, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fc56 	bl	8003504 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a23      	ldr	r2, [pc, #140]	; (8002cec <HAL_TIM_PWM_Start+0x14c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d107      	bne.n	8002c72 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a1d      	ldr	r2, [pc, #116]	; (8002cec <HAL_TIM_PWM_Start+0x14c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d018      	beq.n	8002cae <HAL_TIM_PWM_Start+0x10e>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c84:	d013      	beq.n	8002cae <HAL_TIM_PWM_Start+0x10e>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a19      	ldr	r2, [pc, #100]	; (8002cf0 <HAL_TIM_PWM_Start+0x150>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d00e      	beq.n	8002cae <HAL_TIM_PWM_Start+0x10e>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a17      	ldr	r2, [pc, #92]	; (8002cf4 <HAL_TIM_PWM_Start+0x154>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d009      	beq.n	8002cae <HAL_TIM_PWM_Start+0x10e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a16      	ldr	r2, [pc, #88]	; (8002cf8 <HAL_TIM_PWM_Start+0x158>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d004      	beq.n	8002cae <HAL_TIM_PWM_Start+0x10e>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a14      	ldr	r2, [pc, #80]	; (8002cfc <HAL_TIM_PWM_Start+0x15c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d111      	bne.n	8002cd2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b06      	cmp	r3, #6
 8002cbe:	d010      	beq.n	8002ce2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0201 	orr.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd0:	e007      	b.n	8002ce2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0201 	orr.w	r2, r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40010000 	.word	0x40010000
 8002cf0:	40000400 	.word	0x40000400
 8002cf4:	40000800 	.word	0x40000800
 8002cf8:	40000c00 	.word	0x40000c00
 8002cfc:	40014000 	.word	0x40014000

08002d00 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e097      	b.n	8002e44 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d106      	bne.n	8002d2e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7fe fde9 	bl	8001900 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2202      	movs	r2, #2
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d44:	f023 0307 	bic.w	r3, r3, #7
 8002d48:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3304      	adds	r3, #4
 8002d52:	4619      	mov	r1, r3
 8002d54:	4610      	mov	r0, r2
 8002d56:	f000 f9c9 	bl	80030ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d82:	f023 0303 	bic.w	r3, r3, #3
 8002d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	4313      	orrs	r3, r2
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002da0:	f023 030c 	bic.w	r3, r3, #12
 8002da4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002db0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	021b      	lsls	r3, r3, #8
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	011a      	lsls	r2, r3, #4
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	031b      	lsls	r3, r3, #12
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002dde:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002de6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	4313      	orrs	r3, r2
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e5c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e64:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e6c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e74:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d110      	bne.n	8002e9e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d102      	bne.n	8002e88 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e82:	7b7b      	ldrb	r3, [r7, #13]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d001      	beq.n	8002e8c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e069      	b.n	8002f60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e9c:	e031      	b.n	8002f02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d110      	bne.n	8002ec6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ea4:	7bbb      	ldrb	r3, [r7, #14]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d102      	bne.n	8002eb0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002eaa:	7b3b      	ldrb	r3, [r7, #12]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d001      	beq.n	8002eb4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e055      	b.n	8002f60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ec4:	e01d      	b.n	8002f02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d108      	bne.n	8002ede <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ecc:	7bbb      	ldrb	r3, [r7, #14]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d105      	bne.n	8002ede <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ed2:	7b7b      	ldrb	r3, [r7, #13]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d102      	bne.n	8002ede <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ed8:	7b3b      	ldrb	r3, [r7, #12]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d001      	beq.n	8002ee2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e03e      	b.n	8002f60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2202      	movs	r2, #2
 8002eee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2202      	movs	r2, #2
 8002efe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_TIM_Encoder_Start+0xc4>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d008      	beq.n	8002f20 <HAL_TIM_Encoder_Start+0xd4>
 8002f0e:	e00f      	b.n	8002f30 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2201      	movs	r2, #1
 8002f16:	2100      	movs	r1, #0
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 faf3 	bl	8003504 <TIM_CCxChannelCmd>
      break;
 8002f1e:	e016      	b.n	8002f4e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2201      	movs	r2, #1
 8002f26:	2104      	movs	r1, #4
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 faeb 	bl	8003504 <TIM_CCxChannelCmd>
      break;
 8002f2e:	e00e      	b.n	8002f4e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2201      	movs	r2, #1
 8002f36:	2100      	movs	r1, #0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fae3 	bl	8003504 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2201      	movs	r2, #1
 8002f44:	2104      	movs	r1, #4
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fadc 	bl	8003504 <TIM_CCxChannelCmd>
      break;
 8002f4c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0201 	orr.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e0ae      	b.n	80030e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b0c      	cmp	r3, #12
 8002f92:	f200 809f 	bhi.w	80030d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f96:	a201      	add	r2, pc, #4	; (adr r2, 8002f9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9c:	08002fd1 	.word	0x08002fd1
 8002fa0:	080030d5 	.word	0x080030d5
 8002fa4:	080030d5 	.word	0x080030d5
 8002fa8:	080030d5 	.word	0x080030d5
 8002fac:	08003011 	.word	0x08003011
 8002fb0:	080030d5 	.word	0x080030d5
 8002fb4:	080030d5 	.word	0x080030d5
 8002fb8:	080030d5 	.word	0x080030d5
 8002fbc:	08003053 	.word	0x08003053
 8002fc0:	080030d5 	.word	0x080030d5
 8002fc4:	080030d5 	.word	0x080030d5
 8002fc8:	080030d5 	.word	0x080030d5
 8002fcc:	08003093 	.word	0x08003093
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 f908 	bl	80031ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699a      	ldr	r2, [r3, #24]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0208 	orr.w	r2, r2, #8
 8002fea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0204 	bic.w	r2, r2, #4
 8002ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6999      	ldr	r1, [r3, #24]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	691a      	ldr	r2, [r3, #16]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	619a      	str	r2, [r3, #24]
      break;
 800300e:	e064      	b.n	80030da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	4618      	mov	r0, r3
 8003018:	f000 f94e 	bl	80032b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699a      	ldr	r2, [r3, #24]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800302a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699a      	ldr	r2, [r3, #24]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800303a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6999      	ldr	r1, [r3, #24]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	021a      	lsls	r2, r3, #8
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	619a      	str	r2, [r3, #24]
      break;
 8003050:	e043      	b.n	80030da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68b9      	ldr	r1, [r7, #8]
 8003058:	4618      	mov	r0, r3
 800305a:	f000 f999 	bl	8003390 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	69da      	ldr	r2, [r3, #28]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f042 0208 	orr.w	r2, r2, #8
 800306c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	69da      	ldr	r2, [r3, #28]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0204 	bic.w	r2, r2, #4
 800307c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	69d9      	ldr	r1, [r3, #28]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	61da      	str	r2, [r3, #28]
      break;
 8003090:	e023      	b.n	80030da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	4618      	mov	r0, r3
 800309a:	f000 f9e3 	bl	8003464 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69da      	ldr	r2, [r3, #28]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69da      	ldr	r2, [r3, #28]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69d9      	ldr	r1, [r3, #28]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	021a      	lsls	r2, r3, #8
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	61da      	str	r2, [r3, #28]
      break;
 80030d2:	e002      	b.n	80030da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	75fb      	strb	r3, [r7, #23]
      break;
 80030d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a34      	ldr	r2, [pc, #208]	; (80031d0 <TIM_Base_SetConfig+0xe4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d00f      	beq.n	8003124 <TIM_Base_SetConfig+0x38>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800310a:	d00b      	beq.n	8003124 <TIM_Base_SetConfig+0x38>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a31      	ldr	r2, [pc, #196]	; (80031d4 <TIM_Base_SetConfig+0xe8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d007      	beq.n	8003124 <TIM_Base_SetConfig+0x38>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a30      	ldr	r2, [pc, #192]	; (80031d8 <TIM_Base_SetConfig+0xec>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d003      	beq.n	8003124 <TIM_Base_SetConfig+0x38>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a2f      	ldr	r2, [pc, #188]	; (80031dc <TIM_Base_SetConfig+0xf0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d108      	bne.n	8003136 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a25      	ldr	r2, [pc, #148]	; (80031d0 <TIM_Base_SetConfig+0xe4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d01b      	beq.n	8003176 <TIM_Base_SetConfig+0x8a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003144:	d017      	beq.n	8003176 <TIM_Base_SetConfig+0x8a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a22      	ldr	r2, [pc, #136]	; (80031d4 <TIM_Base_SetConfig+0xe8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d013      	beq.n	8003176 <TIM_Base_SetConfig+0x8a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a21      	ldr	r2, [pc, #132]	; (80031d8 <TIM_Base_SetConfig+0xec>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00f      	beq.n	8003176 <TIM_Base_SetConfig+0x8a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a20      	ldr	r2, [pc, #128]	; (80031dc <TIM_Base_SetConfig+0xf0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00b      	beq.n	8003176 <TIM_Base_SetConfig+0x8a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a1f      	ldr	r2, [pc, #124]	; (80031e0 <TIM_Base_SetConfig+0xf4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d007      	beq.n	8003176 <TIM_Base_SetConfig+0x8a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a1e      	ldr	r2, [pc, #120]	; (80031e4 <TIM_Base_SetConfig+0xf8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d003      	beq.n	8003176 <TIM_Base_SetConfig+0x8a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a1d      	ldr	r2, [pc, #116]	; (80031e8 <TIM_Base_SetConfig+0xfc>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d108      	bne.n	8003188 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800317c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a08      	ldr	r2, [pc, #32]	; (80031d0 <TIM_Base_SetConfig+0xe4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d103      	bne.n	80031bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	615a      	str	r2, [r3, #20]
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40010000 	.word	0x40010000
 80031d4:	40000400 	.word	0x40000400
 80031d8:	40000800 	.word	0x40000800
 80031dc:	40000c00 	.word	0x40000c00
 80031e0:	40014000 	.word	0x40014000
 80031e4:	40014400 	.word	0x40014400
 80031e8:	40014800 	.word	0x40014800

080031ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	f023 0201 	bic.w	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 0303 	bic.w	r3, r3, #3
 8003222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f023 0302 	bic.w	r3, r3, #2
 8003234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a1c      	ldr	r2, [pc, #112]	; (80032b4 <TIM_OC1_SetConfig+0xc8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d10c      	bne.n	8003262 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f023 0308 	bic.w	r3, r3, #8
 800324e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4313      	orrs	r3, r2
 8003258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f023 0304 	bic.w	r3, r3, #4
 8003260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a13      	ldr	r2, [pc, #76]	; (80032b4 <TIM_OC1_SetConfig+0xc8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d111      	bne.n	800328e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	621a      	str	r2, [r3, #32]
}
 80032a8:	bf00      	nop
 80032aa:	371c      	adds	r7, #28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	40010000 	.word	0x40010000

080032b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	f023 0210 	bic.w	r2, r3, #16
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	021b      	lsls	r3, r3, #8
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f023 0320 	bic.w	r3, r3, #32
 8003302:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a1e      	ldr	r2, [pc, #120]	; (800338c <TIM_OC2_SetConfig+0xd4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d10d      	bne.n	8003334 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800331e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003332:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a15      	ldr	r2, [pc, #84]	; (800338c <TIM_OC2_SetConfig+0xd4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d113      	bne.n	8003364 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003342:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800334a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	621a      	str	r2, [r3, #32]
}
 800337e:	bf00      	nop
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40010000 	.word	0x40010000

08003390 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0303 	bic.w	r3, r3, #3
 80033c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a1d      	ldr	r2, [pc, #116]	; (8003460 <TIM_OC3_SetConfig+0xd0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d10d      	bne.n	800340a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a14      	ldr	r2, [pc, #80]	; (8003460 <TIM_OC3_SetConfig+0xd0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d113      	bne.n	800343a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	621a      	str	r2, [r3, #32]
}
 8003454:	bf00      	nop
 8003456:	371c      	adds	r7, #28
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	40010000 	.word	0x40010000

08003464 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800349a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	031b      	lsls	r3, r3, #12
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a10      	ldr	r2, [pc, #64]	; (8003500 <TIM_OC4_SetConfig+0x9c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d109      	bne.n	80034d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	019b      	lsls	r3, r3, #6
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	621a      	str	r2, [r3, #32]
}
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40010000 	.word	0x40010000

08003504 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	2201      	movs	r2, #1
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a1a      	ldr	r2, [r3, #32]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	43db      	mvns	r3, r3
 8003526:	401a      	ands	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a1a      	ldr	r2, [r3, #32]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	fa01 f303 	lsl.w	r3, r1, r3
 800353c:	431a      	orrs	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	621a      	str	r2, [r3, #32]
}
 8003542:	bf00      	nop
 8003544:	371c      	adds	r7, #28
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003564:	2302      	movs	r3, #2
 8003566:	e050      	b.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1c      	ldr	r2, [pc, #112]	; (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d018      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b4:	d013      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a18      	ldr	r2, [pc, #96]	; (800361c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00e      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a16      	ldr	r2, [pc, #88]	; (8003620 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d009      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a15      	ldr	r2, [pc, #84]	; (8003624 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d004      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a13      	ldr	r2, [pc, #76]	; (8003628 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d10c      	bne.n	80035f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40010000 	.word	0x40010000
 800361c:	40000400 	.word	0x40000400
 8003620:	40000800 	.word	0x40000800
 8003624:	40000c00 	.word	0x40000c00
 8003628:	40014000 	.word	0x40014000

0800362c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e03f      	b.n	80036be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fe fa54 	bl	8001b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2224      	movs	r2, #36	; 0x24
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800366e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f9cb 	bl	8003a0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003684:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003694:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b08a      	sub	sp, #40	; 0x28
 80036ca:	af02      	add	r7, sp, #8
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	603b      	str	r3, [r7, #0]
 80036d2:	4613      	mov	r3, r2
 80036d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d17c      	bne.n	80037e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <HAL_UART_Transmit+0x2c>
 80036ec:	88fb      	ldrh	r3, [r7, #6]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e075      	b.n	80037e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_UART_Transmit+0x3e>
 8003700:	2302      	movs	r3, #2
 8003702:	e06e      	b.n	80037e2 <HAL_UART_Transmit+0x11c>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2221      	movs	r2, #33	; 0x21
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800371a:	f7fe fac9 	bl	8001cb0 <HAL_GetTick>
 800371e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	88fa      	ldrh	r2, [r7, #6]
 8003724:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	88fa      	ldrh	r2, [r7, #6]
 800372a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003734:	d108      	bne.n	8003748 <HAL_UART_Transmit+0x82>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d104      	bne.n	8003748 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	e003      	b.n	8003750 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800374c:	2300      	movs	r3, #0
 800374e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003758:	e02a      	b.n	80037b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2200      	movs	r2, #0
 8003762:	2180      	movs	r1, #128	; 0x80
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f8e2 	bl	800392e <UART_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e036      	b.n	80037e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10b      	bne.n	8003792 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003788:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	3302      	adds	r3, #2
 800378e:	61bb      	str	r3, [r7, #24]
 8003790:	e007      	b.n	80037a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	781a      	ldrb	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	3301      	adds	r3, #1
 80037a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1cf      	bne.n	800375a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2200      	movs	r2, #0
 80037c2:	2140      	movs	r1, #64	; 0x40
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 f8b2 	bl	800392e <UART_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e006      	b.n	80037e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	e000      	b.n	80037e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037e0:	2302      	movs	r3, #2
  }
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3720      	adds	r7, #32
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b08a      	sub	sp, #40	; 0x28
 80037ee:	af02      	add	r7, sp, #8
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	603b      	str	r3, [r7, #0]
 80037f6:	4613      	mov	r3, r2
 80037f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b20      	cmp	r3, #32
 8003808:	f040 808c 	bne.w	8003924 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_UART_Receive+0x2e>
 8003812:	88fb      	ldrh	r3, [r7, #6]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e084      	b.n	8003926 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_UART_Receive+0x40>
 8003826:	2302      	movs	r3, #2
 8003828:	e07d      	b.n	8003926 <HAL_UART_Receive+0x13c>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2222      	movs	r2, #34	; 0x22
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003846:	f7fe fa33 	bl	8001cb0 <HAL_GetTick>
 800384a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	88fa      	ldrh	r2, [r7, #6]
 8003850:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	88fa      	ldrh	r2, [r7, #6]
 8003856:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003860:	d108      	bne.n	8003874 <HAL_UART_Receive+0x8a>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d104      	bne.n	8003874 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	e003      	b.n	800387c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003878:	2300      	movs	r3, #0
 800387a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003884:	e043      	b.n	800390e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2200      	movs	r2, #0
 800388e:	2120      	movs	r1, #32
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f84c 	bl	800392e <UART_WaitOnFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e042      	b.n	8003926 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10c      	bne.n	80038c0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	3302      	adds	r3, #2
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	e01f      	b.n	8003900 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c8:	d007      	beq.n	80038da <HAL_UART_Receive+0xf0>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10a      	bne.n	80038e8 <HAL_UART_Receive+0xfe>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d106      	bne.n	80038e8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	701a      	strb	r2, [r3, #0]
 80038e6:	e008      	b.n	80038fa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	3301      	adds	r3, #1
 80038fe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003904:	b29b      	uxth	r3, r3
 8003906:	3b01      	subs	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003912:	b29b      	uxth	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1b6      	bne.n	8003886 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	e000      	b.n	8003926 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003924:	2302      	movs	r3, #2
  }
}
 8003926:	4618      	mov	r0, r3
 8003928:	3720      	adds	r7, #32
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b090      	sub	sp, #64	; 0x40
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	603b      	str	r3, [r7, #0]
 800393a:	4613      	mov	r3, r2
 800393c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800393e:	e050      	b.n	80039e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003946:	d04c      	beq.n	80039e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800394a:	2b00      	cmp	r3, #0
 800394c:	d007      	beq.n	800395e <UART_WaitOnFlagUntilTimeout+0x30>
 800394e:	f7fe f9af 	bl	8001cb0 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800395a:	429a      	cmp	r2, r3
 800395c:	d241      	bcs.n	80039e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	330c      	adds	r3, #12
 8003964:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	e853 3f00 	ldrex	r3, [r3]
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	330c      	adds	r3, #12
 800397c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800397e:	637a      	str	r2, [r7, #52]	; 0x34
 8003980:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003982:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003986:	e841 2300 	strex	r3, r2, [r1]
 800398a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800398c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1e5      	bne.n	800395e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3314      	adds	r3, #20
 8003998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	613b      	str	r3, [r7, #16]
   return(result);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f023 0301 	bic.w	r3, r3, #1
 80039a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3314      	adds	r3, #20
 80039b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039b2:	623a      	str	r2, [r7, #32]
 80039b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b6:	69f9      	ldr	r1, [r7, #28]
 80039b8:	6a3a      	ldr	r2, [r7, #32]
 80039ba:	e841 2300 	strex	r3, r2, [r1]
 80039be:	61bb      	str	r3, [r7, #24]
   return(result);
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1e5      	bne.n	8003992 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e00f      	b.n	8003a02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4013      	ands	r3, r2
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	bf0c      	ite	eq
 80039f2:	2301      	moveq	r3, #1
 80039f4:	2300      	movne	r3, #0
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d09f      	beq.n	8003940 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3740      	adds	r7, #64	; 0x40
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a10:	b09f      	sub	sp, #124	; 0x7c
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a22:	68d9      	ldr	r1, [r3, #12]
 8003a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	ea40 0301 	orr.w	r3, r0, r1
 8003a2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a50:	f021 010c 	bic.w	r1, r1, #12
 8003a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a5a:	430b      	orrs	r3, r1
 8003a5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6a:	6999      	ldr	r1, [r3, #24]
 8003a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	ea40 0301 	orr.w	r3, r0, r1
 8003a74:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	4bc5      	ldr	r3, [pc, #788]	; (8003d90 <UART_SetConfig+0x384>)
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d004      	beq.n	8003a8a <UART_SetConfig+0x7e>
 8003a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	4bc3      	ldr	r3, [pc, #780]	; (8003d94 <UART_SetConfig+0x388>)
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d103      	bne.n	8003a92 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a8a:	f7ff f825 	bl	8002ad8 <HAL_RCC_GetPCLK2Freq>
 8003a8e:	6778      	str	r0, [r7, #116]	; 0x74
 8003a90:	e002      	b.n	8003a98 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a92:	f7ff f80d 	bl	8002ab0 <HAL_RCC_GetPCLK1Freq>
 8003a96:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa0:	f040 80b6 	bne.w	8003c10 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003aa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aa6:	461c      	mov	r4, r3
 8003aa8:	f04f 0500 	mov.w	r5, #0
 8003aac:	4622      	mov	r2, r4
 8003aae:	462b      	mov	r3, r5
 8003ab0:	1891      	adds	r1, r2, r2
 8003ab2:	6439      	str	r1, [r7, #64]	; 0x40
 8003ab4:	415b      	adcs	r3, r3
 8003ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ab8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003abc:	1912      	adds	r2, r2, r4
 8003abe:	eb45 0303 	adc.w	r3, r5, r3
 8003ac2:	f04f 0000 	mov.w	r0, #0
 8003ac6:	f04f 0100 	mov.w	r1, #0
 8003aca:	00d9      	lsls	r1, r3, #3
 8003acc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ad0:	00d0      	lsls	r0, r2, #3
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	1911      	adds	r1, r2, r4
 8003ad8:	6639      	str	r1, [r7, #96]	; 0x60
 8003ada:	416b      	adcs	r3, r5
 8003adc:	667b      	str	r3, [r7, #100]	; 0x64
 8003ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	1891      	adds	r1, r2, r2
 8003aea:	63b9      	str	r1, [r7, #56]	; 0x38
 8003aec:	415b      	adcs	r3, r3
 8003aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003af0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003af4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003af8:	f7fd f840 	bl	8000b7c <__aeabi_uldivmod>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4ba5      	ldr	r3, [pc, #660]	; (8003d98 <UART_SetConfig+0x38c>)
 8003b02:	fba3 2302 	umull	r2, r3, r3, r2
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	011e      	lsls	r6, r3, #4
 8003b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b0c:	461c      	mov	r4, r3
 8003b0e:	f04f 0500 	mov.w	r5, #0
 8003b12:	4622      	mov	r2, r4
 8003b14:	462b      	mov	r3, r5
 8003b16:	1891      	adds	r1, r2, r2
 8003b18:	6339      	str	r1, [r7, #48]	; 0x30
 8003b1a:	415b      	adcs	r3, r3
 8003b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b22:	1912      	adds	r2, r2, r4
 8003b24:	eb45 0303 	adc.w	r3, r5, r3
 8003b28:	f04f 0000 	mov.w	r0, #0
 8003b2c:	f04f 0100 	mov.w	r1, #0
 8003b30:	00d9      	lsls	r1, r3, #3
 8003b32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b36:	00d0      	lsls	r0, r2, #3
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	1911      	adds	r1, r2, r4
 8003b3e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b40:	416b      	adcs	r3, r5
 8003b42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	1891      	adds	r1, r2, r2
 8003b50:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b52:	415b      	adcs	r3, r3
 8003b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b5e:	f7fd f80d 	bl	8000b7c <__aeabi_uldivmod>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4b8c      	ldr	r3, [pc, #560]	; (8003d98 <UART_SetConfig+0x38c>)
 8003b68:	fba3 1302 	umull	r1, r3, r3, r2
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	2164      	movs	r1, #100	; 0x64
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	3332      	adds	r3, #50	; 0x32
 8003b7a:	4a87      	ldr	r2, [pc, #540]	; (8003d98 <UART_SetConfig+0x38c>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b88:	441e      	add	r6, r3
 8003b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f04f 0100 	mov.w	r1, #0
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	1894      	adds	r4, r2, r2
 8003b98:	623c      	str	r4, [r7, #32]
 8003b9a:	415b      	adcs	r3, r3
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ba2:	1812      	adds	r2, r2, r0
 8003ba4:	eb41 0303 	adc.w	r3, r1, r3
 8003ba8:	f04f 0400 	mov.w	r4, #0
 8003bac:	f04f 0500 	mov.w	r5, #0
 8003bb0:	00dd      	lsls	r5, r3, #3
 8003bb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bb6:	00d4      	lsls	r4, r2, #3
 8003bb8:	4622      	mov	r2, r4
 8003bba:	462b      	mov	r3, r5
 8003bbc:	1814      	adds	r4, r2, r0
 8003bbe:	653c      	str	r4, [r7, #80]	; 0x50
 8003bc0:	414b      	adcs	r3, r1
 8003bc2:	657b      	str	r3, [r7, #84]	; 0x54
 8003bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	1891      	adds	r1, r2, r2
 8003bd0:	61b9      	str	r1, [r7, #24]
 8003bd2:	415b      	adcs	r3, r3
 8003bd4:	61fb      	str	r3, [r7, #28]
 8003bd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bda:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003bde:	f7fc ffcd 	bl	8000b7c <__aeabi_uldivmod>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4b6c      	ldr	r3, [pc, #432]	; (8003d98 <UART_SetConfig+0x38c>)
 8003be8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	2164      	movs	r1, #100	; 0x64
 8003bf0:	fb01 f303 	mul.w	r3, r1, r3
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	3332      	adds	r3, #50	; 0x32
 8003bfa:	4a67      	ldr	r2, [pc, #412]	; (8003d98 <UART_SetConfig+0x38c>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	f003 0207 	and.w	r2, r3, #7
 8003c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4432      	add	r2, r6
 8003c0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c0e:	e0b9      	b.n	8003d84 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c12:	461c      	mov	r4, r3
 8003c14:	f04f 0500 	mov.w	r5, #0
 8003c18:	4622      	mov	r2, r4
 8003c1a:	462b      	mov	r3, r5
 8003c1c:	1891      	adds	r1, r2, r2
 8003c1e:	6139      	str	r1, [r7, #16]
 8003c20:	415b      	adcs	r3, r3
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c28:	1912      	adds	r2, r2, r4
 8003c2a:	eb45 0303 	adc.w	r3, r5, r3
 8003c2e:	f04f 0000 	mov.w	r0, #0
 8003c32:	f04f 0100 	mov.w	r1, #0
 8003c36:	00d9      	lsls	r1, r3, #3
 8003c38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c3c:	00d0      	lsls	r0, r2, #3
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	eb12 0804 	adds.w	r8, r2, r4
 8003c46:	eb43 0905 	adc.w	r9, r3, r5
 8003c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f04f 0100 	mov.w	r1, #0
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	008b      	lsls	r3, r1, #2
 8003c5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c62:	0082      	lsls	r2, r0, #2
 8003c64:	4640      	mov	r0, r8
 8003c66:	4649      	mov	r1, r9
 8003c68:	f7fc ff88 	bl	8000b7c <__aeabi_uldivmod>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4b49      	ldr	r3, [pc, #292]	; (8003d98 <UART_SetConfig+0x38c>)
 8003c72:	fba3 2302 	umull	r2, r3, r3, r2
 8003c76:	095b      	lsrs	r3, r3, #5
 8003c78:	011e      	lsls	r6, r3, #4
 8003c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f04f 0100 	mov.w	r1, #0
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	1894      	adds	r4, r2, r2
 8003c88:	60bc      	str	r4, [r7, #8]
 8003c8a:	415b      	adcs	r3, r3
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c92:	1812      	adds	r2, r2, r0
 8003c94:	eb41 0303 	adc.w	r3, r1, r3
 8003c98:	f04f 0400 	mov.w	r4, #0
 8003c9c:	f04f 0500 	mov.w	r5, #0
 8003ca0:	00dd      	lsls	r5, r3, #3
 8003ca2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ca6:	00d4      	lsls	r4, r2, #3
 8003ca8:	4622      	mov	r2, r4
 8003caa:	462b      	mov	r3, r5
 8003cac:	1814      	adds	r4, r2, r0
 8003cae:	64bc      	str	r4, [r7, #72]	; 0x48
 8003cb0:	414b      	adcs	r3, r1
 8003cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f04f 0100 	mov.w	r1, #0
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	f04f 0300 	mov.w	r3, #0
 8003cc6:	008b      	lsls	r3, r1, #2
 8003cc8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ccc:	0082      	lsls	r2, r0, #2
 8003cce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003cd2:	f7fc ff53 	bl	8000b7c <__aeabi_uldivmod>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4b2f      	ldr	r3, [pc, #188]	; (8003d98 <UART_SetConfig+0x38c>)
 8003cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce0:	095b      	lsrs	r3, r3, #5
 8003ce2:	2164      	movs	r1, #100	; 0x64
 8003ce4:	fb01 f303 	mul.w	r3, r1, r3
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	3332      	adds	r3, #50	; 0x32
 8003cee:	4a2a      	ldr	r2, [pc, #168]	; (8003d98 <UART_SetConfig+0x38c>)
 8003cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf4:	095b      	lsrs	r3, r3, #5
 8003cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cfa:	441e      	add	r6, r3
 8003cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f04f 0100 	mov.w	r1, #0
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	1894      	adds	r4, r2, r2
 8003d0a:	603c      	str	r4, [r7, #0]
 8003d0c:	415b      	adcs	r3, r3
 8003d0e:	607b      	str	r3, [r7, #4]
 8003d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d14:	1812      	adds	r2, r2, r0
 8003d16:	eb41 0303 	adc.w	r3, r1, r3
 8003d1a:	f04f 0400 	mov.w	r4, #0
 8003d1e:	f04f 0500 	mov.w	r5, #0
 8003d22:	00dd      	lsls	r5, r3, #3
 8003d24:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d28:	00d4      	lsls	r4, r2, #3
 8003d2a:	4622      	mov	r2, r4
 8003d2c:	462b      	mov	r3, r5
 8003d2e:	eb12 0a00 	adds.w	sl, r2, r0
 8003d32:	eb43 0b01 	adc.w	fp, r3, r1
 8003d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f04f 0100 	mov.w	r1, #0
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	008b      	lsls	r3, r1, #2
 8003d4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d4e:	0082      	lsls	r2, r0, #2
 8003d50:	4650      	mov	r0, sl
 8003d52:	4659      	mov	r1, fp
 8003d54:	f7fc ff12 	bl	8000b7c <__aeabi_uldivmod>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <UART_SetConfig+0x38c>)
 8003d5e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	2164      	movs	r1, #100	; 0x64
 8003d66:	fb01 f303 	mul.w	r3, r1, r3
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	3332      	adds	r3, #50	; 0x32
 8003d70:	4a09      	ldr	r2, [pc, #36]	; (8003d98 <UART_SetConfig+0x38c>)
 8003d72:	fba2 2303 	umull	r2, r3, r2, r3
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	f003 020f 	and.w	r2, r3, #15
 8003d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4432      	add	r2, r6
 8003d82:	609a      	str	r2, [r3, #8]
}
 8003d84:	bf00      	nop
 8003d86:	377c      	adds	r7, #124	; 0x7c
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d8e:	bf00      	nop
 8003d90:	40011000 	.word	0x40011000
 8003d94:	40011400 	.word	0x40011400
 8003d98:	51eb851f 	.word	0x51eb851f

08003d9c <__errno>:
 8003d9c:	4b01      	ldr	r3, [pc, #4]	; (8003da4 <__errno+0x8>)
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	2000000c 	.word	0x2000000c

08003da8 <__libc_init_array>:
 8003da8:	b570      	push	{r4, r5, r6, lr}
 8003daa:	4d0d      	ldr	r5, [pc, #52]	; (8003de0 <__libc_init_array+0x38>)
 8003dac:	4c0d      	ldr	r4, [pc, #52]	; (8003de4 <__libc_init_array+0x3c>)
 8003dae:	1b64      	subs	r4, r4, r5
 8003db0:	10a4      	asrs	r4, r4, #2
 8003db2:	2600      	movs	r6, #0
 8003db4:	42a6      	cmp	r6, r4
 8003db6:	d109      	bne.n	8003dcc <__libc_init_array+0x24>
 8003db8:	4d0b      	ldr	r5, [pc, #44]	; (8003de8 <__libc_init_array+0x40>)
 8003dba:	4c0c      	ldr	r4, [pc, #48]	; (8003dec <__libc_init_array+0x44>)
 8003dbc:	f000 fc4e 	bl	800465c <_init>
 8003dc0:	1b64      	subs	r4, r4, r5
 8003dc2:	10a4      	asrs	r4, r4, #2
 8003dc4:	2600      	movs	r6, #0
 8003dc6:	42a6      	cmp	r6, r4
 8003dc8:	d105      	bne.n	8003dd6 <__libc_init_array+0x2e>
 8003dca:	bd70      	pop	{r4, r5, r6, pc}
 8003dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dd0:	4798      	blx	r3
 8003dd2:	3601      	adds	r6, #1
 8003dd4:	e7ee      	b.n	8003db4 <__libc_init_array+0xc>
 8003dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dda:	4798      	blx	r3
 8003ddc:	3601      	adds	r6, #1
 8003dde:	e7f2      	b.n	8003dc6 <__libc_init_array+0x1e>
 8003de0:	0800473c 	.word	0x0800473c
 8003de4:	0800473c 	.word	0x0800473c
 8003de8:	0800473c 	.word	0x0800473c
 8003dec:	08004740 	.word	0x08004740

08003df0 <memset>:
 8003df0:	4402      	add	r2, r0
 8003df2:	4603      	mov	r3, r0
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d100      	bne.n	8003dfa <memset+0xa>
 8003df8:	4770      	bx	lr
 8003dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8003dfe:	e7f9      	b.n	8003df4 <memset+0x4>

08003e00 <siprintf>:
 8003e00:	b40e      	push	{r1, r2, r3}
 8003e02:	b500      	push	{lr}
 8003e04:	b09c      	sub	sp, #112	; 0x70
 8003e06:	ab1d      	add	r3, sp, #116	; 0x74
 8003e08:	9002      	str	r0, [sp, #8]
 8003e0a:	9006      	str	r0, [sp, #24]
 8003e0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e10:	4809      	ldr	r0, [pc, #36]	; (8003e38 <siprintf+0x38>)
 8003e12:	9107      	str	r1, [sp, #28]
 8003e14:	9104      	str	r1, [sp, #16]
 8003e16:	4909      	ldr	r1, [pc, #36]	; (8003e3c <siprintf+0x3c>)
 8003e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e1c:	9105      	str	r1, [sp, #20]
 8003e1e:	6800      	ldr	r0, [r0, #0]
 8003e20:	9301      	str	r3, [sp, #4]
 8003e22:	a902      	add	r1, sp, #8
 8003e24:	f000 f868 	bl	8003ef8 <_svfiprintf_r>
 8003e28:	9b02      	ldr	r3, [sp, #8]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	701a      	strb	r2, [r3, #0]
 8003e2e:	b01c      	add	sp, #112	; 0x70
 8003e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e34:	b003      	add	sp, #12
 8003e36:	4770      	bx	lr
 8003e38:	2000000c 	.word	0x2000000c
 8003e3c:	ffff0208 	.word	0xffff0208

08003e40 <__ssputs_r>:
 8003e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e44:	688e      	ldr	r6, [r1, #8]
 8003e46:	429e      	cmp	r6, r3
 8003e48:	4682      	mov	sl, r0
 8003e4a:	460c      	mov	r4, r1
 8003e4c:	4690      	mov	r8, r2
 8003e4e:	461f      	mov	r7, r3
 8003e50:	d838      	bhi.n	8003ec4 <__ssputs_r+0x84>
 8003e52:	898a      	ldrh	r2, [r1, #12]
 8003e54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e58:	d032      	beq.n	8003ec0 <__ssputs_r+0x80>
 8003e5a:	6825      	ldr	r5, [r4, #0]
 8003e5c:	6909      	ldr	r1, [r1, #16]
 8003e5e:	eba5 0901 	sub.w	r9, r5, r1
 8003e62:	6965      	ldr	r5, [r4, #20]
 8003e64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	444b      	add	r3, r9
 8003e70:	106d      	asrs	r5, r5, #1
 8003e72:	429d      	cmp	r5, r3
 8003e74:	bf38      	it	cc
 8003e76:	461d      	movcc	r5, r3
 8003e78:	0553      	lsls	r3, r2, #21
 8003e7a:	d531      	bpl.n	8003ee0 <__ssputs_r+0xa0>
 8003e7c:	4629      	mov	r1, r5
 8003e7e:	f000 fb47 	bl	8004510 <_malloc_r>
 8003e82:	4606      	mov	r6, r0
 8003e84:	b950      	cbnz	r0, 8003e9c <__ssputs_r+0x5c>
 8003e86:	230c      	movs	r3, #12
 8003e88:	f8ca 3000 	str.w	r3, [sl]
 8003e8c:	89a3      	ldrh	r3, [r4, #12]
 8003e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e92:	81a3      	strh	r3, [r4, #12]
 8003e94:	f04f 30ff 	mov.w	r0, #4294967295
 8003e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e9c:	6921      	ldr	r1, [r4, #16]
 8003e9e:	464a      	mov	r2, r9
 8003ea0:	f000 fabe 	bl	8004420 <memcpy>
 8003ea4:	89a3      	ldrh	r3, [r4, #12]
 8003ea6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eae:	81a3      	strh	r3, [r4, #12]
 8003eb0:	6126      	str	r6, [r4, #16]
 8003eb2:	6165      	str	r5, [r4, #20]
 8003eb4:	444e      	add	r6, r9
 8003eb6:	eba5 0509 	sub.w	r5, r5, r9
 8003eba:	6026      	str	r6, [r4, #0]
 8003ebc:	60a5      	str	r5, [r4, #8]
 8003ebe:	463e      	mov	r6, r7
 8003ec0:	42be      	cmp	r6, r7
 8003ec2:	d900      	bls.n	8003ec6 <__ssputs_r+0x86>
 8003ec4:	463e      	mov	r6, r7
 8003ec6:	4632      	mov	r2, r6
 8003ec8:	6820      	ldr	r0, [r4, #0]
 8003eca:	4641      	mov	r1, r8
 8003ecc:	f000 fab6 	bl	800443c <memmove>
 8003ed0:	68a3      	ldr	r3, [r4, #8]
 8003ed2:	6822      	ldr	r2, [r4, #0]
 8003ed4:	1b9b      	subs	r3, r3, r6
 8003ed6:	4432      	add	r2, r6
 8003ed8:	60a3      	str	r3, [r4, #8]
 8003eda:	6022      	str	r2, [r4, #0]
 8003edc:	2000      	movs	r0, #0
 8003ede:	e7db      	b.n	8003e98 <__ssputs_r+0x58>
 8003ee0:	462a      	mov	r2, r5
 8003ee2:	f000 fb6f 	bl	80045c4 <_realloc_r>
 8003ee6:	4606      	mov	r6, r0
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	d1e1      	bne.n	8003eb0 <__ssputs_r+0x70>
 8003eec:	6921      	ldr	r1, [r4, #16]
 8003eee:	4650      	mov	r0, sl
 8003ef0:	f000 fabe 	bl	8004470 <_free_r>
 8003ef4:	e7c7      	b.n	8003e86 <__ssputs_r+0x46>
	...

08003ef8 <_svfiprintf_r>:
 8003ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003efc:	4698      	mov	r8, r3
 8003efe:	898b      	ldrh	r3, [r1, #12]
 8003f00:	061b      	lsls	r3, r3, #24
 8003f02:	b09d      	sub	sp, #116	; 0x74
 8003f04:	4607      	mov	r7, r0
 8003f06:	460d      	mov	r5, r1
 8003f08:	4614      	mov	r4, r2
 8003f0a:	d50e      	bpl.n	8003f2a <_svfiprintf_r+0x32>
 8003f0c:	690b      	ldr	r3, [r1, #16]
 8003f0e:	b963      	cbnz	r3, 8003f2a <_svfiprintf_r+0x32>
 8003f10:	2140      	movs	r1, #64	; 0x40
 8003f12:	f000 fafd 	bl	8004510 <_malloc_r>
 8003f16:	6028      	str	r0, [r5, #0]
 8003f18:	6128      	str	r0, [r5, #16]
 8003f1a:	b920      	cbnz	r0, 8003f26 <_svfiprintf_r+0x2e>
 8003f1c:	230c      	movs	r3, #12
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	f04f 30ff 	mov.w	r0, #4294967295
 8003f24:	e0d1      	b.n	80040ca <_svfiprintf_r+0x1d2>
 8003f26:	2340      	movs	r3, #64	; 0x40
 8003f28:	616b      	str	r3, [r5, #20]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f2e:	2320      	movs	r3, #32
 8003f30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f34:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f38:	2330      	movs	r3, #48	; 0x30
 8003f3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80040e4 <_svfiprintf_r+0x1ec>
 8003f3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f42:	f04f 0901 	mov.w	r9, #1
 8003f46:	4623      	mov	r3, r4
 8003f48:	469a      	mov	sl, r3
 8003f4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f4e:	b10a      	cbz	r2, 8003f54 <_svfiprintf_r+0x5c>
 8003f50:	2a25      	cmp	r2, #37	; 0x25
 8003f52:	d1f9      	bne.n	8003f48 <_svfiprintf_r+0x50>
 8003f54:	ebba 0b04 	subs.w	fp, sl, r4
 8003f58:	d00b      	beq.n	8003f72 <_svfiprintf_r+0x7a>
 8003f5a:	465b      	mov	r3, fp
 8003f5c:	4622      	mov	r2, r4
 8003f5e:	4629      	mov	r1, r5
 8003f60:	4638      	mov	r0, r7
 8003f62:	f7ff ff6d 	bl	8003e40 <__ssputs_r>
 8003f66:	3001      	adds	r0, #1
 8003f68:	f000 80aa 	beq.w	80040c0 <_svfiprintf_r+0x1c8>
 8003f6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f6e:	445a      	add	r2, fp
 8003f70:	9209      	str	r2, [sp, #36]	; 0x24
 8003f72:	f89a 3000 	ldrb.w	r3, [sl]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 80a2 	beq.w	80040c0 <_svfiprintf_r+0x1c8>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f86:	f10a 0a01 	add.w	sl, sl, #1
 8003f8a:	9304      	str	r3, [sp, #16]
 8003f8c:	9307      	str	r3, [sp, #28]
 8003f8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f92:	931a      	str	r3, [sp, #104]	; 0x68
 8003f94:	4654      	mov	r4, sl
 8003f96:	2205      	movs	r2, #5
 8003f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f9c:	4851      	ldr	r0, [pc, #324]	; (80040e4 <_svfiprintf_r+0x1ec>)
 8003f9e:	f7fc f927 	bl	80001f0 <memchr>
 8003fa2:	9a04      	ldr	r2, [sp, #16]
 8003fa4:	b9d8      	cbnz	r0, 8003fde <_svfiprintf_r+0xe6>
 8003fa6:	06d0      	lsls	r0, r2, #27
 8003fa8:	bf44      	itt	mi
 8003faa:	2320      	movmi	r3, #32
 8003fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fb0:	0711      	lsls	r1, r2, #28
 8003fb2:	bf44      	itt	mi
 8003fb4:	232b      	movmi	r3, #43	; 0x2b
 8003fb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fba:	f89a 3000 	ldrb.w	r3, [sl]
 8003fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8003fc0:	d015      	beq.n	8003fee <_svfiprintf_r+0xf6>
 8003fc2:	9a07      	ldr	r2, [sp, #28]
 8003fc4:	4654      	mov	r4, sl
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	f04f 0c0a 	mov.w	ip, #10
 8003fcc:	4621      	mov	r1, r4
 8003fce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fd2:	3b30      	subs	r3, #48	; 0x30
 8003fd4:	2b09      	cmp	r3, #9
 8003fd6:	d94e      	bls.n	8004076 <_svfiprintf_r+0x17e>
 8003fd8:	b1b0      	cbz	r0, 8004008 <_svfiprintf_r+0x110>
 8003fda:	9207      	str	r2, [sp, #28]
 8003fdc:	e014      	b.n	8004008 <_svfiprintf_r+0x110>
 8003fde:	eba0 0308 	sub.w	r3, r0, r8
 8003fe2:	fa09 f303 	lsl.w	r3, r9, r3
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	9304      	str	r3, [sp, #16]
 8003fea:	46a2      	mov	sl, r4
 8003fec:	e7d2      	b.n	8003f94 <_svfiprintf_r+0x9c>
 8003fee:	9b03      	ldr	r3, [sp, #12]
 8003ff0:	1d19      	adds	r1, r3, #4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	9103      	str	r1, [sp, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	bfbb      	ittet	lt
 8003ffa:	425b      	neglt	r3, r3
 8003ffc:	f042 0202 	orrlt.w	r2, r2, #2
 8004000:	9307      	strge	r3, [sp, #28]
 8004002:	9307      	strlt	r3, [sp, #28]
 8004004:	bfb8      	it	lt
 8004006:	9204      	strlt	r2, [sp, #16]
 8004008:	7823      	ldrb	r3, [r4, #0]
 800400a:	2b2e      	cmp	r3, #46	; 0x2e
 800400c:	d10c      	bne.n	8004028 <_svfiprintf_r+0x130>
 800400e:	7863      	ldrb	r3, [r4, #1]
 8004010:	2b2a      	cmp	r3, #42	; 0x2a
 8004012:	d135      	bne.n	8004080 <_svfiprintf_r+0x188>
 8004014:	9b03      	ldr	r3, [sp, #12]
 8004016:	1d1a      	adds	r2, r3, #4
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	9203      	str	r2, [sp, #12]
 800401c:	2b00      	cmp	r3, #0
 800401e:	bfb8      	it	lt
 8004020:	f04f 33ff 	movlt.w	r3, #4294967295
 8004024:	3402      	adds	r4, #2
 8004026:	9305      	str	r3, [sp, #20]
 8004028:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80040f4 <_svfiprintf_r+0x1fc>
 800402c:	7821      	ldrb	r1, [r4, #0]
 800402e:	2203      	movs	r2, #3
 8004030:	4650      	mov	r0, sl
 8004032:	f7fc f8dd 	bl	80001f0 <memchr>
 8004036:	b140      	cbz	r0, 800404a <_svfiprintf_r+0x152>
 8004038:	2340      	movs	r3, #64	; 0x40
 800403a:	eba0 000a 	sub.w	r0, r0, sl
 800403e:	fa03 f000 	lsl.w	r0, r3, r0
 8004042:	9b04      	ldr	r3, [sp, #16]
 8004044:	4303      	orrs	r3, r0
 8004046:	3401      	adds	r4, #1
 8004048:	9304      	str	r3, [sp, #16]
 800404a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800404e:	4826      	ldr	r0, [pc, #152]	; (80040e8 <_svfiprintf_r+0x1f0>)
 8004050:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004054:	2206      	movs	r2, #6
 8004056:	f7fc f8cb 	bl	80001f0 <memchr>
 800405a:	2800      	cmp	r0, #0
 800405c:	d038      	beq.n	80040d0 <_svfiprintf_r+0x1d8>
 800405e:	4b23      	ldr	r3, [pc, #140]	; (80040ec <_svfiprintf_r+0x1f4>)
 8004060:	bb1b      	cbnz	r3, 80040aa <_svfiprintf_r+0x1b2>
 8004062:	9b03      	ldr	r3, [sp, #12]
 8004064:	3307      	adds	r3, #7
 8004066:	f023 0307 	bic.w	r3, r3, #7
 800406a:	3308      	adds	r3, #8
 800406c:	9303      	str	r3, [sp, #12]
 800406e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004070:	4433      	add	r3, r6
 8004072:	9309      	str	r3, [sp, #36]	; 0x24
 8004074:	e767      	b.n	8003f46 <_svfiprintf_r+0x4e>
 8004076:	fb0c 3202 	mla	r2, ip, r2, r3
 800407a:	460c      	mov	r4, r1
 800407c:	2001      	movs	r0, #1
 800407e:	e7a5      	b.n	8003fcc <_svfiprintf_r+0xd4>
 8004080:	2300      	movs	r3, #0
 8004082:	3401      	adds	r4, #1
 8004084:	9305      	str	r3, [sp, #20]
 8004086:	4619      	mov	r1, r3
 8004088:	f04f 0c0a 	mov.w	ip, #10
 800408c:	4620      	mov	r0, r4
 800408e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004092:	3a30      	subs	r2, #48	; 0x30
 8004094:	2a09      	cmp	r2, #9
 8004096:	d903      	bls.n	80040a0 <_svfiprintf_r+0x1a8>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0c5      	beq.n	8004028 <_svfiprintf_r+0x130>
 800409c:	9105      	str	r1, [sp, #20]
 800409e:	e7c3      	b.n	8004028 <_svfiprintf_r+0x130>
 80040a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80040a4:	4604      	mov	r4, r0
 80040a6:	2301      	movs	r3, #1
 80040a8:	e7f0      	b.n	800408c <_svfiprintf_r+0x194>
 80040aa:	ab03      	add	r3, sp, #12
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	462a      	mov	r2, r5
 80040b0:	4b0f      	ldr	r3, [pc, #60]	; (80040f0 <_svfiprintf_r+0x1f8>)
 80040b2:	a904      	add	r1, sp, #16
 80040b4:	4638      	mov	r0, r7
 80040b6:	f3af 8000 	nop.w
 80040ba:	1c42      	adds	r2, r0, #1
 80040bc:	4606      	mov	r6, r0
 80040be:	d1d6      	bne.n	800406e <_svfiprintf_r+0x176>
 80040c0:	89ab      	ldrh	r3, [r5, #12]
 80040c2:	065b      	lsls	r3, r3, #25
 80040c4:	f53f af2c 	bmi.w	8003f20 <_svfiprintf_r+0x28>
 80040c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040ca:	b01d      	add	sp, #116	; 0x74
 80040cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040d0:	ab03      	add	r3, sp, #12
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	462a      	mov	r2, r5
 80040d6:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <_svfiprintf_r+0x1f8>)
 80040d8:	a904      	add	r1, sp, #16
 80040da:	4638      	mov	r0, r7
 80040dc:	f000 f87a 	bl	80041d4 <_printf_i>
 80040e0:	e7eb      	b.n	80040ba <_svfiprintf_r+0x1c2>
 80040e2:	bf00      	nop
 80040e4:	08004700 	.word	0x08004700
 80040e8:	0800470a 	.word	0x0800470a
 80040ec:	00000000 	.word	0x00000000
 80040f0:	08003e41 	.word	0x08003e41
 80040f4:	08004706 	.word	0x08004706

080040f8 <_printf_common>:
 80040f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040fc:	4616      	mov	r6, r2
 80040fe:	4699      	mov	r9, r3
 8004100:	688a      	ldr	r2, [r1, #8]
 8004102:	690b      	ldr	r3, [r1, #16]
 8004104:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004108:	4293      	cmp	r3, r2
 800410a:	bfb8      	it	lt
 800410c:	4613      	movlt	r3, r2
 800410e:	6033      	str	r3, [r6, #0]
 8004110:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004114:	4607      	mov	r7, r0
 8004116:	460c      	mov	r4, r1
 8004118:	b10a      	cbz	r2, 800411e <_printf_common+0x26>
 800411a:	3301      	adds	r3, #1
 800411c:	6033      	str	r3, [r6, #0]
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	0699      	lsls	r1, r3, #26
 8004122:	bf42      	ittt	mi
 8004124:	6833      	ldrmi	r3, [r6, #0]
 8004126:	3302      	addmi	r3, #2
 8004128:	6033      	strmi	r3, [r6, #0]
 800412a:	6825      	ldr	r5, [r4, #0]
 800412c:	f015 0506 	ands.w	r5, r5, #6
 8004130:	d106      	bne.n	8004140 <_printf_common+0x48>
 8004132:	f104 0a19 	add.w	sl, r4, #25
 8004136:	68e3      	ldr	r3, [r4, #12]
 8004138:	6832      	ldr	r2, [r6, #0]
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	42ab      	cmp	r3, r5
 800413e:	dc26      	bgt.n	800418e <_printf_common+0x96>
 8004140:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004144:	1e13      	subs	r3, r2, #0
 8004146:	6822      	ldr	r2, [r4, #0]
 8004148:	bf18      	it	ne
 800414a:	2301      	movne	r3, #1
 800414c:	0692      	lsls	r2, r2, #26
 800414e:	d42b      	bmi.n	80041a8 <_printf_common+0xb0>
 8004150:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004154:	4649      	mov	r1, r9
 8004156:	4638      	mov	r0, r7
 8004158:	47c0      	blx	r8
 800415a:	3001      	adds	r0, #1
 800415c:	d01e      	beq.n	800419c <_printf_common+0xa4>
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	68e5      	ldr	r5, [r4, #12]
 8004162:	6832      	ldr	r2, [r6, #0]
 8004164:	f003 0306 	and.w	r3, r3, #6
 8004168:	2b04      	cmp	r3, #4
 800416a:	bf08      	it	eq
 800416c:	1aad      	subeq	r5, r5, r2
 800416e:	68a3      	ldr	r3, [r4, #8]
 8004170:	6922      	ldr	r2, [r4, #16]
 8004172:	bf0c      	ite	eq
 8004174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004178:	2500      	movne	r5, #0
 800417a:	4293      	cmp	r3, r2
 800417c:	bfc4      	itt	gt
 800417e:	1a9b      	subgt	r3, r3, r2
 8004180:	18ed      	addgt	r5, r5, r3
 8004182:	2600      	movs	r6, #0
 8004184:	341a      	adds	r4, #26
 8004186:	42b5      	cmp	r5, r6
 8004188:	d11a      	bne.n	80041c0 <_printf_common+0xc8>
 800418a:	2000      	movs	r0, #0
 800418c:	e008      	b.n	80041a0 <_printf_common+0xa8>
 800418e:	2301      	movs	r3, #1
 8004190:	4652      	mov	r2, sl
 8004192:	4649      	mov	r1, r9
 8004194:	4638      	mov	r0, r7
 8004196:	47c0      	blx	r8
 8004198:	3001      	adds	r0, #1
 800419a:	d103      	bne.n	80041a4 <_printf_common+0xac>
 800419c:	f04f 30ff 	mov.w	r0, #4294967295
 80041a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a4:	3501      	adds	r5, #1
 80041a6:	e7c6      	b.n	8004136 <_printf_common+0x3e>
 80041a8:	18e1      	adds	r1, r4, r3
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	2030      	movs	r0, #48	; 0x30
 80041ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041b2:	4422      	add	r2, r4
 80041b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041bc:	3302      	adds	r3, #2
 80041be:	e7c7      	b.n	8004150 <_printf_common+0x58>
 80041c0:	2301      	movs	r3, #1
 80041c2:	4622      	mov	r2, r4
 80041c4:	4649      	mov	r1, r9
 80041c6:	4638      	mov	r0, r7
 80041c8:	47c0      	blx	r8
 80041ca:	3001      	adds	r0, #1
 80041cc:	d0e6      	beq.n	800419c <_printf_common+0xa4>
 80041ce:	3601      	adds	r6, #1
 80041d0:	e7d9      	b.n	8004186 <_printf_common+0x8e>
	...

080041d4 <_printf_i>:
 80041d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041d8:	460c      	mov	r4, r1
 80041da:	4691      	mov	r9, r2
 80041dc:	7e27      	ldrb	r7, [r4, #24]
 80041de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80041e0:	2f78      	cmp	r7, #120	; 0x78
 80041e2:	4680      	mov	r8, r0
 80041e4:	469a      	mov	sl, r3
 80041e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041ea:	d807      	bhi.n	80041fc <_printf_i+0x28>
 80041ec:	2f62      	cmp	r7, #98	; 0x62
 80041ee:	d80a      	bhi.n	8004206 <_printf_i+0x32>
 80041f0:	2f00      	cmp	r7, #0
 80041f2:	f000 80d8 	beq.w	80043a6 <_printf_i+0x1d2>
 80041f6:	2f58      	cmp	r7, #88	; 0x58
 80041f8:	f000 80a3 	beq.w	8004342 <_printf_i+0x16e>
 80041fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004200:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004204:	e03a      	b.n	800427c <_printf_i+0xa8>
 8004206:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800420a:	2b15      	cmp	r3, #21
 800420c:	d8f6      	bhi.n	80041fc <_printf_i+0x28>
 800420e:	a001      	add	r0, pc, #4	; (adr r0, 8004214 <_printf_i+0x40>)
 8004210:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004214:	0800426d 	.word	0x0800426d
 8004218:	08004281 	.word	0x08004281
 800421c:	080041fd 	.word	0x080041fd
 8004220:	080041fd 	.word	0x080041fd
 8004224:	080041fd 	.word	0x080041fd
 8004228:	080041fd 	.word	0x080041fd
 800422c:	08004281 	.word	0x08004281
 8004230:	080041fd 	.word	0x080041fd
 8004234:	080041fd 	.word	0x080041fd
 8004238:	080041fd 	.word	0x080041fd
 800423c:	080041fd 	.word	0x080041fd
 8004240:	0800438d 	.word	0x0800438d
 8004244:	080042b1 	.word	0x080042b1
 8004248:	0800436f 	.word	0x0800436f
 800424c:	080041fd 	.word	0x080041fd
 8004250:	080041fd 	.word	0x080041fd
 8004254:	080043af 	.word	0x080043af
 8004258:	080041fd 	.word	0x080041fd
 800425c:	080042b1 	.word	0x080042b1
 8004260:	080041fd 	.word	0x080041fd
 8004264:	080041fd 	.word	0x080041fd
 8004268:	08004377 	.word	0x08004377
 800426c:	680b      	ldr	r3, [r1, #0]
 800426e:	1d1a      	adds	r2, r3, #4
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	600a      	str	r2, [r1, #0]
 8004274:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004278:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800427c:	2301      	movs	r3, #1
 800427e:	e0a3      	b.n	80043c8 <_printf_i+0x1f4>
 8004280:	6825      	ldr	r5, [r4, #0]
 8004282:	6808      	ldr	r0, [r1, #0]
 8004284:	062e      	lsls	r6, r5, #24
 8004286:	f100 0304 	add.w	r3, r0, #4
 800428a:	d50a      	bpl.n	80042a2 <_printf_i+0xce>
 800428c:	6805      	ldr	r5, [r0, #0]
 800428e:	600b      	str	r3, [r1, #0]
 8004290:	2d00      	cmp	r5, #0
 8004292:	da03      	bge.n	800429c <_printf_i+0xc8>
 8004294:	232d      	movs	r3, #45	; 0x2d
 8004296:	426d      	negs	r5, r5
 8004298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800429c:	485e      	ldr	r0, [pc, #376]	; (8004418 <_printf_i+0x244>)
 800429e:	230a      	movs	r3, #10
 80042a0:	e019      	b.n	80042d6 <_printf_i+0x102>
 80042a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80042a6:	6805      	ldr	r5, [r0, #0]
 80042a8:	600b      	str	r3, [r1, #0]
 80042aa:	bf18      	it	ne
 80042ac:	b22d      	sxthne	r5, r5
 80042ae:	e7ef      	b.n	8004290 <_printf_i+0xbc>
 80042b0:	680b      	ldr	r3, [r1, #0]
 80042b2:	6825      	ldr	r5, [r4, #0]
 80042b4:	1d18      	adds	r0, r3, #4
 80042b6:	6008      	str	r0, [r1, #0]
 80042b8:	0628      	lsls	r0, r5, #24
 80042ba:	d501      	bpl.n	80042c0 <_printf_i+0xec>
 80042bc:	681d      	ldr	r5, [r3, #0]
 80042be:	e002      	b.n	80042c6 <_printf_i+0xf2>
 80042c0:	0669      	lsls	r1, r5, #25
 80042c2:	d5fb      	bpl.n	80042bc <_printf_i+0xe8>
 80042c4:	881d      	ldrh	r5, [r3, #0]
 80042c6:	4854      	ldr	r0, [pc, #336]	; (8004418 <_printf_i+0x244>)
 80042c8:	2f6f      	cmp	r7, #111	; 0x6f
 80042ca:	bf0c      	ite	eq
 80042cc:	2308      	moveq	r3, #8
 80042ce:	230a      	movne	r3, #10
 80042d0:	2100      	movs	r1, #0
 80042d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042d6:	6866      	ldr	r6, [r4, #4]
 80042d8:	60a6      	str	r6, [r4, #8]
 80042da:	2e00      	cmp	r6, #0
 80042dc:	bfa2      	ittt	ge
 80042de:	6821      	ldrge	r1, [r4, #0]
 80042e0:	f021 0104 	bicge.w	r1, r1, #4
 80042e4:	6021      	strge	r1, [r4, #0]
 80042e6:	b90d      	cbnz	r5, 80042ec <_printf_i+0x118>
 80042e8:	2e00      	cmp	r6, #0
 80042ea:	d04d      	beq.n	8004388 <_printf_i+0x1b4>
 80042ec:	4616      	mov	r6, r2
 80042ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80042f2:	fb03 5711 	mls	r7, r3, r1, r5
 80042f6:	5dc7      	ldrb	r7, [r0, r7]
 80042f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042fc:	462f      	mov	r7, r5
 80042fe:	42bb      	cmp	r3, r7
 8004300:	460d      	mov	r5, r1
 8004302:	d9f4      	bls.n	80042ee <_printf_i+0x11a>
 8004304:	2b08      	cmp	r3, #8
 8004306:	d10b      	bne.n	8004320 <_printf_i+0x14c>
 8004308:	6823      	ldr	r3, [r4, #0]
 800430a:	07df      	lsls	r7, r3, #31
 800430c:	d508      	bpl.n	8004320 <_printf_i+0x14c>
 800430e:	6923      	ldr	r3, [r4, #16]
 8004310:	6861      	ldr	r1, [r4, #4]
 8004312:	4299      	cmp	r1, r3
 8004314:	bfde      	ittt	le
 8004316:	2330      	movle	r3, #48	; 0x30
 8004318:	f806 3c01 	strble.w	r3, [r6, #-1]
 800431c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004320:	1b92      	subs	r2, r2, r6
 8004322:	6122      	str	r2, [r4, #16]
 8004324:	f8cd a000 	str.w	sl, [sp]
 8004328:	464b      	mov	r3, r9
 800432a:	aa03      	add	r2, sp, #12
 800432c:	4621      	mov	r1, r4
 800432e:	4640      	mov	r0, r8
 8004330:	f7ff fee2 	bl	80040f8 <_printf_common>
 8004334:	3001      	adds	r0, #1
 8004336:	d14c      	bne.n	80043d2 <_printf_i+0x1fe>
 8004338:	f04f 30ff 	mov.w	r0, #4294967295
 800433c:	b004      	add	sp, #16
 800433e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004342:	4835      	ldr	r0, [pc, #212]	; (8004418 <_printf_i+0x244>)
 8004344:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004348:	6823      	ldr	r3, [r4, #0]
 800434a:	680e      	ldr	r6, [r1, #0]
 800434c:	061f      	lsls	r7, r3, #24
 800434e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004352:	600e      	str	r6, [r1, #0]
 8004354:	d514      	bpl.n	8004380 <_printf_i+0x1ac>
 8004356:	07d9      	lsls	r1, r3, #31
 8004358:	bf44      	itt	mi
 800435a:	f043 0320 	orrmi.w	r3, r3, #32
 800435e:	6023      	strmi	r3, [r4, #0]
 8004360:	b91d      	cbnz	r5, 800436a <_printf_i+0x196>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	f023 0320 	bic.w	r3, r3, #32
 8004368:	6023      	str	r3, [r4, #0]
 800436a:	2310      	movs	r3, #16
 800436c:	e7b0      	b.n	80042d0 <_printf_i+0xfc>
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	f043 0320 	orr.w	r3, r3, #32
 8004374:	6023      	str	r3, [r4, #0]
 8004376:	2378      	movs	r3, #120	; 0x78
 8004378:	4828      	ldr	r0, [pc, #160]	; (800441c <_printf_i+0x248>)
 800437a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800437e:	e7e3      	b.n	8004348 <_printf_i+0x174>
 8004380:	065e      	lsls	r6, r3, #25
 8004382:	bf48      	it	mi
 8004384:	b2ad      	uxthmi	r5, r5
 8004386:	e7e6      	b.n	8004356 <_printf_i+0x182>
 8004388:	4616      	mov	r6, r2
 800438a:	e7bb      	b.n	8004304 <_printf_i+0x130>
 800438c:	680b      	ldr	r3, [r1, #0]
 800438e:	6826      	ldr	r6, [r4, #0]
 8004390:	6960      	ldr	r0, [r4, #20]
 8004392:	1d1d      	adds	r5, r3, #4
 8004394:	600d      	str	r5, [r1, #0]
 8004396:	0635      	lsls	r5, r6, #24
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	d501      	bpl.n	80043a0 <_printf_i+0x1cc>
 800439c:	6018      	str	r0, [r3, #0]
 800439e:	e002      	b.n	80043a6 <_printf_i+0x1d2>
 80043a0:	0671      	lsls	r1, r6, #25
 80043a2:	d5fb      	bpl.n	800439c <_printf_i+0x1c8>
 80043a4:	8018      	strh	r0, [r3, #0]
 80043a6:	2300      	movs	r3, #0
 80043a8:	6123      	str	r3, [r4, #16]
 80043aa:	4616      	mov	r6, r2
 80043ac:	e7ba      	b.n	8004324 <_printf_i+0x150>
 80043ae:	680b      	ldr	r3, [r1, #0]
 80043b0:	1d1a      	adds	r2, r3, #4
 80043b2:	600a      	str	r2, [r1, #0]
 80043b4:	681e      	ldr	r6, [r3, #0]
 80043b6:	6862      	ldr	r2, [r4, #4]
 80043b8:	2100      	movs	r1, #0
 80043ba:	4630      	mov	r0, r6
 80043bc:	f7fb ff18 	bl	80001f0 <memchr>
 80043c0:	b108      	cbz	r0, 80043c6 <_printf_i+0x1f2>
 80043c2:	1b80      	subs	r0, r0, r6
 80043c4:	6060      	str	r0, [r4, #4]
 80043c6:	6863      	ldr	r3, [r4, #4]
 80043c8:	6123      	str	r3, [r4, #16]
 80043ca:	2300      	movs	r3, #0
 80043cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043d0:	e7a8      	b.n	8004324 <_printf_i+0x150>
 80043d2:	6923      	ldr	r3, [r4, #16]
 80043d4:	4632      	mov	r2, r6
 80043d6:	4649      	mov	r1, r9
 80043d8:	4640      	mov	r0, r8
 80043da:	47d0      	blx	sl
 80043dc:	3001      	adds	r0, #1
 80043de:	d0ab      	beq.n	8004338 <_printf_i+0x164>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	079b      	lsls	r3, r3, #30
 80043e4:	d413      	bmi.n	800440e <_printf_i+0x23a>
 80043e6:	68e0      	ldr	r0, [r4, #12]
 80043e8:	9b03      	ldr	r3, [sp, #12]
 80043ea:	4298      	cmp	r0, r3
 80043ec:	bfb8      	it	lt
 80043ee:	4618      	movlt	r0, r3
 80043f0:	e7a4      	b.n	800433c <_printf_i+0x168>
 80043f2:	2301      	movs	r3, #1
 80043f4:	4632      	mov	r2, r6
 80043f6:	4649      	mov	r1, r9
 80043f8:	4640      	mov	r0, r8
 80043fa:	47d0      	blx	sl
 80043fc:	3001      	adds	r0, #1
 80043fe:	d09b      	beq.n	8004338 <_printf_i+0x164>
 8004400:	3501      	adds	r5, #1
 8004402:	68e3      	ldr	r3, [r4, #12]
 8004404:	9903      	ldr	r1, [sp, #12]
 8004406:	1a5b      	subs	r3, r3, r1
 8004408:	42ab      	cmp	r3, r5
 800440a:	dcf2      	bgt.n	80043f2 <_printf_i+0x21e>
 800440c:	e7eb      	b.n	80043e6 <_printf_i+0x212>
 800440e:	2500      	movs	r5, #0
 8004410:	f104 0619 	add.w	r6, r4, #25
 8004414:	e7f5      	b.n	8004402 <_printf_i+0x22e>
 8004416:	bf00      	nop
 8004418:	08004711 	.word	0x08004711
 800441c:	08004722 	.word	0x08004722

08004420 <memcpy>:
 8004420:	440a      	add	r2, r1
 8004422:	4291      	cmp	r1, r2
 8004424:	f100 33ff 	add.w	r3, r0, #4294967295
 8004428:	d100      	bne.n	800442c <memcpy+0xc>
 800442a:	4770      	bx	lr
 800442c:	b510      	push	{r4, lr}
 800442e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004432:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004436:	4291      	cmp	r1, r2
 8004438:	d1f9      	bne.n	800442e <memcpy+0xe>
 800443a:	bd10      	pop	{r4, pc}

0800443c <memmove>:
 800443c:	4288      	cmp	r0, r1
 800443e:	b510      	push	{r4, lr}
 8004440:	eb01 0402 	add.w	r4, r1, r2
 8004444:	d902      	bls.n	800444c <memmove+0x10>
 8004446:	4284      	cmp	r4, r0
 8004448:	4623      	mov	r3, r4
 800444a:	d807      	bhi.n	800445c <memmove+0x20>
 800444c:	1e43      	subs	r3, r0, #1
 800444e:	42a1      	cmp	r1, r4
 8004450:	d008      	beq.n	8004464 <memmove+0x28>
 8004452:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004456:	f803 2f01 	strb.w	r2, [r3, #1]!
 800445a:	e7f8      	b.n	800444e <memmove+0x12>
 800445c:	4402      	add	r2, r0
 800445e:	4601      	mov	r1, r0
 8004460:	428a      	cmp	r2, r1
 8004462:	d100      	bne.n	8004466 <memmove+0x2a>
 8004464:	bd10      	pop	{r4, pc}
 8004466:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800446a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800446e:	e7f7      	b.n	8004460 <memmove+0x24>

08004470 <_free_r>:
 8004470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004472:	2900      	cmp	r1, #0
 8004474:	d048      	beq.n	8004508 <_free_r+0x98>
 8004476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800447a:	9001      	str	r0, [sp, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	f1a1 0404 	sub.w	r4, r1, #4
 8004482:	bfb8      	it	lt
 8004484:	18e4      	addlt	r4, r4, r3
 8004486:	f000 f8d3 	bl	8004630 <__malloc_lock>
 800448a:	4a20      	ldr	r2, [pc, #128]	; (800450c <_free_r+0x9c>)
 800448c:	9801      	ldr	r0, [sp, #4]
 800448e:	6813      	ldr	r3, [r2, #0]
 8004490:	4615      	mov	r5, r2
 8004492:	b933      	cbnz	r3, 80044a2 <_free_r+0x32>
 8004494:	6063      	str	r3, [r4, #4]
 8004496:	6014      	str	r4, [r2, #0]
 8004498:	b003      	add	sp, #12
 800449a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800449e:	f000 b8cd 	b.w	800463c <__malloc_unlock>
 80044a2:	42a3      	cmp	r3, r4
 80044a4:	d90b      	bls.n	80044be <_free_r+0x4e>
 80044a6:	6821      	ldr	r1, [r4, #0]
 80044a8:	1862      	adds	r2, r4, r1
 80044aa:	4293      	cmp	r3, r2
 80044ac:	bf04      	itt	eq
 80044ae:	681a      	ldreq	r2, [r3, #0]
 80044b0:	685b      	ldreq	r3, [r3, #4]
 80044b2:	6063      	str	r3, [r4, #4]
 80044b4:	bf04      	itt	eq
 80044b6:	1852      	addeq	r2, r2, r1
 80044b8:	6022      	streq	r2, [r4, #0]
 80044ba:	602c      	str	r4, [r5, #0]
 80044bc:	e7ec      	b.n	8004498 <_free_r+0x28>
 80044be:	461a      	mov	r2, r3
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	b10b      	cbz	r3, 80044c8 <_free_r+0x58>
 80044c4:	42a3      	cmp	r3, r4
 80044c6:	d9fa      	bls.n	80044be <_free_r+0x4e>
 80044c8:	6811      	ldr	r1, [r2, #0]
 80044ca:	1855      	adds	r5, r2, r1
 80044cc:	42a5      	cmp	r5, r4
 80044ce:	d10b      	bne.n	80044e8 <_free_r+0x78>
 80044d0:	6824      	ldr	r4, [r4, #0]
 80044d2:	4421      	add	r1, r4
 80044d4:	1854      	adds	r4, r2, r1
 80044d6:	42a3      	cmp	r3, r4
 80044d8:	6011      	str	r1, [r2, #0]
 80044da:	d1dd      	bne.n	8004498 <_free_r+0x28>
 80044dc:	681c      	ldr	r4, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	6053      	str	r3, [r2, #4]
 80044e2:	4421      	add	r1, r4
 80044e4:	6011      	str	r1, [r2, #0]
 80044e6:	e7d7      	b.n	8004498 <_free_r+0x28>
 80044e8:	d902      	bls.n	80044f0 <_free_r+0x80>
 80044ea:	230c      	movs	r3, #12
 80044ec:	6003      	str	r3, [r0, #0]
 80044ee:	e7d3      	b.n	8004498 <_free_r+0x28>
 80044f0:	6825      	ldr	r5, [r4, #0]
 80044f2:	1961      	adds	r1, r4, r5
 80044f4:	428b      	cmp	r3, r1
 80044f6:	bf04      	itt	eq
 80044f8:	6819      	ldreq	r1, [r3, #0]
 80044fa:	685b      	ldreq	r3, [r3, #4]
 80044fc:	6063      	str	r3, [r4, #4]
 80044fe:	bf04      	itt	eq
 8004500:	1949      	addeq	r1, r1, r5
 8004502:	6021      	streq	r1, [r4, #0]
 8004504:	6054      	str	r4, [r2, #4]
 8004506:	e7c7      	b.n	8004498 <_free_r+0x28>
 8004508:	b003      	add	sp, #12
 800450a:	bd30      	pop	{r4, r5, pc}
 800450c:	20000090 	.word	0x20000090

08004510 <_malloc_r>:
 8004510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004512:	1ccd      	adds	r5, r1, #3
 8004514:	f025 0503 	bic.w	r5, r5, #3
 8004518:	3508      	adds	r5, #8
 800451a:	2d0c      	cmp	r5, #12
 800451c:	bf38      	it	cc
 800451e:	250c      	movcc	r5, #12
 8004520:	2d00      	cmp	r5, #0
 8004522:	4606      	mov	r6, r0
 8004524:	db01      	blt.n	800452a <_malloc_r+0x1a>
 8004526:	42a9      	cmp	r1, r5
 8004528:	d903      	bls.n	8004532 <_malloc_r+0x22>
 800452a:	230c      	movs	r3, #12
 800452c:	6033      	str	r3, [r6, #0]
 800452e:	2000      	movs	r0, #0
 8004530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004532:	f000 f87d 	bl	8004630 <__malloc_lock>
 8004536:	4921      	ldr	r1, [pc, #132]	; (80045bc <_malloc_r+0xac>)
 8004538:	680a      	ldr	r2, [r1, #0]
 800453a:	4614      	mov	r4, r2
 800453c:	b99c      	cbnz	r4, 8004566 <_malloc_r+0x56>
 800453e:	4f20      	ldr	r7, [pc, #128]	; (80045c0 <_malloc_r+0xb0>)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	b923      	cbnz	r3, 800454e <_malloc_r+0x3e>
 8004544:	4621      	mov	r1, r4
 8004546:	4630      	mov	r0, r6
 8004548:	f000 f862 	bl	8004610 <_sbrk_r>
 800454c:	6038      	str	r0, [r7, #0]
 800454e:	4629      	mov	r1, r5
 8004550:	4630      	mov	r0, r6
 8004552:	f000 f85d 	bl	8004610 <_sbrk_r>
 8004556:	1c43      	adds	r3, r0, #1
 8004558:	d123      	bne.n	80045a2 <_malloc_r+0x92>
 800455a:	230c      	movs	r3, #12
 800455c:	6033      	str	r3, [r6, #0]
 800455e:	4630      	mov	r0, r6
 8004560:	f000 f86c 	bl	800463c <__malloc_unlock>
 8004564:	e7e3      	b.n	800452e <_malloc_r+0x1e>
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	1b5b      	subs	r3, r3, r5
 800456a:	d417      	bmi.n	800459c <_malloc_r+0x8c>
 800456c:	2b0b      	cmp	r3, #11
 800456e:	d903      	bls.n	8004578 <_malloc_r+0x68>
 8004570:	6023      	str	r3, [r4, #0]
 8004572:	441c      	add	r4, r3
 8004574:	6025      	str	r5, [r4, #0]
 8004576:	e004      	b.n	8004582 <_malloc_r+0x72>
 8004578:	6863      	ldr	r3, [r4, #4]
 800457a:	42a2      	cmp	r2, r4
 800457c:	bf0c      	ite	eq
 800457e:	600b      	streq	r3, [r1, #0]
 8004580:	6053      	strne	r3, [r2, #4]
 8004582:	4630      	mov	r0, r6
 8004584:	f000 f85a 	bl	800463c <__malloc_unlock>
 8004588:	f104 000b 	add.w	r0, r4, #11
 800458c:	1d23      	adds	r3, r4, #4
 800458e:	f020 0007 	bic.w	r0, r0, #7
 8004592:	1ac2      	subs	r2, r0, r3
 8004594:	d0cc      	beq.n	8004530 <_malloc_r+0x20>
 8004596:	1a1b      	subs	r3, r3, r0
 8004598:	50a3      	str	r3, [r4, r2]
 800459a:	e7c9      	b.n	8004530 <_malloc_r+0x20>
 800459c:	4622      	mov	r2, r4
 800459e:	6864      	ldr	r4, [r4, #4]
 80045a0:	e7cc      	b.n	800453c <_malloc_r+0x2c>
 80045a2:	1cc4      	adds	r4, r0, #3
 80045a4:	f024 0403 	bic.w	r4, r4, #3
 80045a8:	42a0      	cmp	r0, r4
 80045aa:	d0e3      	beq.n	8004574 <_malloc_r+0x64>
 80045ac:	1a21      	subs	r1, r4, r0
 80045ae:	4630      	mov	r0, r6
 80045b0:	f000 f82e 	bl	8004610 <_sbrk_r>
 80045b4:	3001      	adds	r0, #1
 80045b6:	d1dd      	bne.n	8004574 <_malloc_r+0x64>
 80045b8:	e7cf      	b.n	800455a <_malloc_r+0x4a>
 80045ba:	bf00      	nop
 80045bc:	20000090 	.word	0x20000090
 80045c0:	20000094 	.word	0x20000094

080045c4 <_realloc_r>:
 80045c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c6:	4607      	mov	r7, r0
 80045c8:	4614      	mov	r4, r2
 80045ca:	460e      	mov	r6, r1
 80045cc:	b921      	cbnz	r1, 80045d8 <_realloc_r+0x14>
 80045ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80045d2:	4611      	mov	r1, r2
 80045d4:	f7ff bf9c 	b.w	8004510 <_malloc_r>
 80045d8:	b922      	cbnz	r2, 80045e4 <_realloc_r+0x20>
 80045da:	f7ff ff49 	bl	8004470 <_free_r>
 80045de:	4625      	mov	r5, r4
 80045e0:	4628      	mov	r0, r5
 80045e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045e4:	f000 f830 	bl	8004648 <_malloc_usable_size_r>
 80045e8:	42a0      	cmp	r0, r4
 80045ea:	d20f      	bcs.n	800460c <_realloc_r+0x48>
 80045ec:	4621      	mov	r1, r4
 80045ee:	4638      	mov	r0, r7
 80045f0:	f7ff ff8e 	bl	8004510 <_malloc_r>
 80045f4:	4605      	mov	r5, r0
 80045f6:	2800      	cmp	r0, #0
 80045f8:	d0f2      	beq.n	80045e0 <_realloc_r+0x1c>
 80045fa:	4631      	mov	r1, r6
 80045fc:	4622      	mov	r2, r4
 80045fe:	f7ff ff0f 	bl	8004420 <memcpy>
 8004602:	4631      	mov	r1, r6
 8004604:	4638      	mov	r0, r7
 8004606:	f7ff ff33 	bl	8004470 <_free_r>
 800460a:	e7e9      	b.n	80045e0 <_realloc_r+0x1c>
 800460c:	4635      	mov	r5, r6
 800460e:	e7e7      	b.n	80045e0 <_realloc_r+0x1c>

08004610 <_sbrk_r>:
 8004610:	b538      	push	{r3, r4, r5, lr}
 8004612:	4d06      	ldr	r5, [pc, #24]	; (800462c <_sbrk_r+0x1c>)
 8004614:	2300      	movs	r3, #0
 8004616:	4604      	mov	r4, r0
 8004618:	4608      	mov	r0, r1
 800461a:	602b      	str	r3, [r5, #0]
 800461c:	f7fc fff2 	bl	8001604 <_sbrk>
 8004620:	1c43      	adds	r3, r0, #1
 8004622:	d102      	bne.n	800462a <_sbrk_r+0x1a>
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	b103      	cbz	r3, 800462a <_sbrk_r+0x1a>
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	bd38      	pop	{r3, r4, r5, pc}
 800462c:	200001b8 	.word	0x200001b8

08004630 <__malloc_lock>:
 8004630:	4801      	ldr	r0, [pc, #4]	; (8004638 <__malloc_lock+0x8>)
 8004632:	f000 b811 	b.w	8004658 <__retarget_lock_acquire_recursive>
 8004636:	bf00      	nop
 8004638:	200001c0 	.word	0x200001c0

0800463c <__malloc_unlock>:
 800463c:	4801      	ldr	r0, [pc, #4]	; (8004644 <__malloc_unlock+0x8>)
 800463e:	f000 b80c 	b.w	800465a <__retarget_lock_release_recursive>
 8004642:	bf00      	nop
 8004644:	200001c0 	.word	0x200001c0

08004648 <_malloc_usable_size_r>:
 8004648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800464c:	1f18      	subs	r0, r3, #4
 800464e:	2b00      	cmp	r3, #0
 8004650:	bfbc      	itt	lt
 8004652:	580b      	ldrlt	r3, [r1, r0]
 8004654:	18c0      	addlt	r0, r0, r3
 8004656:	4770      	bx	lr

08004658 <__retarget_lock_acquire_recursive>:
 8004658:	4770      	bx	lr

0800465a <__retarget_lock_release_recursive>:
 800465a:	4770      	bx	lr

0800465c <_init>:
 800465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465e:	bf00      	nop
 8004660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004662:	bc08      	pop	{r3}
 8004664:	469e      	mov	lr, r3
 8004666:	4770      	bx	lr

08004668 <_fini>:
 8004668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466a:	bf00      	nop
 800466c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466e:	bc08      	pop	{r3}
 8004670:	469e      	mov	lr, r3
 8004672:	4770      	bx	lr
